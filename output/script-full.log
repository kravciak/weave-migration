13:35 [32mControllerContainerAllowingPrivilegeEscalation [input/policies][0m
# Containers Running With Privilege Escalation

Containers are running with PrivilegeEscalation configured. Setting this Policy to `true` allows child processes to gain more privileges than its parent process.  

This Policy gates whether or not a user is allowed to set the security context of a container to `allowPrivilegeEscalation` to `true`. The default value for this is `false` so no child process of a container can gain more privileges than its parent.

There are 2 parameters for this Policy:
- exclude_namespace (string) : This sets a namespace you want to exclude from Policy compliance checking. 
- allow_privilege_escalation (bool) : This checks for the value of `allowPrivilegeEscalation` in your spec.  


Check the following path to see what the PrivilegeEscalation value is set to.
```
...
  spec:
    containers:
      securityContext:
        allowPrivilegeEscalation: <value>
```
https://kubernetes.io/docs/tasks/configure-pod-container/security-context/


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: true
        value: [kube-system]
      - name: allow_privilege_escalation
        type: boolean
        required: true
        value: false
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Running With Privilege Escalation
  io.artifacthub.keywords: pci-dss, cis-benchmark, mitre-attack, nist800-190, gdpr, default, soc2-type1
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-running-with-privilege-escalation
  io.kubewarden.policy.description: "Containers are running with PrivilegeEscalation configured. Setting this Policy to `true` allows child processes to gain more privileges than its parent process.  \n\nThis Policy gates whether or not a user is allowed to set the security context of a container to `allowPrivilegeEscalation` to `true`. The default value for this is `false` so no child process of a container can gain more privileges than its parent.\n\nThere are 2 parameters for this Policy:\n- exclude_namespace (string) : This sets a namespace you want to exclude from Policy compliance checking. \n- allow_privilege_escalation (bool) : This checks for the value of `allowPrivilegeEscalation` in your spec.  \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-running-with-privilege-escalation
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.2.4, pci-dss.2.2.5
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.2.5
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.4.1
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.3.3.2
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
2024/12/12 13:35:08 Testing ControllerContainerAllowingPrivilegeEscalation policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerAllowingPrivilegeEscalation'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerAllowingPrivilegeEscalation'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerAllowingPrivilegeEscalation'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerAllowingPrivilegeEscalation'
13:35 [32mControllerContainerBlockHostPath [input/policies][0m
# Containers Using Hostpath

This Policy checks for containers that are trying to use HostPath. 

A `hostPath` volume mounts a file or directory from the host node's filesystem into your Pod. This is not something that most Pods will need, but it offers a powerful escape hatch for some applications.


Using HostPath could allow mounting the entire hostâ€™s filesystem into your pod, giving you read/write access on the hostâ€™s filesystem. This leaves your cluster vulnerable to escape Kubernetes constraints and access components at the Node (OS) level. 
```
...
  spec:
    template:
      spec:
        volumes:
          - hostPath:
```


# Settings
```yaml
  settings:
    parameters:
      - name: hostpath_key
        type: string
        required: true
        value: hostPath
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Using Hostpath
  io.artifacthub.keywords: mitre-attack, nist800-190, gdpr, default
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-using-hostpath
  io.kubewarden.policy.description: "This Policy checks for containers that are trying to use HostPath. \n\nA `hostPath` volume mounts a file or directory from the host node's filesystem into your Pod. This is not something that most Pods will need, but it offers a powerful escape hatch for some applications.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-using-hostpath
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.3.2
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.4.4.5
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
2024/12/12 13:35:09 Testing ControllerContainerBlockHostPath policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerBlockHostPath'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerBlockHostPath'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerBlockHostPath'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerBlockHostPath'
13:35 [32mControllerContainerBlockPortsRange [input/policies][0m
# Containers Block Ports Range

This Policy checks for container ports that are set below the set value. TCP ports under 1024 are reserved so we recommend setting your Policy to 1024 or higher. 


Choose ports over the value that is specified in the Policy. 
```
...
  spec:
    containers:
      - ports:
        - containerPort: <target_port>
```
https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt


# Settings
```yaml
  settings:
    parameters:
      - name: target_port
        type: integer
        required: true
        value: 1024
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Block Ports Range
  io.artifacthub.keywords: pci-dss, nist800-190
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-block-ports-range
  io.kubewarden.policy.description: "This Policy checks for container ports that are set below the set value. TCP ports under 1024 are reserved so we recommend setting your Policy to 1024 or higher. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-block-ports-range
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.1.6, pci-dss.2.2.2
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.4.4.2
2024/12/12 13:35:09 Testing ControllerContainerBlockPortsRange policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerBlockPortsRange'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerBlockPortsRange'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerBlockPortsRange'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerBlockPortsRange'
13:35 [32mControllerContainerBlockSSHPort [input/policies][0m
# Containers Block Ssh Port

This Policy checks if the container is exposing ssh port.


Make sure you are not exposing ssh port on containers.
```
...
  spec:
    containers:
      ports:
      - containerPort: <port>
```


# Settings
```yaml
  settings:
    parameters:
      - name: container_port
        type: integer
        required: true
        value: 22
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Block Ssh Port
  io.artifacthub.keywords: pci-dss
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-block-ssh-port
  io.kubewarden.policy.description: |
    This Policy checks if the container is exposing ssh port.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-block-ssh-port
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.1.6, pci-dss.1.3.1, pci-dss.2.2.2
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSSHPort'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSSHPort'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSSHPort'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSSHPort'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSSHPort'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSSHPort'
13:35 [32mControllerContainerBlockSysctls [input/policies][0m
# Container Block Sysctls

Setting sysctls can allow containers unauthorized escalated privileges to a Kubernetes node. 


You should not set  `securityContext.sysctls` 
```
...
  spec:
    securityContext:
      sysctls
```
https://kubernetes.io/docs/tasks/configure-pod-container/security-context/


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value: [kube-system]
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Block Sysctls
  io.artifacthub.keywords: pci-dss, cis-benchmark, mitre-attack, nist800-190, gdpr, default
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: container-block-sysctl
  io.kubewarden.policy.description: "Setting sysctls can allow containers unauthorized escalated privileges to a Kubernetes node. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-block-sysctl
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.2.4, pci-dss.2.2.5
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.2.6
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.4.1
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.3.3.1
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSysctls'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSysctls'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSysctls'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSysctls'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSysctls'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSysctls'
13:35 [32mControllerContainerBlockSysctls_CVE-2022-0811 [input/policies][0m
# Container Block Sysctls CVE-2022-0811

Setting sysctls can allow containers unauthorized escalated privileges to a Kubernetes node. 


You should not set `securityContext.sysctls.value` to include `+` or `=` characters. 
```
...
  spec:
    securityContext:
      sysctls: 
        - name: name
          value "1+2=3"
```
```
https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
https://www.crowdstrike.com/blog/cr8escape-new-vulnerability-discovered-in-cri-o-container-engine-cve-2022-0811/


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value: [kube-system]
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Block Sysctls CVE-2022-0811
  io.artifacthub.keywords: pci-dss, cis-benchmark, mitre-attack, nist800-190, gdpr, default
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: container-block-sysctl.cve-2022-0811
  io.kubewarden.policy.description: "Setting sysctls can allow containers unauthorized escalated privileges to a Kubernetes node. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-block-sysctl.cve-2022-0811
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.2.4, pci-dss.2.2.5
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.2.6
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.4.1
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.3.3.1
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSysctls_CVE-2022-0811'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSysctls_CVE-2022-0811'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSysctls_CVE-2022-0811'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSysctls_CVE-2022-0811'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSysctls_CVE-2022-0811'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerBlockSysctls_CVE-2022-0811'
13:35 [32mControllerContainerLinuxCapabilities [input/policies][0m
# Containers Running With Unapproved Linux Capabilities

Linux capabilities provide a finer-grained breakdown of the privileges traditionally associated with the superuser. Not specifying those capabilities gives the container access to all OS capabilities which may result in exploiting the VM at which the container is running. The issue is reported when a container has `SYS_ADMIN`, `NET_RAW`, `NET_ADMIN`, or `ALL` capabilities. For this Policy, you can also exclude a namespace, such as `kube-system`. 

With Linux capabilities, you can grant certain privileges to a process without granting all the privileges of the root user. To add or remove Linux capabilities for a Container, include the capabilities field in the securityContext section of the Container manifest.


You should set the specific Linux capabilities that your container needs. Or you could simply remove from `capabilities` the values of `SYS_ADMIN`, `NET_ADMIN`, and `ALL`.
```
...
  spec:
    containers:
    - securityContext:
        capabilities:
          add: ["SYS_ADMIN, "ALL", "NET_ADMIN"]
```
https://kubernetes.io/docs/tasks/configure-pod-container/security-context/


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Running With Unapproved Linux Capabilities
  io.artifacthub.keywords: pci-dss, cis-benchmark, mitre-attack, nist800-190, gdpr, soc2-type1, default
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-running-with-unapproved-linux-capabilities
  io.kubewarden.policy.description: "Linux capabilities provide a finer-grained breakdown of the privileges traditionally associated with the superuser. Not specifying those capabilities gives the container access to all OS capabilities which may result in exploiting the VM at which the container is running. The issue is reported when a container has `SYS_ADMIN`, `NET_RAW`, `NET_ADMIN`, or `ALL` capabilities. For this Policy, you can also exclude a namespace, such as `kube-system`. \n\nWith Linux capabilities, you can grant certain privileges to a process without granting all the privileges of the root user. To add or remove Linux capabilities for a Container, include the capabilities field in the securityContext section of the Container manifest.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-running-with-unapproved-linux-capabilities
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.2.4, pci-dss.2.2.5
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.2.7, cis-benchmark.5.2.8, cis-benchmark.5.2.9
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.4.1
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.3.3.1
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
2024/12/12 13:35:10 Testing ControllerContainerLinuxCapabilities policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerLinuxCapabilities'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerLinuxCapabilities'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerLinuxCapabilities'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerLinuxCapabilities'
13:35 [32mControllerContainerRunningAsRoot [input/policies][0m
# Container Running As Root

Running as root gives the container full access to all resources in the VM it is running on. Containers should not run with such access rights unless required by design. This Policy enforces that the `securityContext.runAsNonRoot` attribute is set to `true`. 


You should set `securityContext.runAsNonRoot` to `true`. Not setting it will default to giving the container root user rights on the VM that it is running on. 
```
...
  spec:
    securityContext:
      runAsNonRoot: true
```
https://kubernetes.io/docs/tasks/configure-pod-container/security-context/


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value: [kube-system]
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Running As Root
  io.artifacthub.keywords: pci-dss, cis-benchmark, mitre-attack, nist800-190, gdpr, default
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: container-running-as-root
  io.kubewarden.policy.description: "Running as root gives the container full access to all resources in the VM it is running on. Containers should not run with such access rights unless required by design. This Policy enforces that the `securityContext.runAsNonRoot` attribute is set to `true`. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-running-as-root
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.2.4, pci-dss.2.2.5
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.2.6
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.4.1
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.3.3.1
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerRunningAsRoot'
opa test policy.rego tests/*.rego
PASS: 7/7
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerRunningAsRoot'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerRunningAsRoot'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerRunningAsRoot'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerRunningAsRoot'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerRunningAsRoot'
13:35 [32mControllerContainerRunningAsUser [input/policies][0m
# Container Running As User

Containers has a feature in which you specify the ID of the user which all processes in the container will run with. This Policy enforces that the `securityContext.runAsUser` attribute is set to a uid greater than root uid. Running as root user gives the container full access to all resources in the VM it is running on. Containers should not run with such access rights unless required by design. 


You should set `securityContext.runAsUser` uid to something greater than root uid. Not setting it will default to giving the container root user rights on the VM that it is running on. 
```
...
  spec:
    securityContext:
      runAsUser: <uid>
```
https://kubernetes.io/docs/tasks/configure-pod-container/security-context/


# Settings
```yaml
  settings:
    parameters:
      - name: uid
        type: integer
        required: true
        value: 0
      - name: exclude_namespaces
        type: array
        required: false
        value: [kube-system]
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Running As User
  io.artifacthub.keywords: pci-dss, cis-benchmark, mitre-attack, nist800-190, gdpr, default
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: container-running-as-user
  io.kubewarden.policy.description: "Containers has a feature in which you specify the ID of the user which all processes in the container will run with. This Policy enforces that the `securityContext.runAsUser` attribute is set to a uid greater than root uid. Running as root user gives the container full access to all resources in the VM it is running on. Containers should not run with such access rights unless required by design. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-running-as-user
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.2.4, pci-dss.2.2.5
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.2.6
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.4.1
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.3.3.1
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerRunningAsUser'
opa test policy.rego tests/*.rego
PASS: 7/7
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerRunningAsUser'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerRunningAsUser'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerRunningAsUser'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerRunningAsUser'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerContainerRunningAsUser'
13:35 [32mControllerContainerRunningPrivilegedMode [input/policies][0m
# Containers Running In Privileged Mode

This Policy reports if containers are running in privileged mode. A privileged container is given access to all devices on the host. This allows the container nearly all the same access as processes running on the host.

By default a container is not allowed to access any devices on the host, but a "privileged" container is given access to all devices on the host. This allows the container nearly all the same access as processes running on the host. This is useful for containers that want to use linux capabilities like manipulating the network stack and accessing devices.


Look at the following path to see what the settings are. 
```
...
  spec:
    containers:
    - securityContext:
        privileged: <privilege>
```
https://kubernetes.io/docs/tasks/configure-pod-container/security-context/


# Settings
```yaml
  settings:
    parameters:
      - name: privilege
        type: boolean
        required: true
        value: false
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Running In Privileged Mode
  io.artifacthub.keywords: pci-dss, cis-benchmark, mitre-attack, nist800-190, gdpr, soc2-type1, default
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-running-in-privileged-mode
  io.kubewarden.policy.description: |
    This Policy reports if containers are running in privileged mode. A privileged container is given access to all devices on the host. This allows the container nearly all the same access as processes running on the host.

    By default a container is not allowed to access any devices on the host, but a "privileged" container is given access to all devices on the host. This allows the container nearly all the same access as processes running on the host. This is useful for containers that want to use linux capabilities like manipulating the network stack and accessing devices.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-running-in-privileged-mode
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.2.4, pci-dss.2.2.5
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.2.1
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.4.1
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.3.3.1
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
2024/12/12 13:35:11 Testing ControllerContainerRunningPrivilegedMode policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerRunningPrivilegedMode'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerRunningPrivilegedMode'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerRunningPrivilegedMode'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerRunningPrivilegedMode'
13:35 [32mControllerContainerServiceAccountTokenAutomount [input/policies][0m
# Controller ServiceAccount Tokens Automount

This Policy allows for the option of enabling or disabling Service Accounts that are created for a Pod. The recommended practice is to set the `automount_token` to `false.  

When a pod is created without specifying a service account, it is automatically assigned the default service account in the same namespace. This is a security concern because a compromised container can access the API using automatically mounted service account credentials. The API permissions of the service account depend on the authorization plugin and policy in use, but could possibly create and delete pods. 

We recommend setting the `automount_token` to `false`. 

In version 1.6+, you can opt out of automounting API credentials for a particular pod.


Ensure the setting in the Policy matches the Service Account declaration in the controller. 
```
...
  spec:
    automountServiceAccountToken: false
```

https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server


# Settings
```yaml
  settings:
    parameters:
      - name: automount_token
        type: boolean
        required: true
        value: false
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Controller ServiceAccount Tokens Automount
  io.artifacthub.keywords: pci-dss, cis-benchmark, mitre-attack, hipaa, gdpr, default, soc2-type1
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: controller-serviceaccount-tokens-automount
  io.kubewarden.policy.description: "This Policy allows for the option of enabling or disabling Service Accounts that are created for a Pod. The recommended practice is to set the `automount_token` to `false.  \n\nWhen a pod is created without specifying a service account, it is automatically assigned the default service account in the same namespace. This is a security concern because a compromised container can access the API using automatically mounted service account credentials. The API permissions of the service account depend on the authorization plugin and policy in use, but could possibly create and delete pods. \n\nWe recommend setting the `automount_token` to `false`. \n\nIn version 1.6+, you can opt out of automounting API credentials for a particular pod.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/controller-serviceaccount-tokens-automount
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.7.2.1
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.1.5
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.1.4
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.3
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerServiceAccountTokenAutomount'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerServiceAccountTokenAutomount'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerServiceAccountTokenAutomount'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerServiceAccountTokenAutomount'
13:35 [32mControllerContainerUsingHostPort [input/policies][0m
# Containers Using Hostport

This Policy checks if `hostPort` is set. When `hostPort` is set, a Pod is bound to a hostPort and limits the number of places the Pod can be scheduled. That's because each <hostIP, hostPort, protocol> combination must be unique. If you don't specify the hostIP and protocol explicitly, Kubernetes will use 0.0.0.0 as the default hostIP and TCP as the default protocol.

Don't specify a hostPort for a Pod unless it is absolutely necessary.  


Try avoid setting `hostPort` in your spec. 
```
...
  spec:
    containers:
    - ports:
      - hostPort: 8080
```
https://kubernetes.io/docs/concepts/configuration/overview/#services


# Settings
```yaml
  settings:
    parameters:
      - name: host_port
        type: string
        required: true
        value: hostPort
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Using Hostport
  io.artifacthub.keywords: pci-dss, nist800-190
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-using-hostport
  io.kubewarden.policy.description: "This Policy checks if `hostPort` is set. When `hostPort` is set, a Pod is bound to a hostPort and limits the number of places the Pod can be scheduled. That's because each <hostIP, hostPort, protocol> combination must be unique. If you don't specify the hostIP and protocol explicitly, Kubernetes will use 0.0.0.0 as the default hostIP and TCP as the default protocol.\n\nDon't specify a hostPort for a Pod unless it is absolutely necessary.  \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-using-hostport
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.2.2
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.4.4.2
2024/12/12 13:35:12 Testing ControllerContainerUsingHostPort policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerUsingHostPort'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerUsingHostPort'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerUsingHostPort'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerUsingHostPort'
13:35 [32mControllerDockerSocketMount [input/policies][0m
# Containers Mounting Docker Socket

This Policy checks the mounting of the `docker.sock` socket of the node into the container. The docker socket filename can be altered based on your configuration. The full path is unnecessary as the Policy accounts for any path.  


Ensure workloads aren't mounting the `docker.sock` (or other configured socket name) in order to avoid a violation. 
```
...
  spec:
    template:
      spec:
        volumes:
          - name: docker-sock
            hostPath:
              path: "<path>/<this value>"
              type: File
```


# Settings
```yaml
  settings:
    parameters:
      - name: docker_sock
        type: string
        required: true
        value: docker.sock
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Mounting Docker Socket
  io.artifacthub.keywords: nist800-190, gdpr, default
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-mounting-docker-socket
  io.kubewarden.policy.description: "This Policy checks the mounting of the `docker.sock` socket of the node into the container. The docker socket filename can be altered based on your configuration. The full path is unnecessary as the Policy accounts for any path.  \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-mounting-docker-socket
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.4.4.3
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
2024/12/12 13:35:12 Testing ControllerDockerSocketMount policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerDockerSocketMount'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerDockerSocketMount'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerDockerSocketMount'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerDockerSocketMount'
13:35 [32mControllerImagePullPolicy [input/policies][0m
# Container Image Pull Policy

This Policy is to ensure you are setting a value for your `imagePullPolicy`. 

The `imagePullPolicy` and the tag of the image affect when the kubelet attempts to pull the specified image.

`imagePullPolicy`: IfNotPresent: the image is pulled only if it is not already present locally.

`imagePullPolicy`: Always: every time the kubelet launches a container, the kubelet queries the container image registry to resolve the name to an image digest. If the kubelet has a container image with that exact digest cached locally, the kubelet uses its cached image; otherwise, the kubelet downloads (pulls) the image with the resolved digest, and uses that image to launch the container.

`imagePullPolicy` is omitted and either the image tag is :latest or it is omitted: `imagePullPolicy` is automatically set to Always. Note that this will not be updated to IfNotPresent if the tag changes value.

`imagePullPolicy` is omitted and the image tag is present but not :latest: `imagePullPolicy` is automatically set to IfNotPresent. Note that this will not be updated to Always if the tag is later removed or changed to :latest.

`imagePullPolicy`: Never: the image is assumed to exist locally. No attempt is made to pull the image.


Ensure you have an imagePullPolicy set that matches your policy. 
```
...
  spec:
    containers:
    - imagePullPolicy: <policy>
```
https://kubernetes.io/docs/concepts/configuration/overview/#container-images


# Settings
```yaml
  settings:
    parameters:
      - name: policy
        type: string
        required: true
        value: Always
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Image Pull Policy
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: container-image-pull-policy
  io.kubewarden.policy.description: "This Policy is to ensure you are setting a value for your `imagePullPolicy`. \n\nThe `imagePullPolicy` and the tag of the image affect when the kubelet attempts to pull the specified image.\n\n`imagePullPolicy`: IfNotPresent: the image is pulled only if it is not already present locally.\n\n`imagePullPolicy`: Always: every time the kubelet launches a container, the kubelet queries the container image registry to resolve the name to an image digest. If the kubelet has a container image with that exact digest cached locally, the kubelet uses its cached image; otherwise, the kubelet downloads (pulls) the image with the resolved digest, and uses that image to launch the container.\n\n`imagePullPolicy` is omitted and either the image tag is :latest or it is omitted: `imagePullPolicy` is automatically set to Always. Note that this will not be updated to IfNotPresent if the tag changes value.\n\n`imagePullPolicy` is omitted and the image tag is present but not :latest: `imagePullPolicy` is automatically set to IfNotPresent. Note that this will not be updated to Always if the tag is later removed or changed to :latest.\n\n`imagePullPolicy`: Never: the image is assumed to exist locally. No attempt is made to pull the image.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-image-pull-policy
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: software-supply-chain
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerImagePullPolicy'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerImagePullPolicy'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerImagePullPolicy'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerImagePullPolicy'
13:35 [32mControllerImageTag [input/policies][0m
# Container Prohibit Image Tag

Prohibit certain image tags by specifying them in the Policy. The Policy will also violate if the a tag is not set, or is set to `latest`. 

Note: You should avoid using the :latest tag when deploying containers in production as it is harder to track which version of the image is running and more difficult to roll back properly.


Configure an image tag that is not in the Policy. 
```
...
  spec:
    containers:
    - image: registry/image_name:<tag>
```
https://kubernetes.io/docs/concepts/configuration/overview/#container-images


# Settings
```yaml
  settings:
    parameters:
      - name: image_tag
        type: string
        required: true
        value: latest
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Prohibit Image Tag
  io.artifacthub.keywords: cis-benchmark, mitre-attack, gdpr, soc2-type1, default
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: container-prohibit-image-tag
  io.kubewarden.policy.description: "Prohibit certain image tags by specifying them in the Policy. The Policy will also violate if the a tag is not set, or is set to `latest`. \n\nNote: You should avoid using the :latest tag when deploying containers in production as it is harder to track which version of the image is running and more difficult to roll back properly.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-prohibit-image-tag
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: software-supply-chain
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.5.1
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.1.2
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.8
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerImageTag'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerImageTag'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerImageTag'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerImageTag'
13:35 [32mControllerMinimumReplicaCount [input/policies][0m
# Containers Minimum Replica Count

Use this Policy to to check the replica count of your workloads. The value set in the Policy is greater than or equal to the amount desired, so if the replica count is lower than what is specified, the Policy will be in violation. 


The replica count should be a value equal or greater than what is set in the Policy.
```
spec:
  replicas: <replica_count>
```
https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment


# Settings
```yaml
  settings:
    parameters:
      - name: replica_count
        type: integer
        required: true
        value: 2
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `StatefulSet`, `ReplicaSet`, `ReplicationController`, `HorizontalPodAutoscaler`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, statefulsets, replicasets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
  - apiGroups: [autoscaling]
    apiVersions: [v2]
    resources: [horizontalpodautoscalers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Minimum Replica Count
  io.artifacthub.keywords: soc2-type1
  io.artifacthub.resources: Deployment, StatefulSet, ReplicaSet, ReplicationController, HorizontalPodAutoscaler
  io.kubewarden.policy.title: containers-minimum-replica-count
  io.kubewarden.policy.description: "Use this Policy to to check the replica count of your workloads. The value set in the Policy is greater than or equal to the amount desired, so if the replica count is lower than what is specified, the Policy will be in violation. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-minimum-replica-count
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: reliability
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMinimumReplicaCount'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMinimumReplicaCount'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMinimumReplicaCount'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMinimumReplicaCount'
13:35 [32mControllerMissingKubernetesAppComponentLabel [input/policies][0m
# Missing Kubernetes App Component Label

Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: 

### owner
A label key of `owner` will help identify who the owner of this entity is. 

### app.kubernetes.io/name
The name of the application	

### app.kubernetes.io/instance
A unique name identifying the instance of an application	  

### app.kubernetes.io/version
The current version of the application (e.g., a semantic version, revision hash, etc.)

### app.kubernetes.io/part-of
The name of a higher level application this one is part of	

### app.kubernetes.io/managed-by
The tool being used to manage the operation of an application	

### app.kubernetes.io/created-by
The controller/user who created this resource	


Add these custom labels to `metadata`.
* owner
* app.kubernetes.io/name
* app.kubernetes.io/instance
* app.kubernetes.io/version
* app.kubernetes.io/name
* app.kubernetes.io/part-of
* app.kubernetes.io/managed-by
* app.kubernetes.io/created-by

```
metadata:
  labels:
    <label>: value
```  
For additional information, please check
* https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels 


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Missing Kubernetes App Component Label
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: missing-kubernetes-app-component-label
  io.kubewarden.policy.description: "Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: \n\n### owner\nA label key of `owner` will help identify who the owner of this entity is. \n\n### app.kubernetes.io/name\nThe name of the application\t\n\n### app.kubernetes.io/instance\nA unique name identifying the instance of an application\t  \n\n### app.kubernetes.io/version\nThe current version of the application (e.g., a semantic version, revision hash, etc.)\n\n### app.kubernetes.io/part-of\nThe name of a higher level application this one is part of\t\n\n### app.kubernetes.io/managed-by\nThe tool being used to manage the operation of an application\t\n\n### app.kubernetes.io/created-by\nThe controller/user who created this resource\t\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/missing-kubernetes-app-component-label
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: low
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppComponentLabel'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppComponentLabel'
2024/12/12 13:35:14 Testing ControllerMissingKubernetesAppComponentLabel policy
2024/12/12 13:35:14 Testing ControllerMissingKubernetesAppComponentLabel policy failed: [{"issue_detected":true,"msg":"Missing 'app.kubernetes.io/component' label","recommended_value":"app.kubernetes.io/component","violating_key":"metadata.labels"}]
13:35 [31m  Yaml tests failed[0m
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppComponentLabel'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppComponentLabel'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppComponentLabel'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppComponentLabel'
13:35 [32mControllerMissingKubernetesAppCreatedByLabel [input/policies][0m
# Missing Kubernetes App Created By Label

Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: 

### owner
A label key of `owner` will help identify who the owner of this entity is. 

### app.kubernetes.io/name
The name of the application	

### app.kubernetes.io/instance
A unique name identifying the instance of an application	  

### app.kubernetes.io/version
The current version of the application (e.g., a semantic version, revision hash, etc.)

### app.kubernetes.io/part-of
The name of a higher level application this one is part of	

### app.kubernetes.io/managed-by
The tool being used to manage the operation of an application	

### app.kubernetes.io/created-by
The controller/user who created this resource	


Add these custom labels to `metadata`.
* owner
* app.kubernetes.io/name
* app.kubernetes.io/instance
* app.kubernetes.io/version
* app.kubernetes.io/name
* app.kubernetes.io/part-of
* app.kubernetes.io/managed-by
* app.kubernetes.io/created-by

```
metadata:
  labels:
    <label>: value
```  
For additional information, please check
* https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels 


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Missing Kubernetes App Created By Label
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: missing-kubernetes-app-created-by-label
  io.kubewarden.policy.description: "Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: \n\n### owner\nA label key of `owner` will help identify who the owner of this entity is. \n\n### app.kubernetes.io/name\nThe name of the application\t\n\n### app.kubernetes.io/instance\nA unique name identifying the instance of an application\t  \n\n### app.kubernetes.io/version\nThe current version of the application (e.g., a semantic version, revision hash, etc.)\n\n### app.kubernetes.io/part-of\nThe name of a higher level application this one is part of\t\n\n### app.kubernetes.io/managed-by\nThe tool being used to manage the operation of an application\t\n\n### app.kubernetes.io/created-by\nThe controller/user who created this resource\t\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/missing-kubernetes-app-created-by-label
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: low
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppCreatedByLabel'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppCreatedByLabel'
2024/12/12 13:35:14 Testing ControllerMissingKubernetesAppCreatedByLabel policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppCreatedByLabel'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppCreatedByLabel'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppCreatedByLabel'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppCreatedByLabel'
13:35 [32mControllerMissingKubernetesAppInstanceLabel [input/policies][0m
# Missing Kubernetes App Instance Label

Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: 

### owner
A label key of `owner` will help identify who the owner of this entity is. 

### app.kubernetes.io/name
The name of the application	

### app.kubernetes.io/instance
A unique name identifying the instance of an application	  

### app.kubernetes.io/version
The current version of the application (e.g., a semantic version, revision hash, etc.)

### app.kubernetes.io/part-of
The name of a higher level application this one is part of	

### app.kubernetes.io/managed-by
The tool being used to manage the operation of an application	

### app.kubernetes.io/created-by
The controller/user who created this resource


Add these custom labels to `metadata`.
* owner
* app.kubernetes.io/name
* app.kubernetes.io/instance
* app.kubernetes.io/version
* app.kubernetes.io/name
* app.kubernetes.io/part-of
* app.kubernetes.io/managed-by
* app.kubernetes.io/created-by

```
metadata:
  labels:
    <label>: value
```  
For additional information, please check
* https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels 


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Missing Kubernetes App Instance Label
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: missing-kubernetes-app-instance-label
  io.kubewarden.policy.description: "Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: \n\n### owner\nA label key of `owner` will help identify who the owner of this entity is. \n\n### app.kubernetes.io/name\nThe name of the application\t\n\n### app.kubernetes.io/instance\nA unique name identifying the instance of an application\t  \n\n### app.kubernetes.io/version\nThe current version of the application (e.g., a semantic version, revision hash, etc.)\n\n### app.kubernetes.io/part-of\nThe name of a higher level application this one is part of\t\n\n### app.kubernetes.io/managed-by\nThe tool being used to manage the operation of an application\t\n\n### app.kubernetes.io/created-by\nThe controller/user who created this resource\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/missing-kubernetes-app-instance-label
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: low
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppInstanceLabel'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppInstanceLabel'
2024/12/12 13:35:14 Testing ControllerMissingKubernetesAppInstanceLabel policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppInstanceLabel'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppInstanceLabel'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppInstanceLabel'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppInstanceLabel'
13:35 [32mControllerMissingKubernetesAppLabel [input/policies][0m
# Missing Kubernetes App Label

Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: 

### owner
A label key of `owner` will help identify who the owner of this entity is. 

### app.kubernetes.io/name
The name of the application	

### app.kubernetes.io/instance
A unique name identifying the instance of an application	  

### app.kubernetes.io/version
The current version of the application (e.g., a semantic version, revision hash, etc.)

### app.kubernetes.io/part-of
The name of a higher level application this one is part of	

### app.kubernetes.io/managed-by
The tool being used to manage the operation of an application	

### app.kubernetes.io/created-by
The controller/user who created this resource


Add these custom labels to `metadata`.
* owner
* app.kubernetes.io/name
* app.kubernetes.io/instance
* app.kubernetes.io/version
* app.kubernetes.io/name
* app.kubernetes.io/part-of
* app.kubernetes.io/managed-by
* app.kubernetes.io/created-by

```
metadata:
  labels:
    <label>: value
```  
For additional information, please check
* https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels 


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Missing Kubernetes App Label
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: missing-kubernetes-app-label
  io.kubewarden.policy.description: "Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: \n\n### owner\nA label key of `owner` will help identify who the owner of this entity is. \n\n### app.kubernetes.io/name\nThe name of the application\t\n\n### app.kubernetes.io/instance\nA unique name identifying the instance of an application\t  \n\n### app.kubernetes.io/version\nThe current version of the application (e.g., a semantic version, revision hash, etc.)\n\n### app.kubernetes.io/part-of\nThe name of a higher level application this one is part of\t\n\n### app.kubernetes.io/managed-by\nThe tool being used to manage the operation of an application\t\n\n### app.kubernetes.io/created-by\nThe controller/user who created this resource\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/missing-kubernetes-app-label
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: low
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppLabel'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppLabel'
2024/12/12 13:35:15 Testing ControllerMissingKubernetesAppLabel policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppLabel'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppLabel'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppLabel'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppLabel'
13:35 [32mControllerMissingKubernetesAppManagedByLabel [input/policies][0m
# Missing Kubernetes App Managed By Label

Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: 

### owner
A label key of `owner` will help identify who the owner of this entity is. 

### app.kubernetes.io/name
The name of the application	

### app.kubernetes.io/instance
A unique name identifying the instance of an application	  

### app.kubernetes.io/version
The current version of the application (e.g., a semantic version, revision hash, etc.)

### app.kubernetes.io/part-of
The name of a higher level application this one is part of	

### app.kubernetes.io/managed-by
The tool being used to manage the operation of an application	

### app.kubernetes.io/created-by
The controller/user who created this resource	


Add these custom labels to `metadata`.
* owner
* app.kubernetes.io/name
* app.kubernetes.io/instance
* app.kubernetes.io/version
* app.kubernetes.io/name
* app.kubernetes.io/part-of
* app.kubernetes.io/managed-by
* app.kubernetes.io/created-by

```
metadata:
  labels:
    <label>: value
```  
For additional information, please check
* https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels 


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Missing Kubernetes App Managed By Label
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: missing-kubernetes-app-managed-by-label
  io.kubewarden.policy.description: "Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: \n\n### owner\nA label key of `owner` will help identify who the owner of this entity is. \n\n### app.kubernetes.io/name\nThe name of the application\t\n\n### app.kubernetes.io/instance\nA unique name identifying the instance of an application\t  \n\n### app.kubernetes.io/version\nThe current version of the application (e.g., a semantic version, revision hash, etc.)\n\n### app.kubernetes.io/part-of\nThe name of a higher level application this one is part of\t\n\n### app.kubernetes.io/managed-by\nThe tool being used to manage the operation of an application\t\n\n### app.kubernetes.io/created-by\nThe controller/user who created this resource\t\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/missing-kubernetes-app-managed-by-label
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: low
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppManagedByLabel'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppManagedByLabel'
2024/12/12 13:35:15 Testing ControllerMissingKubernetesAppManagedByLabel policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppManagedByLabel'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppManagedByLabel'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppManagedByLabel'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppManagedByLabel'
13:35 [32mControllerMissingKubernetesAppPartOfLabel [input/policies][0m
# Missing Kubernetes App Part Of Label

Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: 

### owner
A label key of `owner` will help identify who the owner of this entity is. 

### app.kubernetes.io/name
The name of the application	

### app.kubernetes.io/instance
A unique name identifying the instance of an application	  

### app.kubernetes.io/version
The current version of the application (e.g., a semantic version, revision hash, etc.)

### app.kubernetes.io/part-of
The name of a higher level application this one is part of	

### app.kubernetes.io/managed-by
The tool being used to manage the operation of an application	

### app.kubernetes.io/created-by
The controller/user who created this resource	


Add these custom labels to `metadata`.
* owner
* app.kubernetes.io/name
* app.kubernetes.io/instance
* app.kubernetes.io/version
* app.kubernetes.io/name
* app.kubernetes.io/part-of
* app.kubernetes.io/managed-by
* app.kubernetes.io/created-by

```
metadata:
  labels:
    <label>: value
```  
For additional information, please check
* https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels 


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Missing Kubernetes App Part Of Label
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: missing-kubernetes-app-part-of-label
  io.kubewarden.policy.description: "Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: \n\n### owner\nA label key of `owner` will help identify who the owner of this entity is. \n\n### app.kubernetes.io/name\nThe name of the application\t\n\n### app.kubernetes.io/instance\nA unique name identifying the instance of an application\t  \n\n### app.kubernetes.io/version\nThe current version of the application (e.g., a semantic version, revision hash, etc.)\n\n### app.kubernetes.io/part-of\nThe name of a higher level application this one is part of\t\n\n### app.kubernetes.io/managed-by\nThe tool being used to manage the operation of an application\t\n\n### app.kubernetes.io/created-by\nThe controller/user who created this resource\t\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/missing-kubernetes-app-part-of-label
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: low
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppPartOfLabel'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppPartOfLabel'
2024/12/12 13:35:15 Testing ControllerMissingKubernetesAppPartOfLabel policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppPartOfLabel'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppPartOfLabel'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppPartOfLabel'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppPartOfLabel'
13:35 [32mControllerMissingKubernetesAppVersionLabel [input/policies][0m
# Missing Kubernetes App Version Label

Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: 

### owner
A label key of `owner` will help identify who the owner of this entity is. 

### app.kubernetes.io/name
The name of the application	

### app.kubernetes.io/instance
A unique name identifying the instance of an application	  

### app.kubernetes.io/version
The current version of the application (e.g., a semantic version, revision hash, etc.)

### app.kubernetes.io/part-of
The name of a higher level application this one is part of	

### app.kubernetes.io/managed-by
The tool being used to manage the operation of an application	

### app.kubernetes.io/created-by
The controller/user who created this resource	


Add these custom labels to `metadata`.
* owner
* app.kubernetes.io/name
* app.kubernetes.io/instance
* app.kubernetes.io/version
* app.kubernetes.io/part-of
* app.kubernetes.io/component
* app.kubernetes.io/managed-by
* app.kubernetes.io/created-by

```
metadata:
  labels:
    <label>: value
```  
For additional information, please check
* https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels 


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Missing Kubernetes App Version Label
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: missing-kubernetes-app-version-label
  io.kubewarden.policy.description: "Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: \n\n### owner\nA label key of `owner` will help identify who the owner of this entity is. \n\n### app.kubernetes.io/name\nThe name of the application\t\n\n### app.kubernetes.io/instance\nA unique name identifying the instance of an application\t  \n\n### app.kubernetes.io/version\nThe current version of the application (e.g., a semantic version, revision hash, etc.)\n\n### app.kubernetes.io/part-of\nThe name of a higher level application this one is part of\t\n\n### app.kubernetes.io/managed-by\nThe tool being used to manage the operation of an application\t\n\n### app.kubernetes.io/created-by\nThe controller/user who created this resource\t\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/missing-kubernetes-app-version-label
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: low
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppVersionLabel'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppVersionLabel'
2024/12/12 13:35:16 Testing ControllerMissingKubernetesAppVersionLabel policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppVersionLabel'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppVersionLabel'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppVersionLabel'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingKubernetesAppVersionLabel'
13:35 [32mControllerMissingLivenessProbe [input/policies][0m
# Containers Missing Liveness Probe

This Policy detects whether or not a livenessProbe has been set for containers. Containers probes are:

### liveness 
The kubelet uses liveness probes to know when to restart a container. For example, liveness probes could catch a deadlock, where an application is running, but unable to make progress. Restarting a container in such a state can help to make the application more available despite bugs.

### readiness
The kubelet uses readiness probes to know when a container is ready to start accepting traffic. A Pod is considered ready when all of its containers are ready. One use of this signal is to control which Pods are used as backends for Services. When a Pod is not ready, it is removed from Service load balancers.

### startup
The kubelet uses startup probes to know when a container application has started. If such a probe is configured, it disables liveness and readiness checks until it succeeds, making sure those probes don't interfere with the application startup. This can be used to adopt liveness checks on slow starting containers, avoiding them getting killed by the kubelet before they are up and running.


Check your entities to see if a probe has been set. 
```
...
  spec:
    containers:
    - livenessProbe:
      ...
```
https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Missing Liveness Probe
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-missing-liveness-probe
  io.kubewarden.policy.description: "This Policy detects whether or not a livenessProbe has been set for containers. Containers probes are:\n\n### liveness \nThe kubelet uses liveness probes to know when to restart a container. For example, liveness probes could catch a deadlock, where an application is running, but unable to make progress. Restarting a container in such a state can help to make the application more available despite bugs.\n\n### readiness\nThe kubelet uses readiness probes to know when a container is ready to start accepting traffic. A Pod is considered ready when all of its containers are ready. One use of this signal is to control which Pods are used as backends for Services. When a Pod is not ready, it is removed from Service load balancers.\n\n### startup\nThe kubelet uses startup probes to know when a container application has started. If such a probe is configured, it disables liveness and readiness checks until it succeeds, making sure those probes don't interfere with the application startup. This can be used to adopt liveness checks on slow starting containers, avoiding them getting killed by the kubelet before they are up and running.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-missing-liveness-probe
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: reliability
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingLivenessProbe'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingLivenessProbe'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingLivenessProbe'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingLivenessProbe'
13:35 [32mControllerMissingNamespace [input/policies][0m
# Block Workloads Created Without Specifying Namespace

Using this Policy, you can prohibit workloads from being created in a default namespace due to the lack of a namespace label. 


Specify a `namespace` label. 
```
metadata:
  namespace:
```
https://kubernetes.io/docs/tasks/administer-cluster/namespaces/#understanding-the-motivation-for-using-namespaces


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Block Workloads Created Without Specifying Namespace
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: block-workloads-created-without-specifying-namespace
  io.kubewarden.policy.description: "Using this Policy, you can prohibit workloads from being created in a default namespace due to the lack of a namespace label. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/block-workloads-created-without-specifying-namespace
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: low
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingNamespace'
opa test policy.rego tests/*.rego
PASS: 3/3
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingNamespace'
2024/12/12 13:35:16 Testing ControllerMissingNamespace policy
2024/12/12 13:35:16 Testing ControllerMissingNamespace policy failed: [{"issue_detected":true,"msg":"Missing namespace. Workloads should be deployed in a non-default namespace;","violating_key":"metadata"}]
13:35 [31m  Yaml tests failed[0m
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingNamespace'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingNamespace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingNamespace'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingNamespace'
13:35 [32mControllerMissingOwnerLabel [input/policies][0m
# Missing Owner Label

Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: 

### owner
A label key of `owner` will help identify who the owner of this entity is. 

### app.kubernetes.io/name
The name of the application	

### app.kubernetes.io/instance
A unique name identifying the instance of an application	  

### app.kubernetes.io/version
The current version of the application (e.g., a semantic version, revision hash, etc.)

### app.kubernetes.io/part-of
The name of a higher level application this one is part of	

### app.kubernetes.io/managed-by
The tool being used to manage the operation of an application	

### app.kubernetes.io/created-by
The controller/user who created this resource	


Add these custom labels to `metadata`.
* owner
* app.kubernetes.io/name
* app.kubernetes.io/instance
* app.kubernetes.io/version
* app.kubernetes.io/name
* app.kubernetes.io/part-of
* app.kubernetes.io/managed-by
* app.kubernetes.io/created-by

```
metadata:
  labels:
    <label>: value
```  
For additional information, please check
* https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels 


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Missing Owner Label
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: missing-owner-label
  io.kubewarden.policy.description: "Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensure a custom label key is set in the entity's `metadata`. The Policy detects the presence of the following: \n\n### owner\nA label key of `owner` will help identify who the owner of this entity is. \n\n### app.kubernetes.io/name\nThe name of the application\t\n\n### app.kubernetes.io/instance\nA unique name identifying the instance of an application\t  \n\n### app.kubernetes.io/version\nThe current version of the application (e.g., a semantic version, revision hash, etc.)\n\n### app.kubernetes.io/part-of\nThe name of a higher level application this one is part of\t\n\n### app.kubernetes.io/managed-by\nThe tool being used to manage the operation of an application\t\n\n### app.kubernetes.io/created-by\nThe controller/user who created this resource\t\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/missing-owner-label
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: low
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingOwnerLabel'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingOwnerLabel'
2024/12/12 13:35:16 Testing ControllerMissingOwnerLabel policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingOwnerLabel'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingOwnerLabel'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingOwnerLabel'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingOwnerLabel'
13:35 [32mControllerMissingReadinessProbe [input/policies][0m
# Containers Missing Readiness Probe

This Policy detects whether or not a readinessProbe has been set for containers. Containers probes are:

### liveness 
The kubelet uses liveness probes to know when to restart a container. For example, liveness probes could catch a deadlock, where an application is running, but unable to make progress. Restarting a container in such a state can help to make the application more available despite bugs.

### readiness
The kubelet uses readiness probes to know when a container is ready to start accepting traffic. A Pod is considered ready when all of its containers are ready. One use of this signal is to control which Pods are used as backends for Services. When a Pod is not ready, it is removed from Service load balancers.

### startup
The kubelet uses startup probes to know when a container application has started. If such a probe is configured, it disables liveness and readiness checks until it succeeds, making sure those probes don't interfere with the application startup. This can be used to adopt liveness checks on slow starting containers, avoiding them getting killed by the kubelet before they are up and running.


Check your entities to see if a probe has been set. 
```
...
  spec:
    containers:
    - readinessProbe:
      ...
```
https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Missing Readiness Probe
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-missing-readiness-probe
  io.kubewarden.policy.description: "This Policy detects whether or not a readinessProbe has been set for containers. Containers probes are:\n\n### liveness \nThe kubelet uses liveness probes to know when to restart a container. For example, liveness probes could catch a deadlock, where an application is running, but unable to make progress. Restarting a container in such a state can help to make the application more available despite bugs.\n\n### readiness\nThe kubelet uses readiness probes to know when a container is ready to start accepting traffic. A Pod is considered ready when all of its containers are ready. One use of this signal is to control which Pods are used as backends for Services. When a Pod is not ready, it is removed from Service load balancers.\n\n### startup\nThe kubelet uses startup probes to know when a container application has started. If such a probe is configured, it disables liveness and readiness checks until it succeeds, making sure those probes don't interfere with the application startup. This can be used to adopt liveness checks on slow starting containers, avoiding them getting killed by the kubelet before they are up and running.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-missing-readiness-probe
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: reliability
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingReadinessProbe'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingReadinessProbe'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingReadinessProbe'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingReadinessProbe'
13:35 [32mControllerMissingSecurityContext [input/policies][0m
# Containers Missing Security Context

This Policy checks if the container is missing securityContext while there is no securityContext defined on the Pod level as well. The security settings that are specified on the Pod level apply to all containers in the Pod.


Make sure you secure your containers by specifying a `securityContext` whether on each container or on the Pod level. The security settings that you specify on the Pod level apply to all containers in the Pod.
```
...
  spec:
    securityContext:
      <securityContext attributes>
```
https://kubernetes.io/docs/tasks/configure-pod-container/security-context/


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value: [kube-system]
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Missing Security Context
  io.artifacthub.keywords: pci-dss, cis-benchmark, mitre-attack, nist800-190, gdpr, default
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-missing-security-context
  io.kubewarden.policy.description: |
    This Policy checks if the container is missing securityContext while there is no securityContext defined on the Pod level as well. The security settings that are specified on the Pod level apply to all containers in the Pod.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-missing-security-context
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.2.4, pci-dss.2.2.5
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.2.6
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.4.1
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.3.3.1
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingSecurityContext'
opa test policy.rego tests/*.rego
PASS: 2/2
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingSecurityContext'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingSecurityContext'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingSecurityContext'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingSecurityContext'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingSecurityContext'
13:35 [32mControllerMissingStartupProbe [input/policies][0m
# Containers Missing Startup Probe

This Policy detects whether or not a startupProbe has been set for containers. Containers probes are:

### liveness 
The kubelet uses liveness probes to know when to restart a container. For example, liveness probes could catch a deadlock, where an application is running, but unable to make progress. Restarting a container in such a state can help to make the application more available despite bugs.

### readiness
The kubelet uses readiness probes to know when a container is ready to start accepting traffic. A Pod is considered ready when all of its containers are ready. One use of this signal is to control which Pods are used as backends for Services. When a Pod is not ready, it is removed from Service load balancers.

### startup
The kubelet uses startup probes to know when a container application has started. If such a probe is configured, it disables liveness and readiness checks until it succeeds, making sure those probes don't interfere with the application startup. This can be used to adopt liveness checks on slow starting containers, avoiding them getting killed by the kubelet before they are up and running.


Check your entities to see if a probe has been set. 
```
...
  spec:
    containers:
    - startupProbe:
      ...
```
https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Missing Startup Probe
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-missing-startup-probe
  io.kubewarden.policy.description: "This Policy detects whether or not a startupProbe has been set for containers. Containers probes are:\n\n### liveness \nThe kubelet uses liveness probes to know when to restart a container. For example, liveness probes could catch a deadlock, where an application is running, but unable to make progress. Restarting a container in such a state can help to make the application more available despite bugs.\n\n### readiness\nThe kubelet uses readiness probes to know when a container is ready to start accepting traffic. A Pod is considered ready when all of its containers are ready. One use of this signal is to control which Pods are used as backends for Services. When a Pod is not ready, it is removed from Service load balancers.\n\n### startup\nThe kubelet uses startup probes to know when a container application has started. If such a probe is configured, it disables liveness and readiness checks until it succeeds, making sure those probes don't interfere with the application startup. This can be used to adopt liveness checks on slow starting containers, avoiding them getting killed by the kubelet before they are up and running.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-missing-startup-probe
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: reliability
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingStartupProbe'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingStartupProbe'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingStartupProbe'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingStartupProbe'
13:35 [32mControllerProhibitNamespace [input/policies][0m
# Containers Should Not Run In Namespace

This Policy ensure workloads are not running in a specified namespace. 


Use a `namespace` that differs from the one specified in the Policy. 
```
metadata:
  namespace: <custom_namespace>
```

https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/


# Settings
```yaml
  settings:
    parameters:
      - name: custom_namespace
        type: string
        required: true
        value: default
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Pod`, `Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods, replicationcontrollers]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Should Not Run In Namespace
  io.artifacthub.keywords: cis-benchmark, soc2-type1
  io.artifacthub.resources: Pod, Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-should-not-run-in-namespace
  io.kubewarden.policy.description: "This Policy ensure workloads are not running in a specified namespace. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-should-not-run-in-namespace
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: low
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.7.4
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerProhibitNamespace'
opa test policy.rego tests/*.rego
PASS: 3/3
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerProhibitNamespace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerProhibitNamespace'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerProhibitNamespace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerProhibitNamespace'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerProhibitNamespace'
13:35 [32mControllerReadOnlyFileSystem [input/policies][0m
# Containers Read Only Root Filesystem

This Policy will cause a violation if the root file system is not mounted as specified. As a security practice, the root file system should be read-only or expose risk to your nodes if compromised. 

This Policy requires containers must run with a read-only root filesystem (i.e. no writable layer).


Set `readOnlyRootFilesystem` in your `securityContext` to the value specified in the Policy. 
```
...
  spec:
    containers:
      - securityContext:
          readOnlyRootFilesystem: <read_only>
```

https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems


# Settings
```yaml
  settings:
    parameters:
      - name: read_only
        type: boolean
        required: true
        value: true
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Read Only Root Filesystem
  io.artifacthub.keywords: mitre-attack, nist800-190
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-read-only-root-filesystem
  io.kubewarden.policy.description: "This Policy will cause a violation if the root file system is not mounted as specified. As a security practice, the root file system should be read-only or expose risk to your nodes if compromised. \n\nThis Policy requires containers must run with a read-only root filesystem (i.e. no writable layer).\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-read-only-root-filesystem
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.3.2
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.4.4.4
2024/12/12 13:35:18 Testing ControllerReadOnlyFileSystem policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerReadOnlyFileSystem'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerReadOnlyFileSystem'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerReadOnlyFileSystem'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerReadOnlyFileSystem'
13:35 [32mControllerRestartPolicy [input/policies][0m
# Containers Enforce Restart Policy

This Policy checks if a specific restartPolicy is configured in your workloads.


Ensure the restartPolicy is set to some specific policy in your workloads. 
```
...
  spec:
    restartPolicy: <policy>
```


# Settings
```yaml
  settings:
    parameters:
      - name: restart_policy
        type: string
        required: true
        value: Always
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Enforce Restart Policy
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-enforce-restart-policy
  io.kubewarden.policy.description: |
    This Policy checks if a specific restartPolicy is configured in your workloads.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-enforce-restart-policy
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerRestartPolicy'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerRestartPolicy'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerRestartPolicy'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerRestartPolicy'
13:35 [32mControllerSeccompRuntimeDefault [input/policies][0m
# Containers Not Using Runtime Default Seccomp Profile

This Policy checks for runtime/default seccomp annotation. 

Seccomp stands for secure computing mode and has been a feature of the Linux kernel since version 2.6.12. It can be used to sandbox the privileges of a process, restricting the calls it is able to make from userspace into the kernel. Kubernetes lets you automatically apply seccomp profiles loaded onto a Node to your Pods and containers.


Depending on the version of Kubernetes, you either need to set an annotation or a seccomp type in your `securityContext`. 
```
metadata:
  annotations:
    seccomp.security.alpha.kubernetes.io/pod: <seccomp_annotation>
```
AND
```
...
  spec:
    seccompProfile:
      type: <seccomp_type>
```
https://kubernetes.io/docs/tutorials/clusters/seccomp/#create-pod-that-uses-the-container-runtime-default-seccomp-profile


# Settings
```yaml
  settings:
    parameters:
      - name: seccomp_annotation
        type: string
        required: true
        value: runtime/default
      - name: seccomp_type
        type: string
        required: true
        value: RuntimeDefault
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Not Using Runtime Default Seccomp Profile
  io.artifacthub.keywords: cis-benchmark, nist800-190, soc2-type1
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-not-using-runtime-default-seccomp-profile
  io.kubewarden.policy.description: "This Policy checks for runtime/default seccomp annotation. \n\nSeccomp stands for secure computing mode and has been a feature of the Linux kernel since version 2.6.12. It can be used to sandbox the privileges of a process, restricting the calls it is able to make from userspace into the kernel. Kubernetes lets you automatically apply seccomp profiles loaded onto a Node to your Pods and containers.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-not-using-runtime-default-seccomp-profile
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.7.2
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.4.4.3
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
2024/12/12 13:35:19 Testing ControllerSeccompRuntimeDefault policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerSeccompRuntimeDefault'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerSeccompRuntimeDefault'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerSeccompRuntimeDefault'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerSeccompRuntimeDefault'
13:35 [32mControllerShareHostIPC [input/policies][0m
# Containers Sharing Host IPC

This Policy allows check if sharing host IPC namespace with the container should be allowed or not. Resources that can be shared with the container include:

### hostNetwork
Controls whether the pod may use the node network namespace. Doing so gives the pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other pods on the same node.

### hostPID
Controls whether the pod containers can share the host process ID namespace. Note that when paired with ptrace this can be used to escalate privileges outside of the container (ptrace is forbidden by default).

### shareProcessNamespace
When process namespace sharing is enabled, processes in a container are visible to all other containers in that pod.

### hostIPC
Controls whether the pod containers can share the host IPC namespace.


Match the shared resource with either true or false, as set in your constraint. 
```
...
  spec:
    <shared_resource>: <resource_enabled>
```
https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces


# Settings
```yaml
  settings:
    parameters:
      - name: resource_enabled
        type: boolean
        required: true
        value: false
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Sharing Host IPC
  io.artifacthub.keywords: nist800-190, gdpr, default
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-sharing-host-ipc
  io.kubewarden.policy.description: |
    This Policy allows check if sharing host IPC namespace with the container should be allowed or not. Resources that can be shared with the container include:

    ### hostNetwork
    Controls whether the pod may use the node network namespace. Doing so gives the pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other pods on the same node.

    ### hostPID
    Controls whether the pod containers can share the host process ID namespace. Note that when paired with ptrace this can be used to escalate privileges outside of the container (ptrace is forbidden by default).

    ### shareProcessNamespace
    When process namespace sharing is enabled, processes in a container are visible to all other containers in that pod.

    ### hostIPC
    Controls whether the pod containers can share the host IPC namespace.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-sharing-host-ipc
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.2.4, cis-benchmark.5.2.3
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.4.5.2
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
2024/12/12 13:35:19 Testing ControllerShareHostIPC policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareHostIPC'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareHostIPC'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareHostIPC'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareHostIPC'
13:35 [32mControllerShareHostNetwork [input/policies][0m
# Containers Sharing Host Network

This Policy allows check if sharing host network namespace with the container should be allowed or not. Resources that can be shared with the container include:

### hostNetwork
Controls whether the pod may use the node network namespace. Doing so gives the pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other pods on the same node.

### hostPID
Controls whether the pod containers can share the host process ID namespace. Note that when paired with ptrace this can be used to escalate privileges outside of the container (ptrace is forbidden by default).

### shareProcessNamespace
When process namespace sharing is enabled, processes in a container are visible to all other containers in that pod.

### hostIPC
Controls whether the pod containers can share the host IPC namespace.


Match the shared resource with either true or false, as set in your constraint. 
```
...
  spec:
    <shared_resource>: <resource_enabled>
```
https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces


# Settings
```yaml
  settings:
    parameters:
      - name: resource_enabled
        type: boolean
        required: true
        value: false
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Sharing Host Network
  io.artifacthub.keywords: cis-benchmark, nist800-190, gdpr, default
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-sharing-host-network
  io.kubewarden.policy.description: |
    This Policy allows check if sharing host network namespace with the container should be allowed or not. Resources that can be shared with the container include:

    ### hostNetwork
    Controls whether the pod may use the node network namespace. Doing so gives the pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other pods on the same node.

    ### hostPID
    Controls whether the pod containers can share the host process ID namespace. Note that when paired with ptrace this can be used to escalate privileges outside of the container (ptrace is forbidden by default).

    ### shareProcessNamespace
    When process namespace sharing is enabled, processes in a container are visible to all other containers in that pod.

    ### hostIPC
    Controls whether the pod containers can share the host IPC namespace.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-sharing-host-network
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.2.4, cis-benchmark.5.2.3
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.4.5.2
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
2024/12/12 13:35:19 Testing ControllerShareHostNetwork policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareHostNetwork'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareHostNetwork'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareHostNetwork'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareHostNetwork'
13:35 [32mControllerShareHostPID [input/policies][0m
# Containers Sharing Host PID

This Policy allows check if sharing host PID namespace with the container should be allowed or not. Resources that can be shared with the container include:

### hostNetwork
Controls whether the pod may use the node network namespace. Doing so gives the pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other pods on the same node.

### hostPID
Controls whether the pod containers can share the host process ID namespace. Note that when paired with ptrace this can be used to escalate privileges outside of the container (ptrace is forbidden by default).

### shareProcessNamespace
When process namespace sharing is enabled, processes in a container are visible to all other containers in that pod.

### hostIPC
Controls whether the pod containers can share the host IPC namespace.


Match the shared resource with either true or false, as set in your constraint. 
```
...
  spec:
    <shared_resource>: <resource_enabled>
```
https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces


# Settings
```yaml
  settings:
    parameters:
      - name: resource_enabled
        type: boolean
        required: true
        value: false
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Sharing Host PID
  io.artifacthub.keywords: cis-benchmark, nist800-190, gdpr, default
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-sharing-host-pid
  io.kubewarden.policy.description: |
    This Policy allows check if sharing host PID namespace with the container should be allowed or not. Resources that can be shared with the container include:

    ### hostNetwork
    Controls whether the pod may use the node network namespace. Doing so gives the pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other pods on the same node.

    ### hostPID
    Controls whether the pod containers can share the host process ID namespace. Note that when paired with ptrace this can be used to escalate privileges outside of the container (ptrace is forbidden by default).

    ### shareProcessNamespace
    When process namespace sharing is enabled, processes in a container are visible to all other containers in that pod.

    ### hostIPC
    Controls whether the pod containers can share the host IPC namespace.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-sharing-host-pid
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.2.4, cis-benchmark.5.2.3
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.4.5.2
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
2024/12/12 13:35:20 Testing ControllerShareHostPID policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareHostPID'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareHostPID'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareHostPID'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareHostPID'
13:35 [32mControllerShareProcessNamespace [input/policies][0m
# Containers Sharing Process Namespace

This Policy allows check if sharing process namespace with other containers in the pod should be allowed or not. Resources that can be shared with the container include:

### hostNetwork
Controls whether the pod may use the node network namespace. Doing so gives the pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other pods on the same node.

### hostPID
Controls whether the pod containers can share the host process ID namespace. Note that when paired with ptrace this can be used to escalate privileges outside of the container (ptrace is forbidden by default).

### shareProcessNamespace
When process namespace sharing is enabled, processes in a container are visible to all other containers in that pod.

### hostIPC
Controls whether the pod containers can share the host IPC namespace.


Match the shared resource with either true or false, as set in your constraint. 
```
...
  spec:
    <shared_resource>: <resource_enabled>
```
https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces


# Settings
```yaml
  settings:
    parameters:
      - name: resource_enabled
        type: boolean
        required: true
        value: false
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Sharing Process Namespace
  io.artifacthub.keywords: nist800-190, gdpr, default
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-sharing-process-namespace
  io.kubewarden.policy.description: |
    This Policy allows check if sharing process namespace with other containers in the pod should be allowed or not. Resources that can be shared with the container include:

    ### hostNetwork
    Controls whether the pod may use the node network namespace. Doing so gives the pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other pods on the same node.

    ### hostPID
    Controls whether the pod containers can share the host process ID namespace. Note that when paired with ptrace this can be used to escalate privileges outside of the container (ptrace is forbidden by default).

    ### shareProcessNamespace
    When process namespace sharing is enabled, processes in a container are visible to all other containers in that pod.

    ### hostIPC
    Controls whether the pod containers can share the host IPC namespace.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-sharing-process-namespace
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: pod-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.2.4, cis-benchmark.5.2.3
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.4.5.2
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
2024/12/12 13:35:20 Testing ControllerShareProcessNamespace policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareProcessNamespace'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareProcessNamespace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareProcessNamespace'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerShareProcessNamespace'
13:35 [32mControllerTolerations [input/policies][0m
# Containers Should Not Run On Kubernetes Control Plane Nodes

Tolerations specified in the Policies for this template should not have any workloads scheduled on them. A common use case is the Kubernetes master. 


Check your tolerations against the Policy. 
```
...
  spec:
    tolerations:
    - key: <toleration_key>
```

https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/


# Settings
```yaml
  settings:
    parameters:
      - name: toleration_key
        type: string
        required: true
        value: node-role.kubernetes.io/master
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Should Not Run On Kubernetes Control Plane Nodes
  io.artifacthub.keywords: soc2-type1
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: containers-should-not-run-on-kubernetes-control-plane-nodes
  io.kubewarden.policy.description: "Tolerations specified in the Policies for this template should not have any workloads scheduled on them. A common use case is the Kubernetes master. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-should-not-run-on-kubernetes-control-plane-nodes
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
2024/12/12 13:35:20 Testing ControllerTolerations policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerTolerations'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerTolerations'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerTolerations'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerTolerations'
13:35 [32mFluxBucketInsecure [input/policies][0m
# Bucket Insecure Connections

Ensure that Bucket objects do not use insecure connections

Set 'spec.insecure' to 'false' or remove the field from the Bucket object.

# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Bucket`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [buckets]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Bucket Insecure Connections
  io.artifacthub.keywords: flux
  io.artifacthub.resources: Bucket
  io.kubewarden.policy.title: bucket-insecure-connections
  io.kubewarden.policy.description: "Ensure that Bucket objects do not use insecure connections"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/bucket-insecure-connections
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: security
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketInsecure'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketInsecure'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketInsecure'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketInsecure'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketInsecure'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketInsecure'
13:35 [32mFluxHelmChartCosignVerification [input/policies][0m
# HelmChart Cosign Verification

HelmChart objects must provide cosign verification and reference a secret containing the Cosign public keys of trusted authors

Add cosign verification and reference a secret containing the Cosign public keys of trusted authors to the HelmChart object.

# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`HelmChart`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [helmcharts]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: HelmChart Cosign Verification
  io.artifacthub.keywords: flux
  io.artifacthub.resources: HelmChart
  io.kubewarden.policy.title: helm-chart-cosign-verification
  io.kubewarden.policy.description: "HelmChart objects must provide cosign verification and reference a secret containing the Cosign public keys of trusted authors"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/helm-chart-cosign-verification
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: security
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmChartCosignVerification'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmChartCosignVerification'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmChartCosignVerification'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmChartCosignVerification'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmChartCosignVerification'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmChartCosignVerification'
13:35 [32mFluxHelmChartValuesFormat [input/policies][0m
# HelmChart Values File Format

HelmChart must reference values files in the following format: 'xxx=values.yaml'.

Update the HelmChart valuesFrom field to use the correct format.

# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`HelmChart`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [helmcharts]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: HelmChart Values File Format
  io.artifacthub.keywords: flux
  io.artifacthub.resources: HelmChart
  io.kubewarden.policy.title: helm-chart-values-files-format
  io.kubewarden.policy.description: "HelmChart must reference values files in the following format: 'xxx=values.yaml'."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/helm-chart-values-files-format
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: configuration
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmChartValuesFormat'
opa test policy.rego tests/*.rego
PASS: 5/5
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmChartValuesFormat'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmChartValuesFormat'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmChartValuesFormat'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmChartValuesFormat'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmChartValuesFormat'
13:35 [32mFluxHelmReleaseNameSpaceMatch [input/policies][0m
# Helm Release Namespace Match

HelmRelease storageNamespace and targetNamespace must match.

Set the storageNamespace and targetNamespace of the HelmRelease to the same value.

# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`HelmRelease`
rules:
  - apiGroups: [helm.toolkit.fluxcd.io]
    apiVersions: [v2]
    resources: [helmreleases]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Helm Release Namespace Match
  io.artifacthub.keywords: flux
  io.artifacthub.resources: HelmRelease
  io.kubewarden.policy.title: helm-release-namespace-match
  io.kubewarden.policy.description: "HelmRelease storageNamespace and targetNamespace must match."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/helm-release-namespace-match
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseNameSpaceMatch'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseNameSpaceMatch'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseNameSpaceMatch'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseNameSpaceMatch'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseNameSpaceMatch'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseNameSpaceMatch'
13:35 [32mFluxHelmReleasePostRenderer [input/policies][0m
# Helm Release Post Renderer

HelmRelease must not have post-renderers enabled.

Remove the post-renderers configuration from the HelmRelease.

# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`HelmRelease`
rules:
  - apiGroups: [helm.toolkit.fluxcd.io]
    apiVersions: [v2]
    resources: [helmreleases]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Helm Release Post Renderer
  io.artifacthub.keywords: flux
  io.artifacthub.resources: HelmRelease
  io.kubewarden.policy.title: helm-release-post-renderer
  io.kubewarden.policy.description: "HelmRelease must not have post-renderers enabled."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/helm-release-post-renderer
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: best-practices
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleasePostRenderer'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleasePostRenderer'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleasePostRenderer'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleasePostRenderer'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleasePostRenderer'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleasePostRenderer'
13:35 [32mFluxHelmReleaseRollback [input/policies][0m
# Helm Release Rollback Should Be Disabled

The rollback feature of a HelmRelease should be disabled.

Set the rollback feature of the HelmRelease to false.

# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`HelmRelease`
rules:
  - apiGroups: [helm.toolkit.fluxcd.io]
    apiVersions: [v2]
    resources: [helmreleases]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Helm Release Rollback Should Be Disabled
  io.artifacthub.keywords: flux
  io.artifacthub.resources: HelmRelease
  io.kubewarden.policy.title: helm-release-rollback
  io.kubewarden.policy.description: "The rollback feature of a HelmRelease should be disabled."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/helm-release-rollback
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: best-practices
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseRollback'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseRollback'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseRollback'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseRollback'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseRollback'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseRollback'
13:35 [32mFluxHelmRepositoryType [input/policies][0m
# Helm Repo Type Should Be OCI

The type of a Helm repository should be OCI.

Change the type of the Helm repository to OCI.

# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value: ["kube-system"]
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`HelmRepository`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [helmrepositories]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Helm Repo Type Should Be OCI
  io.artifacthub.keywords: flux
  io.artifacthub.resources: HelmRepository
  io.kubewarden.policy.title: helm-repo-type
  io.kubewarden.policy.description: "The type of a Helm repository should be OCI."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/helm-repo-type
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: best-practices
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmRepositoryType'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmRepositoryType'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmRepositoryType'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmRepositoryType'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmRepositoryType'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmRepositoryType'
13:35 [32mFluxKustomizationImageTagStandards [input/policies][0m
# Kustomization Image Tag Standards

spec.Images must comply with image tag/semver reference standards.

Update the image tag to comply with semver reference standards.

# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Kustomization`
rules:
  - apiGroups: [kustomize.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [kustomizations]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Kustomization Image Tag Standards
  io.artifacthub.keywords: flux
  io.artifacthub.resources: Kustomization
  io.kubewarden.policy.title: kustomization-image-tag-standards
  io.kubewarden.policy.description: "spec.Images must comply with image tag/semver reference standards."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/kustomization-image-tag-standards
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: reliability
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationImageTagStandards'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationImageTagStandards'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationImageTagStandards'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationImageTagStandards'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationImageTagStandards'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationImageTagStandards'
13:35 [32mFluxKustomizationVarSubstitution [input/policies][0m
# Kustomization Var Substitution

The property 'spec.postBuild.substitute.var_substitution_enabled' must be disabled.

Set the Kustomization's spec.postBuild.substitute.var_substitution_enabled to false.

# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Kustomization`
rules:
  - apiGroups: [kustomize.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [kustomizations]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Kustomization Var Substitution
  io.artifacthub.keywords: flux
  io.artifacthub.resources: Kustomization
  io.kubewarden.policy.title: kustomization-var-substitution
  io.kubewarden.policy.description: "The property 'spec.postBuild.substitute.var_substitution_enabled' must be disabled."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/kustomization-var-substitution
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: best-practice
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationVarSubstitution'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationVarSubstitution'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationVarSubstitution'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationVarSubstitution'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationVarSubstitution'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationVarSubstitution'
13:35 [32mFluxOCIRepositoryCosignVerification [input/policies][0m
# OCIRepository Cosign Verification

OCIRepository resources must provide Cosign verification and reference a specific key.

Ensure the OCIRepository verification provider is 'cosign' and references a specific key.

# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`OCIRepository`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1beta2]
    resources: [ocirepositories]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: OCIRepository Cosign Verification
  io.artifacthub.keywords: flux
  io.artifacthub.resources: OCIRepository
  io.kubewarden.policy.title: ocirepository-cosign-verification
  io.kubewarden.policy.description: "OCIRepository resources must provide Cosign verification and reference a specific key."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/ocirepository-cosign-verification
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: security
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryCosignVerification'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryCosignVerification'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryCosignVerification'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryCosignVerification'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryCosignVerification'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryCosignVerification'
13:35 [32mFluxOCIRepositoryNotLatest [input/policies][0m
# OCIRepository Not Latest Tag

OCIRepository resources must not use 'latest' as a tag reference.

Specify a versioned tag for the OCIRepository instead of using 'latest'.

# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`OCIRepository`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1beta2]
    resources: [ocirepositories]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: OCIRepository Not Latest Tag
  io.artifacthub.keywords: flux
  io.artifacthub.resources: OCIRepository
  io.kubewarden.policy.title: ocirepository-not-latest
  io.kubewarden.policy.description: "OCIRepository resources must not use 'latest' as a tag reference."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/ocirepository-not-latest
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: best_practice
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryNotLatest'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryNotLatest'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryNotLatest'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryNotLatest'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryNotLatest'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryNotLatest'
13:35 [32mInfluxDBEnforceAdminTokenEnvVar [input/policies][0m
# InfluxDB Enforce Environment Variable - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN

This Policy ensures DOCKER_INFLUXDB_INIT_ADMIN_TOKEN environment variable are in place when using the official container images from Docker Hub.
DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: The authentication token to associate with the system's initial super-user. If not set, a token will be auto-generated by the system.


If you encounter a violation, ensure the DOCKER_INFLUXDB_INIT_ADMIN_TOKEN environment variables is set.
For futher information about the InfluxDB Docker container, check here: https://hub.docker.com/_/influxdb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: InfluxDB Enforce Environment Variable - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: influxdb-enforce-admin-token-env-var
  io.kubewarden.policy.description: |
    This Policy ensures DOCKER_INFLUXDB_INIT_ADMIN_TOKEN environment variable are in place when using the official container images from Docker Hub.
    DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: The authentication token to associate with the system's initial super-user. If not set, a token will be auto-generated by the system.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/influxdb-enforce-admin-token-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:24 Testing InfluxDBEnforceAdminTokenEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceAdminTokenEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceAdminTokenEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceAdminTokenEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceAdminTokenEnvVar'
13:35 [32mInfluxDBEnforceBucketEnvVar [input/policies][0m
# InfluxDB Enforce Environment Variable - DOCKER_INFLUXDB_INIT_BUCKET

This Policy ensures DOCKER_INFLUXDB_INIT_BUCKET environment variable are in place when using the official container images from Docker Hub.
DOCKER_INFLUXDB_INIT_BUCKET: The name to set for the system's initial bucket (Required).


If you encounter a violation, ensure the DOCKER_INFLUXDB_INIT_BUCKET environment variables is set.
For futher information about the InfluxDB Docker container, check here: https://hub.docker.com/_/influxdb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: InfluxDB Enforce Environment Variable - DOCKER_INFLUXDB_INIT_BUCKET
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: influxdb-enforce-bucket-env-var
  io.kubewarden.policy.description: |
    This Policy ensures DOCKER_INFLUXDB_INIT_BUCKET environment variable are in place when using the official container images from Docker Hub.
    DOCKER_INFLUXDB_INIT_BUCKET: The name to set for the system's initial bucket (Required).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/influxdb-enforce-bucket-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:24 Testing InfluxDBEnforceBucketEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceBucketEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceBucketEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceBucketEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceBucketEnvVar'
13:35 [32mInfluxDBEnforceOrgEnvVar [input/policies][0m
# InfluxDB Enforce Environment Variable - DOCKER_INFLUXDB_INIT_ORG

This Policy ensures DOCKER_INFLUXDB_INIT_ORG environment variable are in place when using the official container images from Docker Hub.
DOCKER_INFLUXDB_INIT_ORG: The name to set for the system's initial organization (Required).


If you encounter a violation, ensure the DOCKER_INFLUXDB_INIT_ORG environment variables is set.
For futher information about the InfluxDB Docker container, check here: https://hub.docker.com/_/influxdb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: InfluxDB Enforce Environment Variable - DOCKER_INFLUXDB_INIT_ORG
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: influxdb-enforce-org-env-var
  io.kubewarden.policy.description: |
    This Policy ensures DOCKER_INFLUXDB_INIT_ORG environment variable are in place when using the official container images from Docker Hub.
    DOCKER_INFLUXDB_INIT_ORG: The name to set for the system's initial organization (Required).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/influxdb-enforce-org-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:25 Testing InfluxDBEnforceOrgEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceOrgEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceOrgEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceOrgEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceOrgEnvVar'
13:35 [32mInfluxDBEnforcePasswordEnvVar [input/policies][0m
# InfluxDB Enforce Environment Variable - DOCKER_INFLUXDB_INIT_PASSWORD

This Policy ensures DOCKER_INFLUXDB_INIT_PASSWORD environment variable are in place when using the official container images from Docker Hub.
DOCKER_INFLUXDB_INIT_PASSWORD: The password to set for the system's initial super-user (Required).


If you encounter a violation, ensure the DOCKER_INFLUXDB_INIT_PASSWORD environment variables is set.
For futher information about the InfluxDB Docker container, check here: https://hub.docker.com/_/influxdb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: InfluxDB Enforce Environment Variable - DOCKER_INFLUXDB_INIT_PASSWORD
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: influxdb-enforce-password-env-var
  io.kubewarden.policy.description: |
    This Policy ensures DOCKER_INFLUXDB_INIT_PASSWORD environment variable are in place when using the official container images from Docker Hub.
    DOCKER_INFLUXDB_INIT_PASSWORD: The password to set for the system's initial super-user (Required).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/influxdb-enforce-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:25 Testing InfluxDBEnforcePasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforcePasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforcePasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforcePasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforcePasswordEnvVar'
13:35 [32mInfluxDBEnforceRetentionEnvVar [input/policies][0m
# InfluxDB Enforce Environment Variable - DOCKER_INFLUXDB_INIT_RETENTION

This Policy ensures DOCKER_INFLUXDB_INIT_RETENTION environment variable are in place when using the official container images from Docker Hub.
DOCKER_INFLUXDB_INIT_RETENTION: The duration the system's initial bucket should retain data. If not set, the initial bucket will retain data forever.


If you encounter a violation, ensure the DOCKER_INFLUXDB_INIT_RETENTION environment variables is set.
For futher information about the InfluxDB Docker container, check here: https://hub.docker.com/_/influxdb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: InfluxDB Enforce Environment Variable - DOCKER_INFLUXDB_INIT_RETENTION
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: influxdb-enforce-retention-env-var
  io.kubewarden.policy.description: |
    This Policy ensures DOCKER_INFLUXDB_INIT_RETENTION environment variable are in place when using the official container images from Docker Hub.
    DOCKER_INFLUXDB_INIT_RETENTION: The duration the system's initial bucket should retain data. If not set, the initial bucket will retain data forever.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/influxdb-enforce-retention-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:25 Testing InfluxDBEnforceRetentionEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceRetentionEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceRetentionEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceRetentionEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceRetentionEnvVar'
13:35 [32mInfluxDBEnforceUsernameEnvVar [input/policies][0m
# InfluxDB Enforce Environment Variable - DOCKER_INFLUXDB_INIT_USERNAME

This Policy ensures DOCKER_INFLUXDB_INIT_USERNAME environment variable are in place when using the official container images from Docker Hub.
DOCKER_INFLUXDB_INIT_USERNAME: The username to set for the system's initial super-user (Required).


If you encounter a violation, ensure the DOCKER_INFLUXDB_INIT_USERNAME environment variables is set.
For futher information about the InfluxDB Docker container, check here: https://hub.docker.com/_/influxdb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: InfluxDB Enforce Environment Variable - DOCKER_INFLUXDB_INIT_USERNAME
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: influxdb-enforce-username-env-var
  io.kubewarden.policy.description: |
    This Policy ensures DOCKER_INFLUXDB_INIT_USERNAME environment variable are in place when using the official container images from Docker Hub.
    DOCKER_INFLUXDB_INIT_USERNAME: The username to set for the system's initial super-user (Required).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/influxdb-enforce-username-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:26 Testing InfluxDBEnforceUsernameEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceUsernameEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceUsernameEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceUsernameEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/InfluxDBEnforceUsernameEnvVar'
13:35 [32mKubernetesProhibitNakedPods [input/policies][0m
# Prohibit Naked Pods From Being Scheduled

This Policy checks for a `kind` and can prohibit it from being schedule to your cluster. A common example is running "naked" pods. 


Ensure you are not using a kind that is specified within the Policy.
```
kind: <kind>
```

https://kubernetes.io/docs/concepts/configuration/overview/#naked-pods-vs-replicasets-deployments-and-jobs


# Settings
```yaml
  settings:
    parameters: null
```

# Resources
Policy applies to resources kinds:
`Pod`
rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Prohibit Naked Pods From Being Scheduled
  io.artifacthub.keywords: cis-benchmark
  io.artifacthub.resources: Pod
  io.kubewarden.policy.title: prohibit-naked-pods-from-being-scheduled
  io.kubewarden.policy.description: "This Policy checks for a `kind` and can prohibit it from being schedule to your cluster. A common example is running \"naked\" pods. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/prohibit-naked-pods-from-being-scheduled
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.1.4
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/KubernetesProhibitNakedPods'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/KubernetesProhibitNakedPods'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/KubernetesProhibitNakedPods'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/KubernetesProhibitNakedPods'
13:35 [32mMariaDBEnforceDatabaseEnvVar [input/policies][0m
# MariaDB Enforce Environment Variable - MARIADB_DATABASE

This Policy ensures MARIADB_DATABASE environment variable are in place when using the official container images from Docker Hub.
MARIADB_DATABASE:   The MARIADB_DATABASE environment variable sets a default MARIADB database instance up with the name of that DB being the value of  environment variable. 


If you encounter a violation, ensure the MARIADB_DATABASE environment variables is set.
For futher information about the MariaDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MariaDB Enforce Environment Variable - MARIADB_DATABASE
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mariadb-enforce-database-env-var
  io.kubewarden.policy.description: "This Policy ensures MARIADB_DATABASE environment variable are in place when using the official container images from Docker Hub.\nMARIADB_DATABASE:   The MARIADB_DATABASE environment variable sets a default MARIADB database instance up with the name of that DB being the value of  environment variable. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mariadb-enforce-database-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:26 Testing MariaDBEnforceDatabaseEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceDatabaseEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceDatabaseEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceDatabaseEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceDatabaseEnvVar'
13:35 [32mMariaDBEnforceMysqlDatabaseEnvVar [input/policies][0m
# MariaDB Enforce Environment Variable - MYSQL_DATABASE

This Policy ensures MYSQL_DATABASE environment variable are in place when using the official container images from Docker Hub.
MYSQL_DATABASE:   The MYSQL_DATABASE environment variable sets a default MARIADB database instance up with the name of that DB being the value of  environment variable. 


If you encounter a violation, ensure the MYSQL_DATABASE environment variables is set.
For futher information about the MariaDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MariaDB Enforce Environment Variable - MYSQL_DATABASE
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mariadb-enforce-mysql-database-env-var
  io.kubewarden.policy.description: "This Policy ensures MYSQL_DATABASE environment variable are in place when using the official container images from Docker Hub.\nMYSQL_DATABASE:   The MYSQL_DATABASE environment variable sets a default MARIADB database instance up with the name of that DB being the value of  environment variable. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mariadb-enforce-mysql-database-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:26 Testing MariaDBEnforceMysqlDatabaseEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlDatabaseEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlDatabaseEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlDatabaseEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlDatabaseEnvVar'
13:35 [32mMariaDBEnforceMysqlPasswordEnvVar [input/policies][0m
# MariaDB Enforce Environment Variable - MYSQL_PASSWORD

This Policy ensures MYSQL_PASSWORD environment variable are in place when using the official container images from Docker Hub.
MYSQL_PASSWORD: The MYSQL_PASSWORD environment variable specifies a password for MARIADB_USER user.


If you encounter a violation, ensure the MYSQL_PASSWORD environment variables is set.
For futher information about the MariaDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MariaDB Enforce Environment Variable - MYSQL_PASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mariadb-enforce-mysql-password-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MYSQL_PASSWORD environment variable are in place when using the official container images from Docker Hub.
    MYSQL_PASSWORD: The MYSQL_PASSWORD environment variable specifies a password for MARIADB_USER user.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mariadb-enforce-mysql-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:27 Testing MariaDBEnforceMysqlPasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlPasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlPasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlPasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlPasswordEnvVar'
13:35 [32mMariaDBEnforceMysqlRandomRootPasswordEnvVar [input/policies][0m
# MariaDB Enforce Environment Variable - MYSQL_RANDOM_ROOT_PASSWORD

This Policy ensures MYSQL_RANDOM_ROOT_PASSWORD environment variable are in place when using the official container images from Docker Hub.
MYSQL_RANDOM_ROOT_PASSWORD: The MYSQL_RANDOM_ROOT_PASSWORD environment variable creates random password for the server's root user when the Docker container is started.


If you encounter a violation, ensure the MYSQL_RANDOM_ROOT_PASSWORD environment variables is set.
For futher information about the MariaDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MariaDB Enforce Environment Variable - MYSQL_RANDOM_ROOT_PASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mariadb-enforce-mysql-random-root-password-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MYSQL_RANDOM_ROOT_PASSWORD environment variable are in place when using the official container images from Docker Hub.
    MYSQL_RANDOM_ROOT_PASSWORD: The MYSQL_RANDOM_ROOT_PASSWORD environment variable creates random password for the server's root user when the Docker container is started.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mariadb-enforce-mysql-random-root-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:27 Testing MariaDBEnforceMysqlRandomRootPasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlRandomRootPasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlRandomRootPasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlRandomRootPasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlRandomRootPasswordEnvVar'
13:35 [32mMariaDBEnforceMysqlRootPasswordEnvVar [input/policies][0m
# MariaDB Enforce Environment Variable - MYSQL_ROOT_PASSWORD

This Policy ensures MYSQL_ROOT_PASSWORD environment variable are in place when using the official container images from Docker Hub.
MYSQL_ROOT_PASSWORD: The MYSQL_ROOT_PASSWORD environment variable specifies a password for the MARIADB root account. 


If you encounter a violation, ensure the MYSQL_ROOT_PASSWORD environment variables is set.
For futher information about the MariaDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MariaDB Enforce Environment Variable - MYSQL_ROOT_PASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mariadb-enforce-mysql-root-password-env-var
  io.kubewarden.policy.description: "This Policy ensures MYSQL_ROOT_PASSWORD environment variable are in place when using the official container images from Docker Hub.\nMYSQL_ROOT_PASSWORD: The MYSQL_ROOT_PASSWORD environment variable specifies a password for the MARIADB root account. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mariadb-enforce-mysql-root-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:27 Testing MariaDBEnforceMysqlRootPasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlRootPasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlRootPasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlRootPasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlRootPasswordEnvVar'
13:35 [32mMariaDBEnforceMysqlSkipTzinfoEnvVar [input/policies][0m
# MariaDB Enforce Environment Variable - MYSQL_INITDB_SKIP_TZINFO

This Policy ensures MYSQL_INITDB_SKIP_TZINFO environment variable are in place when using the official container images from Docker Hub.
MYSQL_INITDB_SKIP_TZINFO:   The MYSQL_INITDB_SKIP_TZINFO environment variable allows the skipping of timezone checking when initializing the DB.


If you encounter a violation, ensure the MYSQL_INITDB_SKIP_TZINFO environment variables is set.
For futher information about the MariaDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MariaDB Enforce Environment Variable - MYSQL_INITDB_SKIP_TZINFO
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mariadb-enforce-mysql-initdb-skip-tzinfo-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MYSQL_INITDB_SKIP_TZINFO environment variable are in place when using the official container images from Docker Hub.
    MYSQL_INITDB_SKIP_TZINFO:   The MYSQL_INITDB_SKIP_TZINFO environment variable allows the skipping of timezone checking when initializing the DB.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mariadb-enforce-mysql-initdb-skip-tzinfo-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:28 Testing MariaDBEnforceMysqlSkipTzinfoEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlSkipTzinfoEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlSkipTzinfoEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlSkipTzinfoEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlSkipTzinfoEnvVar'
13:35 [32mMariaDBEnforceMysqlUserEnvVar [input/policies][0m
# MariaDB Enforce Environment Variable - MYSQL_USER

This Policy ensures MYSQL_USER environment variable are in place when using the official container images from Docker Hub.
MYSQL_USER: The MYSQL_USER environment variable sets up a superuser with the same name.


If you encounter a violation, ensure the MYSQL_USER environment variables is set.
For futher information about the MariaDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MariaDB Enforce Environment Variable - MYSQL_USER
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mariadb-enforce-mysql-user-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MYSQL_USER environment variable are in place when using the official container images from Docker Hub.
    MYSQL_USER: The MYSQL_USER environment variable sets up a superuser with the same name.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mariadb-enforce-mysql-user-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:28 Testing MariaDBEnforceMysqlUserEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlUserEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlUserEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlUserEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceMysqlUserEnvVar'
13:35 [32mMariaDBEnforcePasswordEnvVar [input/policies][0m
# MariaDB Enforce Environment Variable - MARIADB_PASSWORD

This Policy ensures MARIADB_PASSWORD environment variable are in place when using the official container images from Docker Hub.
MARIADB_PASSWORD: The MARIADB_PASSWORD environment variable specifies a password for MARIADB_USER user.


If you encounter a violation, ensure the MARIADB_PASSWORD environment variables is set.
For futher information about the MariaDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MariaDB Enforce Environment Variable - MARIADB_PASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mariadb-enforce-password-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MARIADB_PASSWORD environment variable are in place when using the official container images from Docker Hub.
    MARIADB_PASSWORD: The MARIADB_PASSWORD environment variable specifies a password for MARIADB_USER user.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mariadb-enforce-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:28 Testing MariaDBEnforcePasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforcePasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforcePasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforcePasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforcePasswordEnvVar'
13:35 [32mMariaDBEnforceRandomRootPasswordEnvVar [input/policies][0m
# MariaDB Enforce Environment Variable - MARIADB_RANDOM_ROOT_PASSWORD

This Policy ensures MARIADB_RANDOM_ROOT_PASSWORD environment variable are in place when using the official container images from Docker Hub.
MARIADB_RANDOM_ROOT_PASSWORD:   The MARIADB_RANDOM_ROOT_PASSWORD environment variable creates random password for the server's root user when the Docker container is started.


If you encounter a violation, ensure the MARIADB_RANDOM_ROOT_PASSWORD environment variables is set.
For futher information about the MariaDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MariaDB Enforce Environment Variable - MARIADB_RANDOM_ROOT_PASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mariadb-enforce-random-root-password-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MARIADB_RANDOM_ROOT_PASSWORD environment variable are in place when using the official container images from Docker Hub.
    MARIADB_RANDOM_ROOT_PASSWORD:   The MARIADB_RANDOM_ROOT_PASSWORD environment variable creates random password for the server's root user when the Docker container is started.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mariadb-enforce-random-root-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:29 Testing MariaDBEnforceRandomRootPasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceRandomRootPasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceRandomRootPasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceRandomRootPasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceRandomRootPasswordEnvVar'
13:35 [32mMariaDBEnforceRootPasswordEnvVar [input/policies][0m
# MariaDB Enforce Environment Variable - MARIADB_ROOT_PASSWORD

This Policy ensures MARIADB_ROOT_PASSWORD environment variable are in place when using the official container images from Docker Hub.
MARIADB_ROOT_PASSWORD: The MARIADB_ROOT_PASSWORD environment variable specifies a password for the MARIADB root account. 


If you encounter a violation, ensure the MARIADB_ROOT_PASSWORD environment variables is set.
For futher information about the MariaDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MariaDB Enforce Environment Variable - MARIADB_ROOT_PASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mariadb-enforce-root-password-env-var
  io.kubewarden.policy.description: "This Policy ensures MARIADB_ROOT_PASSWORD environment variable are in place when using the official container images from Docker Hub.\nMARIADB_ROOT_PASSWORD: The MARIADB_ROOT_PASSWORD environment variable specifies a password for the MARIADB root account. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mariadb-enforce-root-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:29 Testing MariaDBEnforceRootPasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceRootPasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceRootPasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceRootPasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceRootPasswordEnvVar'
13:35 [32mMariaDBEnforceSkipTzinfoEnvVar [input/policies][0m
# MariaDB Enforce Environment Variable - MARIADB_INITDB_SKIP_TZINFO

This Policy ensures MARIADB_INITDB_SKIP_TZINFO environment variable are in place when using the official container images from Docker Hub.
MARIADB_INITDB_SKIP_TZINFO:   The MARIADB_INITDB_SKIP_TZINFO environment variable allows the skipping of timezone checking when initializing the DB.


If you encounter a violation, ensure the MARIADB_INITDB_SKIP_TZINFO environment variables is set.
For futher information about the MariaDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MariaDB Enforce Environment Variable - MARIADB_INITDB_SKIP_TZINFO
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mariadb-enforce-initdb-skip-tzinfo-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MARIADB_INITDB_SKIP_TZINFO environment variable are in place when using the official container images from Docker Hub.
    MARIADB_INITDB_SKIP_TZINFO:   The MARIADB_INITDB_SKIP_TZINFO environment variable allows the skipping of timezone checking when initializing the DB.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mariadb-enforce-initdb-skip-tzinfo-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:29 Testing MariaDBEnforceSkipTzinfoEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceSkipTzinfoEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceSkipTzinfoEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceSkipTzinfoEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceSkipTzinfoEnvVar'
13:35 [32mMariaDBEnforceUserEnvVar [input/policies][0m
# MariaDB Enforce Environment Variable - MARIADB_USER

This Policy ensures MARIADB_USER environment variable are in place when using the official container images from Docker Hub.
MARIADB_USER: The MARIADB_USER environment variable sets up a superuser with the same name.


If you encounter a violation, ensure the MARIADB_USER environment variables is set.
For futher information about the MariaDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MariaDB Enforce Environment Variable - MARIADB_USER
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mariadb-enforce-user-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MARIADB_USER environment variable are in place when using the official container images from Docker Hub.
    MARIADB_USER: The MARIADB_USER environment variable sets up a superuser with the same name.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mariadb-enforce-user-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:30 Testing MariaDBEnforceUserEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceUserEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceUserEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceUserEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBEnforceUserEnvVar'
13:35 [32mMariaDBProhibitEmptyPasswordEnvVar [input/policies][0m
# MariaDB Prohibit Environment Variable - MARIADB_ALLOW_EMPTY_PASSWORD

This Policy ensures MARIADB_ALLOW_EMPTY_PASSWORD environment variable are in place when using the official container images from Docker Hub.
MARIADB_ALLOW_EMPTY_PASSWORD: MARIADB_ALLOW_EMPTY_PASSWORD set to true will allow the container to be started with a blank password for the root user


If you encounter a violation, ensure the MARIADB_ALLOW_EMPTY_PASSWORD environment variables is set.
For futher information about the MariaDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MariaDB Prohibit Environment Variable - MARIADB_ALLOW_EMPTY_PASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mariadb-prohibit-empty-password-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MARIADB_ALLOW_EMPTY_PASSWORD environment variable are in place when using the official container images from Docker Hub.
    MARIADB_ALLOW_EMPTY_PASSWORD: MARIADB_ALLOW_EMPTY_PASSWORD set to true will allow the container to be started with a blank password for the root user
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mariadb-prohibit-empty-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:30 Testing MariaDBProhibitEmptyPasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBProhibitEmptyPasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBProhibitEmptyPasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBProhibitEmptyPasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBProhibitEmptyPasswordEnvVar'
13:35 [32mMariaDBProhibitMysqlEmptyPasswordEnvVar [input/policies][0m
# MariaDB Prohibit Environment Variable - MYSQL_ALLOW_EMPTY_PASSWORD

This Policy ensures MYSQL_ALLOW_EMPTY_PASSWORD environment variable are in place when using the official container images from Docker Hub.
MYSQL_ALLOW_EMPTY_PASSWORD: MYSQL_ALLOW_EMPTY_PASSWORD set to true will allow the container to be started with a blank password for the root user


If you encounter a violation, ensure the MYSQL_ALLOW_EMPTY_PASSWORD environment variables is set.
For futher information about the MariaDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MariaDB Prohibit Environment Variable - MYSQL_ALLOW_EMPTY_PASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mariadb-prohibit-mysql-empty-password-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MYSQL_ALLOW_EMPTY_PASSWORD environment variable are in place when using the official container images from Docker Hub.
    MYSQL_ALLOW_EMPTY_PASSWORD: MYSQL_ALLOW_EMPTY_PASSWORD set to true will allow the container to be started with a blank password for the root user
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mariadb-prohibit-mysql-empty-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:30 Testing MariaDBProhibitMysqlEmptyPasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBProhibitMysqlEmptyPasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBProhibitMysqlEmptyPasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBProhibitMysqlEmptyPasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MariaDBProhibitMysqlEmptyPasswordEnvVar'
13:35 [32mMongoDBEnforceDatabaseEnvVar [input/policies][0m
# MongoDB Enforce Environment Variable - MONGO_INITDB_DATABASE

This Policy ensures MONGO_INITDB_DATABASE environment variable are in place when using the official container images from Docker Hub.
MONGO_INITDB_DATABASE: The MONGO_INITDB_DATABASE environment variable allows you to specify the name of a database to be used for creation scripts.


If you encounter a violation, ensure the MONGO_INITDB_DATABASE environment variables is set.
For futher information about the MongoDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MongoDB Enforce Environment Variable - MONGO_INITDB_DATABASE
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongodb-enforce-database-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MONGO_INITDB_DATABASE environment variable are in place when using the official container images from Docker Hub.
    MONGO_INITDB_DATABASE: The MONGO_INITDB_DATABASE environment variable allows you to specify the name of a database to be used for creation scripts.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongodb-enforce-database-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
2024/12/12 13:35:31 Testing MongoDBEnforceDatabaseEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceDatabaseEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceDatabaseEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceDatabaseEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceDatabaseEnvVar'
13:35 [32mMongoDBEnforceRootPasswordEnvVar [input/policies][0m
# MongoDB Enforce Environment Variable - MONGO_INITDB_ROOT_PASSWORD

This Policy ensures MONGO_INITDB_ROOT_PASSWORD environment variable are in place when using the official container images from Docker Hub.
MONGO_INITDB_ROOT_PASSWORD: The MONGO_INITDB_ROOT_PASSWORD environment variable sets the MongoDB root user password.


If you encounter a violation, ensure the MONGO_INITDB_ROOT_PASSWORD environment variables is set.
For futher information about the MongoDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MongoDB Enforce Environment Variable - MONGO_INITDB_ROOT_PASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongodb-enforce-root-password-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MONGO_INITDB_ROOT_PASSWORD environment variable are in place when using the official container images from Docker Hub.
    MONGO_INITDB_ROOT_PASSWORD: The MONGO_INITDB_ROOT_PASSWORD environment variable sets the MongoDB root user password.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongodb-enforce-root-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
2024/12/12 13:35:31 Testing MongoDBEnforceRootPasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootPasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootPasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootPasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootPasswordEnvVar'
13:35 [32mMongoDBEnforceRootPasswordFileEnvVar [input/policies][0m
# MongoDB Enforce Environment Variable - MONGO_INITDB_ROOT_PASSWORD_FILE

This Policy ensures MONGO_INITDB_ROOT_PASSWORD_FILE environment variable are in place when using the official container images from Docker Hub.
MONGO_INITDB_ROOT_PASSWORD_FILE: The MONGO_INITDB_ROOT_PASSWORD_FILE environment variable is an alternative to passing sensitive information via environment variables, _FILE may be appended to the previously listed environment variables, causing the initialization script to load the values for those variables from files present in the container.


If you encounter a violation, ensure the MONGO_INITDB_ROOT_PASSWORD_FILE environment variables is set.
For futher information about the MongoDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MongoDB Enforce Environment Variable - MONGO_INITDB_ROOT_PASSWORD_FILE
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongodb-enforce-root-password-file-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MONGO_INITDB_ROOT_PASSWORD_FILE environment variable are in place when using the official container images from Docker Hub.
    MONGO_INITDB_ROOT_PASSWORD_FILE: The MONGO_INITDB_ROOT_PASSWORD_FILE environment variable is an alternative to passing sensitive information via environment variables, _FILE may be appended to the previously listed environment variables, causing the initialization script to load the values for those variables from files present in the container.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongodb-enforce-root-password-file-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
2024/12/12 13:35:31 Testing MongoDBEnforceRootPasswordFileEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootPasswordFileEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootPasswordFileEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootPasswordFileEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootPasswordFileEnvVar'
13:35 [32mMongoDBEnforceRootUsernameEnvVar [input/policies][0m
# MongoDB Enforce Environment Variable - MONGO_INITDB_ROOT_USERNAME

This Policy ensures MONGO_INITDB_ROOT_USERNAME environment variable are in place when using the official container images from Docker Hub.
MONGO_INITDB_ROOT_USERNAME: The MONGO_INITDB_ROOT_USERNAME environment variable sets the MongoDB root user name.


If you encounter a violation, ensure the MONGO_INITDB_ROOT_USERNAME environment variables is set.
For futher information about the MongoDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MongoDB Enforce Environment Variable - MONGO_INITDB_ROOT_USERNAME
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongodb-enforce-root-username-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MONGO_INITDB_ROOT_USERNAME environment variable are in place when using the official container images from Docker Hub.
    MONGO_INITDB_ROOT_USERNAME: The MONGO_INITDB_ROOT_USERNAME environment variable sets the MongoDB root user name.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongodb-enforce-root-username-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
2024/12/12 13:35:31 Testing MongoDBEnforceRootUsernameEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootUsernameEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootUsernameEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootUsernameEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootUsernameEnvVar'
13:35 [32mMongoDBEnforceRootUsernameFileEnvVar [input/policies][0m
# MongoDB Enforce Environment Variable - MONGO_INITDB_ROOT_USERNAME_FILE

This Policy ensures MONGO_INITDB_ROOT_USERNAME_FILE environment variable are in place when using the official container images from Docker Hub.
MONGO_INITDB_ROOT_USERNAME_FILE: The MONGO_INITDB_ROOT_USERNAME_FILE environment variable is an alternative to passing sensitive information via environment variables, _FILE may be appended to the previously listed environment variables, causing the initialization script to load the values for those variables from files present in the container.


If you encounter a violation, ensure the MONGO_INITDB_ROOT_USERNAME_FILE environment variables is set.
For futher information about the MongoDB Docker container, check here: https://hub.docker.com/_/mariadb


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MongoDB Enforce Environment Variable - MONGO_INITDB_ROOT_USERNAME_FILE
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongodb-enforce-root-username-file-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MONGO_INITDB_ROOT_USERNAME_FILE environment variable are in place when using the official container images from Docker Hub.
    MONGO_INITDB_ROOT_USERNAME_FILE: The MONGO_INITDB_ROOT_USERNAME_FILE environment variable is an alternative to passing sensitive information via environment variables, _FILE may be appended to the previously listed environment variables, causing the initialization script to load the values for those variables from files present in the container.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongodb-enforce-root-username-file-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
2024/12/12 13:35:32 Testing MongoDBEnforceRootUsernameFileEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootUsernameFileEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootUsernameFileEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootUsernameFileEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoDBEnforceRootUsernameFileEnvVar'
13:35 [32mMongoExpressEnforceAdminPasswordEnvVar [input/policies][0m
# Mongo-Express Enforce Environment Variable - ME_CONFIG_MONGODB_ADMINPASSWORD

This Policy ensures ME_CONFIG_MONGODB_ADMINPASSWORD environment variable are in place when using the official container images from Docker Hub.
ME_CONFIG_MONGODB_ADMINPASSWORD: The ME_CONFIG_MONGODB_ADMINPASSWORD environment variable sets the MongoDB admin password.


If you encounter a violation, ensure the ME_CONFIG_MONGODB_ADMINPASSWORD environment variables is set.
For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo-express


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Mongo-Express Enforce Environment Variable - ME_CONFIG_MONGODB_ADMINPASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongo-express-enforce-admin-password-env-var
  io.kubewarden.policy.description: |
    This Policy ensures ME_CONFIG_MONGODB_ADMINPASSWORD environment variable are in place when using the official container images from Docker Hub.
    ME_CONFIG_MONGODB_ADMINPASSWORD: The ME_CONFIG_MONGODB_ADMINPASSWORD environment variable sets the MongoDB admin password.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongo-express-enforce-admin-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
2024/12/12 13:35:32 Testing MongoExpressEnforceAdminPasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAdminPasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAdminPasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAdminPasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAdminPasswordEnvVar'
13:35 [32mMongoExpressEnforceAdminUsernameEnvVar [input/policies][0m
# Mongo-Express Enforce Environment Variable - ME_CONFIG_MONGODB_ADMINUSERNAME

This Policy ensures ME_CONFIG_MONGODB_ADMINUSERNAME environment variable are in place when using the official container images from Docker Hub.
ME_CONFIG_MONGODB_ADMINUSERNAME: The ME_CONFIG_MONGODB_ADMINUSERNAME environment variable sets the MongoDB admin username.


If you encounter a violation, ensure the ME_CONFIG_MONGODB_ADMINUSERNAME environment variables is set.
For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo-express


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Mongo-Express Enforce Environment Variable - ME_CONFIG_MONGODB_ADMINUSERNAME
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongo-express-enforce-admin-username-env-var
  io.kubewarden.policy.description: |
    This Policy ensures ME_CONFIG_MONGODB_ADMINUSERNAME environment variable are in place when using the official container images from Docker Hub.
    ME_CONFIG_MONGODB_ADMINUSERNAME: The ME_CONFIG_MONGODB_ADMINUSERNAME environment variable sets the MongoDB admin username.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongo-express-enforce-admin-username-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
2024/12/12 13:35:32 Testing MongoExpressEnforceAdminUsernameEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAdminUsernameEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAdminUsernameEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAdminUsernameEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAdminUsernameEnvVar'
13:35 [32mMongoExpressEnforceAuthPasswordEnvVar [input/policies][0m
# Mongo-Express Enforce Environment Variable - ME_CONFIG_BASICAUTH_PASSWORD

This Policy ensures ME_CONFIG_BASICAUTH_PASSWORD environment variable are in place when using the official container images from Docker Hub.
ME_CONFIG_BASICAUTH_PASSWORD: The ME_CONFIG_BASICAUTH_PASSWORD environment variable sets the mongo-express web password.


If you encounter a violation, ensure the ME_CONFIG_BASICAUTH_PASSWORD environment variables is set.
For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo-express


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Mongo-Express Enforce Environment Variable - ME_CONFIG_BASICAUTH_PASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongo-express-enforce-auth-password-env-var
  io.kubewarden.policy.description: |
    This Policy ensures ME_CONFIG_BASICAUTH_PASSWORD environment variable are in place when using the official container images from Docker Hub.
    ME_CONFIG_BASICAUTH_PASSWORD: The ME_CONFIG_BASICAUTH_PASSWORD environment variable sets the mongo-express web password.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongo-express-enforce-auth-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
2024/12/12 13:35:33 Testing MongoExpressEnforceAuthPasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAuthPasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAuthPasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAuthPasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAuthPasswordEnvVar'
13:35 [32mMongoExpressEnforceAuthUsernameEnvVar [input/policies][0m
# Mongo-Express Enforce Environment Variable - ME_CONFIG_BASICAUTH_USERNAME

This Policy ensures ME_CONFIG_BASICAUTH_USERNAME environment variable are in place when using the official container images from Docker Hub.
ME_CONFIG_BASICAUTH_USERNAME: The ME_CONFIG_BASICAUTH_USERNAME environment variable sets the mongo-express web username.


If you encounter a violation, ensure the ME_CONFIG_BASICAUTH_USERNAME environment variables is set.
For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo-express


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Mongo-Express Enforce Environment Variable - ME_CONFIG_BASICAUTH_USERNAME
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongo-express-enforce-auth-username-env-var
  io.kubewarden.policy.description: |
    This Policy ensures ME_CONFIG_BASICAUTH_USERNAME environment variable are in place when using the official container images from Docker Hub.
    ME_CONFIG_BASICAUTH_USERNAME: The ME_CONFIG_BASICAUTH_USERNAME environment variable sets the mongo-express web username.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongo-express-enforce-auth-username-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
2024/12/12 13:35:33 Testing MongoExpressEnforceAuthUsernameEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAuthUsernameEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAuthUsernameEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAuthUsernameEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceAuthUsernameEnvVar'
13:35 [32mMongoExpressEnforceBaseURLEnvVar [input/policies][0m
# Mongo-Express Enforce Environment Variable - ME_CONFIG_SITE_BASEURL

This Policy ensures ME_CONFIG_SITE_BASEURL environment variable are in place when using the official container images from Docker Hub.
ME_CONFIG_SITE_BASEURL: The ME_CONFIG_SITE_BASEURL environment variable sets the baseUrl to ease mounting at a subdirectory. Remember to include a leading and trailing slash.


If you encounter a violation, ensure the ME_CONFIG_SITE_BASEURL environment variables is set.
For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo-express


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Mongo-Express Enforce Environment Variable - ME_CONFIG_SITE_BASEURL
  io.artifacthub.keywords: pci-dss
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongo-express-enforce-base-url-env-var
  io.kubewarden.policy.description: |
    This Policy ensures ME_CONFIG_SITE_BASEURL environment variable are in place when using the official container images from Docker Hub.
    ME_CONFIG_SITE_BASEURL: The ME_CONFIG_SITE_BASEURL environment variable sets the baseUrl to ease mounting at a subdirectory. Remember to include a leading and trailing slash.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongo-express-enforce-base-url-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.1.6, pci-dss.2.2.2
2024/12/12 13:35:33 Testing MongoExpressEnforceBaseURLEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceBaseURLEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceBaseURLEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceBaseURLEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceBaseURLEnvVar'
13:35 [32mMongoExpressEnforceCookieSecretEnvVar [input/policies][0m
# Mongo-Express Enforce Environment Variable - ME_CONFIG_SITE_COOKIESECRET

This Policy ensures ME_CONFIG_SITE_COOKIESECRET environment variable are in place when using the official container images from Docker Hub.
ME_CONFIG_SITE_COOKIESECRET: The ME_CONFIG_SITE_COOKIESECRET environment variable is used by [cookie-parser middleware](https://www.npmjs.com/package/cookie-parser) to sign cookies.


If you encounter a violation, ensure the ME_CONFIG_SITE_COOKIESECRET environment variables is set.
For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo-express


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Mongo-Express Enforce Environment Variable - ME_CONFIG_SITE_COOKIESECRET
  io.artifacthub.keywords: pci-dss
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongo-express-enforce-cookie-secret-env-var
  io.kubewarden.policy.description: |
    This Policy ensures ME_CONFIG_SITE_COOKIESECRET environment variable are in place when using the official container images from Docker Hub.
    ME_CONFIG_SITE_COOKIESECRET: The ME_CONFIG_SITE_COOKIESECRET environment variable is used by [cookie-parser middleware](https://www.npmjs.com/package/cookie-parser) to sign cookies.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongo-express-enforce-cookie-secret-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.1.6, pci-dss.2.2.2
2024/12/12 13:35:34 Testing MongoExpressEnforceCookieSecretEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceCookieSecretEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceCookieSecretEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceCookieSecretEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceCookieSecretEnvVar'
13:35 [32mMongoExpressEnforceEditorThemeEnvVar [input/policies][0m
# Mongo-Express Enforce Environment Variable - ME_CONFIG_OPTIONS_EDITORTHEME

This Policy ensures ME_CONFIG_OPTIONS_EDITORTHEME environment variable are in place when using the official container images from Docker Hub.
ME_CONFIG_OPTIONS_EDITORTHEME: The ME_CONFIG_OPTIONS_EDITORTHEME environment variable sets the editor color theme, [more here](http://codemirror.net/demo/theme.html)


If you encounter a violation, ensure the ME_CONFIG_OPTIONS_EDITORTHEME environment variables is set.
For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo-express


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Mongo-Express Enforce Environment Variable - ME_CONFIG_OPTIONS_EDITORTHEME
  io.artifacthub.keywords: pci-dss
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongo-express-enforce-editor-theme-env-var
  io.kubewarden.policy.description: |
    This Policy ensures ME_CONFIG_OPTIONS_EDITORTHEME environment variable are in place when using the official container images from Docker Hub.
    ME_CONFIG_OPTIONS_EDITORTHEME: The ME_CONFIG_OPTIONS_EDITORTHEME environment variable sets the editor color theme, [more here](http://codemirror.net/demo/theme.html)
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongo-express-enforce-editor-theme-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.8.7
2024/12/12 13:35:34 Testing MongoExpressEnforceEditorThemeEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceEditorThemeEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceEditorThemeEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceEditorThemeEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceEditorThemeEnvVar'
13:35 [32mMongoExpressEnforceEnableAdminEnvVar [input/policies][0m
# Mongo-Express Enforce Environment Variable - ME_CONFIG_MONGODB_ENABLE_ADMIN

This Policy ensures ME_CONFIG_MONGODB_ENABLE_ADMIN environment variable are in place when using the official container images from Docker Hub.
ME_CONFIG_MONGODB_ENABLE_ADMIN: The ME_CONFIG_MONGODB_ENABLE_ADMIN environment variable enables admin access to all databases. Send strings: `"true"` or `"false"`


If you encounter a violation, ensure the ME_CONFIG_MONGODB_ENABLE_ADMIN environment variables is set.
For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo-express


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Mongo-Express Enforce Environment Variable - ME_CONFIG_MONGODB_ENABLE_ADMIN
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongo-express-enforce-enable-admin-env-var
  io.kubewarden.policy.description: |
    This Policy ensures ME_CONFIG_MONGODB_ENABLE_ADMIN environment variable are in place when using the official container images from Docker Hub.
    ME_CONFIG_MONGODB_ENABLE_ADMIN: The ME_CONFIG_MONGODB_ENABLE_ADMIN environment variable enables admin access to all databases. Send strings: `"true"` or `"false"`
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongo-express-enforce-enable-admin-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
2024/12/12 13:35:34 Testing MongoExpressEnforceEnableAdminEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceEnableAdminEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceEnableAdminEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceEnableAdminEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceEnableAdminEnvVar'
13:35 [32mMongoExpressEnforceMongoPortEnvVar [input/policies][0m
# Mongo-Express Enforce Environment Variable - ME_CONFIG_MONGODB_PORT

This Policy ensures ME_CONFIG_MONGODB_PORT environment variable are in place when using the official container images from Docker Hub.
ME_CONFIG_MONGODB_PORT: The ME_CONFIG_MONGODB_PORT environment variable sets the mongodb port


If you encounter a violation, ensure the ME_CONFIG_MONGODB_PORT environment variables is set.
For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo-express


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Mongo-Express Enforce Environment Variable - ME_CONFIG_MONGODB_PORT
  io.artifacthub.keywords: pci-dss
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongo-express-enforce-mongodb-port-env-var
  io.kubewarden.policy.description: |
    This Policy ensures ME_CONFIG_MONGODB_PORT environment variable are in place when using the official container images from Docker Hub.
    ME_CONFIG_MONGODB_PORT: The ME_CONFIG_MONGODB_PORT environment variable sets the mongodb port
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongo-express-enforce-mongodb-port-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.1.6, pci-dss.2.2.2
2024/12/12 13:35:35 Testing MongoExpressEnforceMongoPortEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceMongoPortEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceMongoPortEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceMongoPortEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceMongoPortEnvVar'
13:35 [32mMongoExpressEnforceMongoServerEnvVar [input/policies][0m
# Mongo-Express Enforce Environment Variable - ME_CONFIG_MONGODB_SERVER

This Policy ensures ME_CONFIG_MONGODB_SERVER environment variable are in place when using the official container images from Docker Hub.
ME_CONFIG_MONGODB_SERVER: The ME_CONFIG_MONGODB_SERVER environment variable sets the MongoDB container name. Use comma delimited list of host names for replica sets.


If you encounter a violation, ensure the ME_CONFIG_MONGODB_SERVER environment variables is set.
For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo-express


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Mongo-Express Enforce Environment Variable - ME_CONFIG_MONGODB_SERVER
  io.artifacthub.keywords: pci-dss
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongo-express-enforce-mongodb-server-env-var
  io.kubewarden.policy.description: |
    This Policy ensures ME_CONFIG_MONGODB_SERVER environment variable are in place when using the official container images from Docker Hub.
    ME_CONFIG_MONGODB_SERVER: The ME_CONFIG_MONGODB_SERVER environment variable sets the MongoDB container name. Use comma delimited list of host names for replica sets.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongo-express-enforce-mongodb-server-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.8.7
2024/12/12 13:35:35 Testing MongoExpressEnforceMongoServerEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceMongoServerEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceMongoServerEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceMongoServerEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceMongoServerEnvVar'
13:35 [32mMongoExpressEnforceRequestSizeEnvVar [input/policies][0m
# Mongo-Express Enforce Environment Variable - ME_CONFIG_REQUEST_SIZE

This Policy ensures ME_CONFIG_REQUEST_SIZE environment variable are in place when using the official container images from Docker Hub.
ME_CONFIG_REQUEST_SIZE: The ME_CONFIG_REQUEST_SIZE environment variable sets the maximum payload size. CRUD operations above this size will fail in [body-parser](https://www.npmjs.com/package/body-parser).


If you encounter a violation, ensure the ME_CONFIG_REQUEST_SIZE environment variables is set.
For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo-express


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Mongo-Express Enforce Environment Variable - ME_CONFIG_REQUEST_SIZE
  io.artifacthub.keywords: pci-dss
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongo-express-enforce-request-size-env-var
  io.kubewarden.policy.description: |
    This Policy ensures ME_CONFIG_REQUEST_SIZE environment variable are in place when using the official container images from Docker Hub.
    ME_CONFIG_REQUEST_SIZE: The ME_CONFIG_REQUEST_SIZE environment variable sets the maximum payload size. CRUD operations above this size will fail in [body-parser](https://www.npmjs.com/package/body-parser).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongo-express-enforce-request-size-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.8.7
2024/12/12 13:35:35 Testing MongoExpressEnforceRequestSizeEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceRequestSizeEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceRequestSizeEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceRequestSizeEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceRequestSizeEnvVar'
13:35 [32mMongoExpressEnforceSessionSecretEnvVar [input/policies][0m
# Mongo-Express Enforce Environment Variable - ME_CONFIG_SITE_SESSIONSECRET

This Policy ensures ME_CONFIG_SITE_SESSIONSECRET environment variable are in place when using the official container images from Docker Hub.
ME_CONFIG_SITE_SESSIONSECRET: The ME_CONFIG_SITE_SESSIONSECRET environment variable is used to sign the session ID cookie by [express-session middleware](https://www.npmjs.com/package/express-session).


If you encounter a violation, ensure the ME_CONFIG_SITE_SESSIONSECRET environment variables is set.
For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo-express


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Mongo-Express Enforce Environment Variable - ME_CONFIG_SITE_SESSIONSECRET
  io.artifacthub.keywords: pci-dss
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongo-express-enforce-session-secret-env-var
  io.kubewarden.policy.description: |
    This Policy ensures ME_CONFIG_SITE_SESSIONSECRET environment variable are in place when using the official container images from Docker Hub.
    ME_CONFIG_SITE_SESSIONSECRET: The ME_CONFIG_SITE_SESSIONSECRET environment variable is used to sign the session ID cookie by [express-session middleware](https://www.npmjs.com/package/express-session).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongo-express-enforce-session-secret-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.1.6, pci-dss.2.2.2
2024/12/12 13:35:36 Testing MongoExpressEnforceSessionSecretEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSessionSecretEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSessionSecretEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSessionSecretEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSessionSecretEnvVar'
13:35 [32mMongoExpressEnforceSSLCrtPathEnvVar [input/policies][0m
# Mongo-Express Enforce Environment Variable - ME_CONFIG_SITE_SSL_CRT_PATH

This Policy ensures ME_CONFIG_SITE_SSL_CRT_PATH environment variable are in place when using the official container images from Docker Hub.
ME_CONFIG_SITE_SSL_CRT_PATH: The ME_CONFIG_SITE_SSL_CRT_PATH environment variable sets the SSL Certificate path. 


If you encounter a violation, ensure the ME_CONFIG_SITE_SSL_CRT_PATH environment variables is set.
For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo-express


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Mongo-Express Enforce Environment Variable - ME_CONFIG_SITE_SSL_CRT_PATH
  io.artifacthub.keywords: pci-dss
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongo-express-enforce-ssl-crt-path-env-var
  io.kubewarden.policy.description: "This Policy ensures ME_CONFIG_SITE_SSL_CRT_PATH environment variable are in place when using the official container images from Docker Hub.\nME_CONFIG_SITE_SSL_CRT_PATH: The ME_CONFIG_SITE_SSL_CRT_PATH environment variable sets the SSL Certificate path. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongo-express-enforce-ssl-crt-path-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.1.6, pci-dss.2.2.2
2024/12/12 13:35:36 Testing MongoExpressEnforceSSLCrtPathEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSSLCrtPathEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSSLCrtPathEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSSLCrtPathEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSSLCrtPathEnvVar'
13:35 [32mMongoExpressEnforceSSLEnabledEnvVar [input/policies][0m
# Mongo-Express Enforce Environment Variable - ME_CONFIG_SITE_SSL_ENABLED

This Policy ensures ME_CONFIG_SITE_SSL_ENABLED environment variable are in place when using the official container images from Docker Hub.
ME_CONFIG_SITE_SSL_ENABLED: The ME_CONFIG_SITE_SSL_ENABLED environment variable enables SSL.


If you encounter a violation, ensure the ME_CONFIG_SITE_SSL_ENABLED environment variables is set.
For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo-express


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Mongo-Express Enforce Environment Variable - ME_CONFIG_SITE_SSL_ENABLED
  io.artifacthub.keywords: pci-dss
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongo-express-enforce-ssl-enabled-env-var
  io.kubewarden.policy.description: |
    This Policy ensures ME_CONFIG_SITE_SSL_ENABLED environment variable are in place when using the official container images from Docker Hub.
    ME_CONFIG_SITE_SSL_ENABLED: The ME_CONFIG_SITE_SSL_ENABLED environment variable enables SSL.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongo-express-enforce-ssl-enabled-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.1.6, pci-dss.2.2.2
2024/12/12 13:35:36 Testing MongoExpressEnforceSSLEnabledEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSSLEnabledEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSSLEnabledEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSSLEnabledEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSSLEnabledEnvVar'
13:35 [32mMongoExpressEnforceSSLKeyPathEnvVar [input/policies][0m
# Mongo-Express Enforce Environment Variable - ME_CONFIG_SITE_SSL_KEY_PATH

This Policy ensures ME_CONFIG_SITE_SSL_KEY_PATH environment variable are in place when using the official container images from Docker Hub.
ME_CONFIG_SITE_SSL_KEY_PATH: The ME_CONFIG_SITE_SSL_KEY_PATH environment variable sets the SSL Key file path. 


If you encounter a violation, ensure the ME_CONFIG_SITE_SSL_KEY_PATH environment variables is set.
For futher information about the Mongo-Express Docker container, check here: https://hub.docker.com/_/mongo-express


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Mongo-Express Enforce Environment Variable - ME_CONFIG_SITE_SSL_KEY_PATH
  io.artifacthub.keywords: pci-dss
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mongo-express-enforce-ssl-key-path-env-var
  io.kubewarden.policy.description: "This Policy ensures ME_CONFIG_SITE_SSL_KEY_PATH environment variable are in place when using the official container images from Docker Hub.\nME_CONFIG_SITE_SSL_KEY_PATH: The ME_CONFIG_SITE_SSL_KEY_PATH environment variable sets the SSL Key file path. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mongo-express-enforce-ssl-key-path-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.1.6, pci-dss.2.2.2
2024/12/12 13:35:37 Testing MongoExpressEnforceSSLKeyPathEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSSLKeyPathEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSSLKeyPathEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSSLKeyPathEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MongoExpressEnforceSSLKeyPathEnvVar'
13:35 [32mMYSQLEnforceDatabaseEnvVar [input/policies][0m
# MYSQL Enforce Environment Variable - MYSQL_DATABASE

This Policy ensures MYSQL_DATABASE environment variable are in place when using the official container images from Docker Hub.
MYSQL_DATABASE: The MYSQL_DATABASE environment variable sets a default MySQL database instance up with the name of that DB being the value of  environment variable. 


If you encounter a violation, ensure the MYSQL_DATABASE environment variables is set.
For futher information about the MYSQL Docker container, check here: https://hub.docker.com/_/mysql


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MYSQL Enforce Environment Variable - MYSQL_DATABASE
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mysql-enforce-database-env-var
  io.kubewarden.policy.description: "This Policy ensures MYSQL_DATABASE environment variable are in place when using the official container images from Docker Hub.\nMYSQL_DATABASE: The MYSQL_DATABASE environment variable sets a default MySQL database instance up with the name of that DB being the value of  environment variable. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mysql-enforce-database-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:37 Testing MYSQLEnforceDatabaseEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceDatabaseEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceDatabaseEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceDatabaseEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceDatabaseEnvVar'
13:35 [32mMYSQLEnforceOnetimePasswordEnvVar [input/policies][0m
# MYSQL Enforce Environment Variable - MYSQL_ONETIME_PASSWORD

This Policy ensures MYSQL_ONETIME_PASSWORD environment variable are in place when using the official container images from Docker Hub.
MYSQL_ONETIME_PASSWORD: The MYSQL_ONETIME_PASSWORD environment variable is set, the root user's password is set as expired and must be changed before MySQL can be used normally 


If you encounter a violation, ensure the MYSQL_ONETIME_PASSWORD environment variables is set.
For futher information about the MYSQL Docker container, check here: https://hub.docker.com/_/mysql


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MYSQL Enforce Environment Variable - MYSQL_ONETIME_PASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mysql-enforce-onetime-password-env-var
  io.kubewarden.policy.description: "This Policy ensures MYSQL_ONETIME_PASSWORD environment variable are in place when using the official container images from Docker Hub.\nMYSQL_ONETIME_PASSWORD: The MYSQL_ONETIME_PASSWORD environment variable is set, the root user's password is set as expired and must be changed before MySQL can be used normally \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mysql-enforce-onetime-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:37 Testing MYSQLEnforceOnetimePasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceOnetimePasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceOnetimePasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceOnetimePasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceOnetimePasswordEnvVar'
13:35 [32mMYSQLEnforcePasswordEnvVar [input/policies][0m
# MYSQL Enforce Environment Variable - MYSQL_PASSWORD

This Policy ensures MYSQL_PASSWORD environment variable are in place when using the official container images from Docker Hub.
MYSQL_PASSWORD: The MYSQL_PASSWORD environment variable specifies a password for MYSQL_USER user. 


If you encounter a violation, ensure the MYSQL_PASSWORD environment variables is set.
For futher information about the MYSQL Docker container, check here: https://hub.docker.com/_/mysql


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MYSQL Enforce Environment Variable - MYSQL_PASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mysql-enforce-password-env-var
  io.kubewarden.policy.description: "This Policy ensures MYSQL_PASSWORD environment variable are in place when using the official container images from Docker Hub.\nMYSQL_PASSWORD: The MYSQL_PASSWORD environment variable specifies a password for MYSQL_USER user. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mysql-enforce-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:38 Testing MYSQLEnforcePasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforcePasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforcePasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforcePasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforcePasswordEnvVar'
13:35 [32mMYSQLEnforceRandomRootPasswordEnvVar [input/policies][0m
# MYSQL Enforce Environment Variable - MYSQL_RANDOM_ROOT_PASSWORD

This Policy ensures MYSQL_RANDOM_ROOT_PASSWORD environment variable are in place when using the official container images from Docker Hub.
MYSQL_RANDOM_ROOT_PASSWORD: The MYSQL_RANDOM_ROOT_PASSWORD environment variable creates random password for the server's root user when the Docker container is started.


If you encounter a violation, ensure the MYSQL_RANDOM_ROOT_PASSWORD environment variables is set.
For futher information about the MYSQL Docker container, check here: https://hub.docker.com/_/mysql


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MYSQL Enforce Environment Variable - MYSQL_RANDOM_ROOT_PASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mysql-enforce-random-root-password-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MYSQL_RANDOM_ROOT_PASSWORD environment variable are in place when using the official container images from Docker Hub.
    MYSQL_RANDOM_ROOT_PASSWORD: The MYSQL_RANDOM_ROOT_PASSWORD environment variable creates random password for the server's root user when the Docker container is started.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mysql-enforce-random-root-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:38 Testing MYSQLEnforceRandomRootPasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceRandomRootPasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceRandomRootPasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceRandomRootPasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceRandomRootPasswordEnvVar'
13:35 [32mMYSQLEnforceRootPasswordEnvVar [input/policies][0m
# MYSQL Enforce Environment Variable - MYSQL_ROOT_PASSWORD

This Policy ensures MYSQL_ROOT_PASSWORD environment variable are in place when using the official container images from Docker Hub.
MYSQL_ROOT_PASSWORD: The MYSQL_ROOT_PASSWORD environment variable specifies a password for the MySQL root account. 


If you encounter a violation, ensure the MYSQL_ROOT_PASSWORD environment variables is set.
For futher information about the MYSQL Docker container, check here: https://hub.docker.com/_/mysql


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MYSQL Enforce Environment Variable - MYSQL_ROOT_PASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mysql-enforce-root-password-env-var
  io.kubewarden.policy.description: "This Policy ensures MYSQL_ROOT_PASSWORD environment variable are in place when using the official container images from Docker Hub.\nMYSQL_ROOT_PASSWORD: The MYSQL_ROOT_PASSWORD environment variable specifies a password for the MySQL root account. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mysql-enforce-root-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:38 Testing MYSQLEnforceRootPasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceRootPasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceRootPasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceRootPasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceRootPasswordEnvVar'
13:35 [32mMYSQLEnforceSkipTzinfoEnvVar [input/policies][0m
# MYSQL Enforce Environment Variable - MYSQL_INITDB_SKIP_TZINFO

This Policy ensures MYSQL_INITDB_SKIP_TZINFO environment variable are in place when using the official container images from Docker Hub.
MYSQL_INITDB_SKIP_TZINFO: The MYSQL_INITDB_SKIP_TZINFO environment variable allows the skipping of timezone checking when initializing the DB.


If you encounter a violation, ensure the MYSQL_INITDB_SKIP_TZINFO environment variables is set.
For futher information about the MYSQL Docker container, check here: https://hub.docker.com/_/mysql


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MYSQL Enforce Environment Variable - MYSQL_INITDB_SKIP_TZINFO
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mysql-enforce-skip-tzinfo-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MYSQL_INITDB_SKIP_TZINFO environment variable are in place when using the official container images from Docker Hub.
    MYSQL_INITDB_SKIP_TZINFO: The MYSQL_INITDB_SKIP_TZINFO environment variable allows the skipping of timezone checking when initializing the DB.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mysql-enforce-skip-tzinfo-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:39 Testing MYSQLEnforceSkipTzinfoEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceSkipTzinfoEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceSkipTzinfoEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceSkipTzinfoEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceSkipTzinfoEnvVar'
13:35 [32mMYSQLEnforceUserEnvVar [input/policies][0m
# MYSQL Enforce Environment Variable - MYSQL_USER

This Policy ensures MYSQL_USER environment variable are in place when using the official container images from Docker Hub.
MYSQL_USER: The MYSQL_USER environment variable sets up a superuser with the same name. 


If you encounter a violation, ensure the MYSQL_USER environment variables is set.
For futher information about the MYSQL Docker container, check here: https://hub.docker.com/_/mysql


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MYSQL Enforce Environment Variable - MYSQL_USER
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mysql-enforce-user-env-var
  io.kubewarden.policy.description: "This Policy ensures MYSQL_USER environment variable are in place when using the official container images from Docker Hub.\nMYSQL_USER: The MYSQL_USER environment variable sets up a superuser with the same name. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mysql-enforce-user-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:39 Testing MYSQLEnforceUserEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceUserEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceUserEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceUserEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLEnforceUserEnvVar'
13:35 [32mMYSQLProhibitEmptyPasswordEnvVar [input/policies][0m
# MYSQL Prohibit Environment Variable - MYSQL_ALLOW_EMPTY_PASSWORD

This Policy ensures MYSQL_ALLOW_EMPTY_PASSWORD environment variable are in place when using the official container images from Docker Hub.
MYSQL_ALLOW_EMPTY_PASSWORD: MYSQL_ALLOW_EMPTY_PASSWORD set to true will allow the container to be started with a blank password for the root user


If you encounter a violation, ensure the MYSQL_ALLOW_EMPTY_PASSWORD environment variables is set.
For futher information about the MYSQL Docker container, check here: https://hub.docker.com/_/mysql


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: MYSQL Prohibit Environment Variable - MYSQL_ALLOW_EMPTY_PASSWORD
  io.artifacthub.keywords: pci-dss, hipaa
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: mysql-prohibit-empty-password-env-var
  io.kubewarden.policy.description: |
    This Policy ensures MYSQL_ALLOW_EMPTY_PASSWORD environment variable are in place when using the official container images from Docker Hub.
    MYSQL_ALLOW_EMPTY_PASSWORD: MYSQL_ALLOW_EMPTY_PASSWORD set to true will allow the container to be started with a blank password for the root user
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/mysql-prohibit-empty-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.2.i
2024/12/12 13:35:40 Testing MYSQLProhibitEmptyPasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLProhibitEmptyPasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLProhibitEmptyPasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLProhibitEmptyPasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/MYSQLProhibitEmptyPasswordEnvVar'
13:35 [32mNamespaceProhibitName [input/policies][0m
# Prohibit Creating Namespace Starting With Prefix

Using this Policy, you can prohibit certain namespaces from containing a specified combination of letters and/or numbers. 


Specify a `namespace` that is something other than what is listed in the Policy. 
```
metadata:
  name: <namespace_name>
```
https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/#working-with-namespaces


# Settings
```yaml
  settings:
    parameters:
      - name: namespace_name
        type: string
        required: true
        value: kube-
```

# Resources
Policy applies to resources kinds:
`Namespace`
rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [namespaces]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Prohibit Creating Namespace Starting With Prefix
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Namespace
  io.kubewarden.policy.title: prohibit-creating-namespace-starting-with-prefix
  io.kubewarden.policy.description: "Using this Policy, you can prohibit certain namespaces from containing a specified combination of letters and/or numbers. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/prohibit-creating-namespace-starting-with-prefix
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: medium
2024/12/12 13:35:40 Testing NamespaceProhibitName policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NamespaceProhibitName'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NamespaceProhibitName'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NamespaceProhibitName'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NamespaceProhibitName'
13:35 [32mNetworkPolicyDefaultRulesBlockAllEgress [input/policies][0m
# Block All Egress Traffic

### Block all traffic
If you are using a CNI that allows for Network Policies, you can use this Policy to block all Egress traffic between namespaces. 

By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. 


Validate your use case and check network policies for traffic blocking. 

https://kubernetes.io/docs/concepts/services-networking/network-policies/


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`NetworkPolicy`
rules:
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [networkpolicies]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Block All Egress Traffic
  io.artifacthub.keywords: pci-dss, mitre-attack, nist800-190, gdpr, soc2-type1
  io.artifacthub.resources: NetworkPolicy
  io.kubewarden.policy.title: block-all-egress-traffic
  io.kubewarden.policy.description: "### Block all traffic\nIf you are using a CNI that allows for Network Policies, you can use this Policy to block all Egress traffic between namespaces. \n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/block-all-egress-traffic
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.2.1
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.3.3.4
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
2024/12/12 13:35:40 Testing NetworkPolicyDefaultRulesBlockAllEgress policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyDefaultRulesBlockAllEgress'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyDefaultRulesBlockAllEgress'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyDefaultRulesBlockAllEgress'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyDefaultRulesBlockAllEgress'
13:35 [32mNetworkPolicyDefaultRulesBlockAllIngress [input/policies][0m
# Block All Ingress Traffic

### Block all traffic
If you are using a CNI that allows for Network Policies, you can use this Policy to block all Ingress traffic between namespaces. 

By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. 


Validate your use case and check network policies for traffic blocking. 

https://kubernetes.io/docs/concepts/services-networking/network-policies/


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`NetworkPolicy`
rules:
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [networkpolicies]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Block All Ingress Traffic
  io.artifacthub.keywords: pci-dss, mitre-attack, nist800-190, gdpr, soc2-type1
  io.artifacthub.resources: NetworkPolicy
  io.kubewarden.policy.title: block-all-ingress-traffic
  io.kubewarden.policy.description: "### Block all traffic\nIf you are using a CNI that allows for Network Policies, you can use this Policy to block all Ingress traffic between namespaces. \n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/block-all-ingress-traffic
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.2.1
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.3.3.4
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
2024/12/12 13:35:41 Testing NetworkPolicyDefaultRulesBlockAllIngress policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyDefaultRulesBlockAllIngress'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyDefaultRulesBlockAllIngress'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyDefaultRulesBlockAllIngress'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyDefaultRulesBlockAllIngress'
13:35 [32mPersistentVolumeReclaimPolicy [input/policies][0m
# Persistent Volume Reclaim Policy Should Be Set To Retain

This Policy checks to see whether or not the persistent volume reclaim policy is set.

PersistentVolumes can have various reclaim policies, including "Retain", "Recycle", and "Delete". For dynamically provisioned PersistentVolumes, the default reclaim policy is "Delete". This means that a dynamically provisioned volume is automatically deleted when a user deletes the corresponding PersistentVolumeClaim. This automatic behavior might be inappropriate if the volume contains precious data. In that case, it is more appropriate to use the "Retain" policy. With the "Retain" policy, if a user deletes a PersistentVolumeClaim, the corresponding PersistentVolume is not be deleted. Instead, it is moved to the Released phase, where all of its data can be manually recovered.


Check your reclaim policy configuration within your PersistentVolume configuration. 
```
spec:
  persistentVolumeReclaimPolicy: <pv_policy>
```

https://kubernetes.io/docs/tasks/administer-cluster/change-pv-reclaim-policy/#why-change-reclaim-policy-of-a-persistentvolume


# Settings
```yaml
  settings:
    parameters:
      - name: pv_policy
        type: string
        required: true
        value: Retain
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`PersistentVolume`
rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [persistentvolumes]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Persistent Volume Reclaim Policy Should Be Set To Retain
  io.artifacthub.keywords: pci-dss, soc2-type1
  io.artifacthub.resources: PersistentVolume
  io.kubewarden.policy.title: persistent-volume-reclaim-policy-should-be-set-to-retain
  io.kubewarden.policy.description: |
    This Policy checks to see whether or not the persistent volume reclaim policy is set.

    PersistentVolumes can have various reclaim policies, including "Retain", "Recycle", and "Delete". For dynamically provisioned PersistentVolumes, the default reclaim policy is "Delete". This means that a dynamically provisioned volume is automatically deleted when a user deletes the corresponding PersistentVolumeClaim. This automatic behavior might be inappropriate if the volume contains precious data. In that case, it is more appropriate to use the "Retain" policy. With the "Retain" policy, if a user deletes a PersistentVolumeClaim, the corresponding PersistentVolume is not be deleted. Instead, it is moved to the Released phase, where all of its data can be manually recovered.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/persistent-volume-reclaim-policy-should-be-set-to-retain
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: data-protection
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.pci-dss: pci-dss.3.1
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.2
2024/12/12 13:35:41 Testing PersistentVolumeReclaimPolicy policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PersistentVolumeReclaimPolicy'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PersistentVolumeReclaimPolicy'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PersistentVolumeReclaimPolicy'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PersistentVolumeReclaimPolicy'
13:35 [32mPostgresEnforceAuthMethodEnvVar [input/policies][0m
# Postgres Enforce Environment Variable - POSTGRES_HOST_AUTH_METHOD

This Policy ensures POSTGRES_HOST_AUTH_METHOD environment variable are in place when using the official container images from Docker Hub.
POSTGRES_HOST_AUTH_METHOD: The POSTGRES_HOST_AUTH_METHOD environment variable is used to control the auth-method for host connections for all databases, all users, and all addresses. If unspecified then md5 password authentication is used. 


If you encounter a violation, ensure the POSTGRES_HOST_AUTH_METHOD environment variables is set.
For futher information about the Postgres Docker container, check here: https://hub.docker.com/_/postgres


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Postgres Enforce Environment Variable - POSTGRES_HOST_AUTH_METHOD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: postgres-enforce-auth-method-env-var
  io.kubewarden.policy.description: "This Policy ensures POSTGRES_HOST_AUTH_METHOD environment variable are in place when using the official container images from Docker Hub.\nPOSTGRES_HOST_AUTH_METHOD: The POSTGRES_HOST_AUTH_METHOD environment variable is used to control the auth-method for host connections for all databases, all users, and all addresses. If unspecified then md5 password authentication is used. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/postgres-enforce-auth-method-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:41 Testing PostgresEnforceAuthMethodEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceAuthMethodEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceAuthMethodEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceAuthMethodEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceAuthMethodEnvVar'
13:35 [32mPostgresEnforceDBEnvVar [input/policies][0m
# Postgres Enforce Environment Variable - POSTGRES_DB

This Policy ensures POSTGRES_DB environment variable are in place when using the official container images from Docker Hub.
POSTGRES_DB: The POSTGRES_DB environment variable defines a different name for the default database that is created when the image is first started. If it is not specified, then the value of POSTGRES_USER will be used.


If you encounter a violation, ensure the POSTGRES_DB environment variables is set.
For futher information about the Postgres Docker container, check here: https://hub.docker.com/_/postgres


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Postgres Enforce Environment Variable - POSTGRES_DB
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: postgres-enforce-db-env-var
  io.kubewarden.policy.description: |
    This Policy ensures POSTGRES_DB environment variable are in place when using the official container images from Docker Hub.
    POSTGRES_DB: The POSTGRES_DB environment variable defines a different name for the default database that is created when the image is first started. If it is not specified, then the value of POSTGRES_USER will be used.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/postgres-enforce-db-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:42 Testing PostgresEnforceDBEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceDBEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceDBEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceDBEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceDBEnvVar'
13:35 [32mPostgresEnforceInitDBArgsEnvVar [input/policies][0m
# Postgres Enforce Environment Variable - POSTGRES_INITDB_ARGS

This Policy ensures POSTGRES_INITDB_ARGS environment variable are in place when using the official container images from Docker Hub.
POSTGRES_INITDB_ARGS:   The POSTGRES_INITDB_ARGS environment variable is used to send arguments to postgres initdb. The value is a space separated string of arguments as postgres initdb would expect them. This is useful for adding functionality like data page checksums: `-e POSTGRES_INITDB_ARGS="--data-checksums"`.


If you encounter a violation, ensure the POSTGRES_INITDB_ARGS environment variables is set.
For futher information about the Postgres Docker container, check here: https://hub.docker.com/_/postgres


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Postgres Enforce Environment Variable - POSTGRES_INITDB_ARGS
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: postgres-enforce-initdb-args-env-var
  io.kubewarden.policy.description: |
    This Policy ensures POSTGRES_INITDB_ARGS environment variable are in place when using the official container images from Docker Hub.
    POSTGRES_INITDB_ARGS:   The POSTGRES_INITDB_ARGS environment variable is used to send arguments to postgres initdb. The value is a space separated string of arguments as postgres initdb would expect them. This is useful for adding functionality like data page checksums: `-e POSTGRES_INITDB_ARGS="--data-checksums"`.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/postgres-enforce-initdb-args-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:42 Testing PostgresEnforceInitDBArgsEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceInitDBArgsEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceInitDBArgsEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceInitDBArgsEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceInitDBArgsEnvVar'
13:35 [32mPostgresEnforceInitDBWaldirEnvVar [input/policies][0m
# Postgres Enforce Environment Variable - POSTGRES_INITDB_WALDIR

This Policy ensures POSTGRES_INITDB_WALDIR environment variable are in place when using the official container images from Docker Hub.
POSTGRES_INITDB_WALDIR: The POSTGRES_INITDB_WALDIR environment variable is used to define another location for the Postgres transaction log. By default the transaction log is stored in a subdirectory of the main Postgres data folder (PGDATA). 


If you encounter a violation, ensure the POSTGRES_INITDB_WALDIR environment variables is set.
For futher information about the Postgres Docker container, check here: https://hub.docker.com/_/postgres


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Postgres Enforce Environment Variable - POSTGRES_INITDB_WALDIR
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: postgres-enforce-initdb-waldir-env-var
  io.kubewarden.policy.description: "This Policy ensures POSTGRES_INITDB_WALDIR environment variable are in place when using the official container images from Docker Hub.\nPOSTGRES_INITDB_WALDIR: The POSTGRES_INITDB_WALDIR environment variable is used to define another location for the Postgres transaction log. By default the transaction log is stored in a subdirectory of the main Postgres data folder (PGDATA). \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/postgres-enforce-initdb-waldir-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:42 Testing PostgresEnforceInitDBWaldirEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceInitDBWaldirEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceInitDBWaldirEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceInitDBWaldirEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceInitDBWaldirEnvVar'
13:35 [32mPostgresEnforcePasswordEnvVar [input/policies][0m
# Postgres Enforce Environment Variable - POSTGRES_PASSWORD

This Policy ensures POSTGRES_PASSWORD environment variable are in place when using the official container images from Docker Hub.
POSTGRES_PASSWORD:   The POSTGRES_PASSWORD environment variable is required for you to use the PostgreSQL image. It must not be empty or undefined. This environment variable sets the superuser password for PostgreSQL. The default superuser is defined by the POSTGRES_USER environment variable.


If you encounter a violation, ensure the POSTGRES_PASSWORD environment variables is set.
For futher information about the Postgres Docker container, check here: https://hub.docker.com/_/postgres


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Postgres Enforce Environment Variable - POSTGRES_PASSWORD
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: postgres-enforce-password-env-var
  io.kubewarden.policy.description: |
    This Policy ensures POSTGRES_PASSWORD environment variable are in place when using the official container images from Docker Hub.
    POSTGRES_PASSWORD:   The POSTGRES_PASSWORD environment variable is required for you to use the PostgreSQL image. It must not be empty or undefined. This environment variable sets the superuser password for PostgreSQL. The default superuser is defined by the POSTGRES_USER environment variable.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/postgres-enforce-password-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:43 Testing PostgresEnforcePasswordEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforcePasswordEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforcePasswordEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforcePasswordEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforcePasswordEnvVar'
13:35 [32mPostgresEnforcePGDataEnvVar [input/policies][0m
# Postgres Enforce Environment Variable - PGDATA

This Policy ensures PGDATA environment variable are in place when using the official container images from Docker Hub.
PGDATA: The PGDATA environment variable is used to define another location - like a subdirectory - for the database files. The default is /var/lib/postgresql/data. If the data volume you're using is a filesystem mountpoint (like with GCE persistent disks) or remote folder that cannot be chowned to the postgres user (like some NFS mounts), Postgres initdb recommends a subdirectory be created to contain the data.


If you encounter a violation, ensure the PGDATA environment variables is set.
For futher information about the Postgres Docker container, check here: https://hub.docker.com/_/postgres


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Postgres Enforce Environment Variable - PGDATA
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: postgres-enforce-pgdata-env-var
  io.kubewarden.policy.description: |
    This Policy ensures PGDATA environment variable are in place when using the official container images from Docker Hub.
    PGDATA: The PGDATA environment variable is used to define another location - like a subdirectory - for the database files. The default is /var/lib/postgresql/data. If the data volume you're using is a filesystem mountpoint (like with GCE persistent disks) or remote folder that cannot be chowned to the postgres user (like some NFS mounts), Postgres initdb recommends a subdirectory be created to contain the data.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/postgres-enforce-pgdata-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:43 Testing PostgresEnforcePGDataEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforcePGDataEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforcePGDataEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforcePGDataEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforcePGDataEnvVar'
13:35 [32mPostgresEnforceUserEnvVar [input/policies][0m
# Postgres Enforce Environment Variable - POSTGRES_USER

This Policy ensures POSTGRES_USER environment variable are in place when using the official container images from Docker Hub.
POSTGRES_USER: The POSTGRES_USER environment variable is used in conjunction with POSTGRES_PASSWORD to set a user and its password. This variable will create the specified user with superuser power and a database with the same name. If it is not specified, then the default user of postgres will be used.
Be aware that if this parameter is specified, PostgreSQL will still show The files belonging to this database system will be owned by user "postgres" during initialization. This refers to the Linux system user (from /etc/passwd in the image) that the postgres daemon runs as, and as such is unrelated to the POSTGRES_USER option. See the section titled "Arbitrary --user Notes" for more details.


If you encounter a violation, ensure the POSTGRES_USER environment variables is set.
For futher information about the Postgres Docker container, check here: https://hub.docker.com/_/postgres


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Postgres Enforce Environment Variable - POSTGRES_USER
  io.artifacthub.keywords: pci-dss, mitre-attack, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: postgres-enforce-user-env-var
  io.kubewarden.policy.description: |
    This Policy ensures POSTGRES_USER environment variable are in place when using the official container images from Docker Hub.
    POSTGRES_USER: The POSTGRES_USER environment variable is used in conjunction with POSTGRES_PASSWORD to set a user and its password. This variable will create the specified user with superuser power and a database with the same name. If it is not specified, then the default user of postgres will be used.
    Be aware that if this parameter is specified, PostgreSQL will still show The files belonging to this database system will be owned by user "postgres" during initialization. This refers to the Linux system user (from /etc/passwd in the image) that the postgres daemon runs as, and as such is unrelated to the POSTGRES_USER option. See the section titled "Arbitrary --user Notes" for more details.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/postgres-enforce-user-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:43 Testing PostgresEnforceUserEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceUserEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceUserEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceUserEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PostgresEnforceUserEnvVar'
13:35 [32mPrometheusRBACClusterRole [input/policies][0m
# Prometheus Rbac Prohibit Verbs

This Policy blocks certain verbs from being set for Prometheus RBAC. This Policy applies to RBAC names containing the word `prometheus`. 


Check the `rules.verbs` for the verb(s) list and check the policy to see what value is set. 
```
metadata:
  name: prometheus
...
rules:
  - verbs:
      - <prometheus_verb>
```

https://kubernetes.io/docs/reference/access-authn-authz/rbac/


# Settings
```yaml
  settings:
    parameters:
      - name: prometheus_verb
        type: string
        required: true
        value: put
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`ClusterRole`
rules:
  - apiGroups: [rbac.authorization.k8s.io]
    apiVersions: [v1]
    resources: [clusterroles]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Prometheus Rbac Prohibit Verbs
  io.artifacthub.keywords: pci-dss, hipaa, soc2-type1
  io.artifacthub.resources: ClusterRole
  io.kubewarden.policy.title: prometheus-rbac-prohibit-verbs
  io.kubewarden.policy.description: "This Policy blocks certain verbs from being set for Prometheus RBAC. This Policy applies to RBAC names containing the word `prometheus`. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/prometheus-rbac-prohibit-verbs
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.7.1.1, pci-dss.7.1.2
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.3
2024/12/12 13:35:44 Testing PrometheusRBACClusterRole policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusRBACClusterRole'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusRBACClusterRole'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusRBACClusterRole'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusRBACClusterRole'
13:35 [32mPrometheusRBACClusterRoleBinding [input/policies][0m
# Prometheus Clusterrolebinding Has Incorrect Bindings

This Policy checks to see if the Prometheus Cluster Role Binding is bound to a `ClusterRole`, and is tied to a `ServiceAccount` name containing text of your choosing. The default policy is set for search for the Service Account name containing the word `prometheus`. 


Ensure the subject name you specify in the Policy matches what you are deploying. 
```
kind: ClusterRoleBinding
metadata:
  name: prometheus
...
subjects:
- kind: ServiceAccount
  name: prometheus
```
https://kubernetes.io/docs/reference/access-authn-authz/rbac/


# Settings
```yaml
  settings:
    parameters:
      - name: prometheus_subject_name
        type: string
        required: true
        value: prometheus
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`ClusterRoleBinding`
rules:
  - apiGroups: [rbac.authorization.k8s.io]
    apiVersions: [v1]
    resources: [clusterrolebindings]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Prometheus Clusterrolebinding Has Incorrect Bindings
  io.artifacthub.keywords: pci-dss, hipaa, soc2-type1
  io.artifacthub.resources: ClusterRoleBinding
  io.kubewarden.policy.title: prometheus-clusterrolebinding-has-incorrect-bindings
  io.kubewarden.policy.description: "This Policy checks to see if the Prometheus Cluster Role Binding is bound to a `ClusterRole`, and is tied to a `ServiceAccount` name containing text of your choosing. The default policy is set for search for the Service Account name containing the word `prometheus`. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/prometheus-clusterrolebinding-has-incorrect-bindings
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.7.1.1, pci-dss.7.1.2
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.3
2024/12/12 13:35:44 Testing PrometheusRBACClusterRoleBinding policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusRBACClusterRoleBinding'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusRBACClusterRoleBinding'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusRBACClusterRoleBinding'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusRBACClusterRoleBinding'
13:35 [32mRabbitMQEnforceConfigFileEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_CONFIG_FILE

This Policy ensures RABBITMQ_CONFIG_FILE environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_CONFIG_FILE: The path to the configuration file, without the .config extension. If the configuration file is present it is used by the server to configure RabbitMQ components. See Configuration guide for more information.


If you encounter a violation, ensure the RABBITMQ_CONFIG_FILE environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_CONFIG_FILE
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-config-file-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_CONFIG_FILE environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_CONFIG_FILE: The path to the configuration file, without the .config extension. If the configuration file is present it is used by the server to configure RabbitMQ components. See Configuration guide for more information.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-config-file-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:44 Testing RabbitMQEnforceConfigFileEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceConfigFileEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceConfigFileEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceConfigFileEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceConfigFileEnvVar'
13:35 [32mRabbitMQEnforceDefaultPassEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_DEFAULT_PASS

This Policy ensures RABBITMQ_DEFAULT_PASS environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_DEFAULT_PASS: The RABBITMQ_DEFAULT_PASS environment variable sets the password for the default user.


If you encounter a violation, ensure the RABBITMQ_DEFAULT_PASS environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_DEFAULT_PASS
  io.artifacthub.keywords: pci-dss, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-default-pass-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_DEFAULT_PASS environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_DEFAULT_PASS: The RABBITMQ_DEFAULT_PASS environment variable sets the password for the default user.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-default-pass-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:45 Testing RabbitMQEnforceDefaultPassEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceDefaultPassEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceDefaultPassEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceDefaultPassEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceDefaultPassEnvVar'
13:35 [32mRabbitMQEnforceDefaultUserEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_DEFAULT_USER

This Policy ensures RABBITMQ_DEFAULT_USER environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_DEFAULT_USER: The RABBITMQ_DEFAULT_USER environment variable sets the User name to create when RabbitMQ creates a new database from scratch.


If you encounter a violation, ensure the RABBITMQ_DEFAULT_USER environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_DEFAULT_USER
  io.artifacthub.keywords: pci-dss, hipaa, gdpr
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-default-user-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_DEFAULT_USER environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_DEFAULT_USER: The RABBITMQ_DEFAULT_USER environment variable sets the User name to create when RabbitMQ creates a new database from scratch.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-default-user-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1, hipaa.164.312.a.2.i
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
2024/12/12 13:35:45 Testing RabbitMQEnforceDefaultUserEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceDefaultUserEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceDefaultUserEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceDefaultUserEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceDefaultUserEnvVar'
13:35 [32mRabbitMQEnforceDefaultVHostEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_DEFAULT_VHOST

This Policy ensures RABBITMQ_DEFAULT_VHOST environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_DEFAULT_VHOST: RABBITMQ_DEFAULT_VHOST sets a Virtual host to create from scratch.


If you encounter a violation, ensure the RABBITMQ_DEFAULT_VHOST environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_DEFAULT_VHOST
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-default-vhost-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_DEFAULT_VHOST environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_DEFAULT_VHOST: RABBITMQ_DEFAULT_VHOST sets a Virtual host to create from scratch.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-default-vhost-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
2024/12/12 13:35:45 Testing RabbitMQEnforceDefaultVHostEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceDefaultVHostEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceDefaultVHostEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceDefaultVHostEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceDefaultVHostEnvVar'
13:35 [32mRabbitMQEnforceEnabledPluginsEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_ENABLED_PLUGINS_FILE

This Policy ensures RABBITMQ_ENABLED_PLUGINS_FILE environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_ENABLED_PLUGINS_FILE: This file records explicitly enabled plugins. When a plugin is enabled or disabled, this file will be recreated. It is important that effective RabbitMQ user has sufficient permissions to read, write and create this file at any time.


If you encounter a violation, ensure the RABBITMQ_ENABLED_PLUGINS_FILE environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_ENABLED_PLUGINS_FILE
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-enabled-plugins-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_ENABLED_PLUGINS_FILE environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_ENABLED_PLUGINS_FILE: This file records explicitly enabled plugins. When a plugin is enabled or disabled, this file will be recreated. It is important that effective RabbitMQ user has sufficient permissions to read, write and create this file at any time.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-enabled-plugins-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:46 Testing RabbitMQEnforceEnabledPluginsEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceEnabledPluginsEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceEnabledPluginsEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceEnabledPluginsEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceEnabledPluginsEnvVar'
13:35 [32mRabbitMQEnforceERLArgsEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS

This Policy ensures RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: The RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS environment variable sets additional parameters for the erl command used when invoking the RabbitMQ Server. The value of this variable is appended to the default list of arguments (RABBITMQ_SERVER_ERL_ARGS).


If you encounter a violation, ensure the RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-additional-erl-args-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: The RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS environment variable sets additional parameters for the erl command used when invoking the RabbitMQ Server. The value of this variable is appended to the default list of arguments (RABBITMQ_SERVER_ERL_ARGS).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-additional-erl-args-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:46 Testing RabbitMQEnforceERLArgsEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceERLArgsEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceERLArgsEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceERLArgsEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceERLArgsEnvVar'
13:35 [32mRabbitMQEnforceGeneratedConfigDirEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_GENERATED_CONFIG_DIR

This Policy ensures RABBITMQ_GENERATED_CONFIG_DIR environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_GENERATED_CONFIG_DIR: The directory where RabbitMQ writes its generated configuration files.


If you encounter a violation, ensure the RABBITMQ_GENERATED_CONFIG_DIR environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_GENERATED_CONFIG_DIR
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-generated-config-dir-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_GENERATED_CONFIG_DIR environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_GENERATED_CONFIG_DIR: The directory where RabbitMQ writes its generated configuration files.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-generated-config-dir-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:46 Testing RabbitMQEnforceGeneratedConfigDirEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceGeneratedConfigDirEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceGeneratedConfigDirEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceGeneratedConfigDirEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceGeneratedConfigDirEnvVar'
13:35 [32mRabbitMQEnforceLogBaseEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_LOG_BASE

This Policy ensures RABBITMQ_LOG_BASE environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_LOG_BASE: This base directory contains the RabbitMQ server's log files, unless RABBITMQ_LOGS is set.


If you encounter a violation, ensure the RABBITMQ_LOG_BASE environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_LOG_BASE
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-log-base-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_LOG_BASE environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_LOG_BASE: This base directory contains the RabbitMQ server's log files, unless RABBITMQ_LOGS is set.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-log-base-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:46 Testing RabbitMQEnforceLogBaseEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceLogBaseEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceLogBaseEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceLogBaseEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceLogBaseEnvVar'
13:35 [32mRabbitMQEnforceLogsEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_LOGS

This Policy ensures RABBITMQ_LOGS environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_LOGS: The path of the RabbitMQ server's Erlang log file. This variable cannot be overridden on Windows.


If you encounter a violation, ensure the RABBITMQ_LOGS environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_LOGS
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-logs-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_LOGS environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_LOGS: The path of the RabbitMQ server's Erlang log file. This variable cannot be overridden on Windows.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-logs-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:47 Testing RabbitMQEnforceLogsEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceLogsEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceLogsEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceLogsEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceLogsEnvVar'
13:35 [32mRabbitMQEnforceMnesiaBaseEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_MNESIA_BASE

This Policy ensures RABBITMQ_MNESIA_BASE environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_MNESIA_BASE: This base directory contains sub-directories for the RabbitMQ server's node database, message store and cluster state files, one for each node, unless RABBITMQ_MNESIA_DIR is set explicitly. It is important that effective RabbitMQ user has sufficient permissions to read, write and create files and subdirectories in this directory at any time. This variable is typically not overridden. Usually RABBITMQ_MNESIA_DIR is overridden instead.


If you encounter a violation, ensure the RABBITMQ_MNESIA_BASE environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_MNESIA_BASE
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-mnesia-base-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_MNESIA_BASE environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_MNESIA_BASE: This base directory contains sub-directories for the RabbitMQ server's node database, message store and cluster state files, one for each node, unless RABBITMQ_MNESIA_DIR is set explicitly. It is important that effective RabbitMQ user has sufficient permissions to read, write and create files and subdirectories in this directory at any time. This variable is typically not overridden. Usually RABBITMQ_MNESIA_DIR is overridden instead.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-mnesia-base-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:47 Testing RabbitMQEnforceMnesiaBaseEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceMnesiaBaseEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceMnesiaBaseEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceMnesiaBaseEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceMnesiaBaseEnvVar'
13:35 [32mRabbitMQEnforceMnesiaDirEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_MNESIA_DIR

This Policy ensures RABBITMQ_MNESIA_DIR environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_MNESIA_DIR: The directory where this RabbitMQ node's data is stored. This s a schema database, message stores, cluster member information and other persistent node state.


If you encounter a violation, ensure the RABBITMQ_MNESIA_DIR environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_MNESIA_DIR
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-mnesia-dir-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_MNESIA_DIR environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_MNESIA_DIR: The directory where this RabbitMQ node's data is stored. This s a schema database, message stores, cluster member information and other persistent node state.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-mnesia-dir-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:47 Testing RabbitMQEnforceMnesiaDirEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceMnesiaDirEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceMnesiaDirEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceMnesiaDirEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceMnesiaDirEnvVar'
13:35 [32mRabbitMQEnforcePidFileEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_PID_FILE

This Policy ensures RABBITMQ_PID_FILE environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_PID_FILE: File in which the process id is placed for use by rabbitmqctl wait.


If you encounter a violation, ensure the RABBITMQ_PID_FILE environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_PID_FILE
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-pid-file-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_PID_FILE environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_PID_FILE: File in which the process id is placed for use by rabbitmqctl wait.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-pid-file-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:48 Testing RabbitMQEnforcePidFileEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforcePidFileEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforcePidFileEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforcePidFileEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforcePidFileEnvVar'
13:35 [32mRabbitMQEnforcePluginsDirEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_PLUGINS_DIR

This Policy ensures RABBITMQ_PLUGINS_DIR environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_PLUGINS_DIR: The list of directories where plugin archive files are located and extracted from. This is PATH-like variable, where different paths are separated by an OS-specific separator (: for Unix, ; for Windows). Plugins can be installed to any of the directories listed here.


If you encounter a violation, ensure the RABBITMQ_PLUGINS_DIR environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_PLUGINS_DIR
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-plugins-dir-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_PLUGINS_DIR environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_PLUGINS_DIR: The list of directories where plugin archive files are located and extracted from. This is PATH-like variable, where different paths are separated by an OS-specific separator (: for Unix, ; for Windows). Plugins can be installed to any of the directories listed here.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-plugins-dir-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:48 Testing RabbitMQEnforcePluginsDirEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforcePluginsDirEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforcePluginsDirEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforcePluginsDirEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforcePluginsDirEnvVar'
13:35 [32mRabbitMQEnforcePluginsExpandDirEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_PLUGINS_EXPAND_DIR

This Policy ensures RABBITMQ_PLUGINS_EXPAND_DIR environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_PLUGINS_EXPAND_DIR: Working directory used to expand enabled plugins when starting the server. It is important that effective RabbitMQ user has sufficient permissions to read and create files and subdirectories in this directory.


If you encounter a violation, ensure the RABBITMQ_PLUGINS_EXPAND_DIR environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_PLUGINS_EXPAND_DIR
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-plugins-expand-dir-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_PLUGINS_EXPAND_DIR environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_PLUGINS_EXPAND_DIR: Working directory used to expand enabled plugins when starting the server. It is important that effective RabbitMQ user has sufficient permissions to read and create files and subdirectories in this directory.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-plugins-expand-dir-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:48 Testing RabbitMQEnforcePluginsExpandDirEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforcePluginsExpandDirEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforcePluginsExpandDirEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforcePluginsExpandDirEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforcePluginsExpandDirEnvVar'
13:35 [32mRabbitMQEnforceSchemaDirEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_SCHEMA_DIR

This Policy ensures RABBITMQ_SCHEMA_DIR environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_SCHEMA_DIR: The directory where RabbitMQ keeps its configuration schema used by the new style configuration file.


If you encounter a violation, ensure the RABBITMQ_SCHEMA_DIR environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_SCHEMA_DIR
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-schema-dir-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_SCHEMA_DIR environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_SCHEMA_DIR: The directory where RabbitMQ keeps its configuration schema used by the new style configuration file.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-schema-dir-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:49 Testing RabbitMQEnforceSchemaDirEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSchemaDirEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSchemaDirEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSchemaDirEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSchemaDirEnvVar'
13:35 [32mRabbitMQEnforceSSLCACertFileEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_SSL_CACERTFILE

This Policy ensures RABBITMQ_SSL_CACERTFILE environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_SSL_CACERTFILE: RABBITMQ_SSL_CACERTFILE sets a path to the CA certificate file. 


If you encounter a violation, ensure the RABBITMQ_SSL_CACERTFILE environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_SSL_CACERTFILE
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-ssl-ca-cert-file-env-var
  io.kubewarden.policy.description: "This Policy ensures RABBITMQ_SSL_CACERTFILE environment variable are in place when using the official container images from Docker Hub.\nRABBITMQ_SSL_CACERTFILE: RABBITMQ_SSL_CACERTFILE sets a path to the CA certificate file. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-ssl-ca-cert-file-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
2024/12/12 13:35:49 Testing RabbitMQEnforceSSLCACertFileEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLCACertFileEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLCACertFileEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLCACertFileEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLCACertFileEnvVar'
13:35 [32mRabbitMQEnforceSSLCertFileEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_SSL_CERTFILE

This Policy ensures RABBITMQ_SSL_CERTFILE environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_SSL_CERTFILE: RABBITMQ_SSL_CERTFILE sets a path to the server certificate file. 


If you encounter a violation, ensure the RABBITMQ_SSL_CERTFILE environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_SSL_CERTFILE
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-ssl-cert-file-env-var
  io.kubewarden.policy.description: "This Policy ensures RABBITMQ_SSL_CERTFILE environment variable are in place when using the official container images from Docker Hub.\nRABBITMQ_SSL_CERTFILE: RABBITMQ_SSL_CERTFILE sets a path to the server certificate file. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-ssl-cert-file-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
2024/12/12 13:35:49 Testing RabbitMQEnforceSSLCertFileEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLCertFileEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLCertFileEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLCertFileEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLCertFileEnvVar'
13:35 [32mRabbitMQEnforceSSLDepthEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_SSL_DEPTH

This Policy ensures RABBITMQ_SSL_DEPTH environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_SSL_DEPTH: RABBITMQ_SSL_DEPTH is the maximum number of non-self-issued intermediate certificates that may follow the peer certificate in a valid certification path.


If you encounter a violation, ensure the RABBITMQ_SSL_DEPTH environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_SSL_DEPTH
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-ssl-depth-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_SSL_DEPTH environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_SSL_DEPTH: RABBITMQ_SSL_DEPTH is the maximum number of non-self-issued intermediate certificates that may follow the peer certificate in a valid certification path.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-ssl-depth-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
2024/12/12 13:35:49 Testing RabbitMQEnforceSSLDepthEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLDepthEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLDepthEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLDepthEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLDepthEnvVar'
13:35 [32mRabbitMQEnforceSSLFailNoPeerEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT

This Policy ensures RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT: RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT when set to true, TLS connection will be rejected if client fails to provide a certificate.


If you encounter a violation, ensure the RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-fail-if-no-peer-cert-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT: RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT when set to true, TLS connection will be rejected if client fails to provide a certificate.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-fail-if-no-peer-cert-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
2024/12/12 13:35:50 Testing RabbitMQEnforceSSLFailNoPeerEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLFailNoPeerEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLFailNoPeerEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLFailNoPeerEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLFailNoPeerEnvVar'
13:35 [32mRabbitMQEnforceSSLKeyFileEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_SSL_KEYFILE

This Policy ensures RABBITMQ_SSL_KEYFILE environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_SSL_KEYFILE: The RABBITMQ_SSL_KEYFILE sets a path for the server private key file.


If you encounter a violation, ensure the RABBITMQ_SSL_KEYFILE environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_SSL_KEYFILE
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-ssl-keyfile-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_SSL_KEYFILE environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_SSL_KEYFILE: The RABBITMQ_SSL_KEYFILE sets a path for the server private key file.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-ssl-keyfile-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
2024/12/12 13:35:50 Testing RabbitMQEnforceSSLKeyFileEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLKeyFileEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLKeyFileEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLKeyFileEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLKeyFileEnvVar'
13:35 [32mRabbitMQEnforceSSLVerifyEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_SSL_VERIFY

This Policy ensures RABBITMQ_SSL_VERIFY environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_SSL_VERIFY: The RABBITMQ_SSL_VERIFY enables peer verification. 


If you encounter a violation, ensure the RABBITMQ_SSL_VERIFY environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_SSL_VERIFY
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-ssl-verify-env-var
  io.kubewarden.policy.description: "This Policy ensures RABBITMQ_SSL_VERIFY environment variable are in place when using the official container images from Docker Hub.\nRABBITMQ_SSL_VERIFY: The RABBITMQ_SSL_VERIFY enables peer verification. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-ssl-verify-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
2024/12/12 13:35:50 Testing RabbitMQEnforceSSLVerifyEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLVerifyEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLVerifyEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLVerifyEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceSSLVerifyEnvVar'
13:35 [32mRabbitMQEnforceVMMemoryEnvVar [input/policies][0m
# RabbitMQ Enforce Environment Variable - RABBITMQ_VM_MEMORY_HIGH_WATERMARK

This Policy ensures RABBITMQ_VM_MEMORY_HIGH_WATERMARK environment variable are in place when using the official container images from Docker Hub.
RABBITMQ_VM_MEMORY_HIGH_WATERMARK: The RABBITMQ_VM_MEMORY_HIGH_WATERMARK environment variable sets the memory threshold at which the flow control is triggered. Can be absolute or relative to the amount of RAM available to the OS.


If you encounter a violation, ensure the RABBITMQ_VM_MEMORY_HIGH_WATERMARK environment variables is set.
For futher information about the RabbitMQ Docker container, check here: https://hub.docker.com/_/rabbitmq


# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Deployment`, `Job`, `ReplicationController`, `ReplicaSet`, `DaemonSet`, `StatefulSet`, `CronJob`
rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [replicationcontrollers]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: RabbitMQ Enforce Environment Variable - RABBITMQ_VM_MEMORY_HIGH_WATERMARK
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob
  io.kubewarden.policy.title: rabbitmq-enforce-vm-memory-env-var
  io.kubewarden.policy.description: |
    This Policy ensures RABBITMQ_VM_MEMORY_HIGH_WATERMARK environment variable are in place when using the official container images from Docker Hub.
    RABBITMQ_VM_MEMORY_HIGH_WATERMARK: The RABBITMQ_VM_MEMORY_HIGH_WATERMARK environment variable sets the memory threshold at which the flow control is triggered. Can be absolute or relative to the amount of RAM available to the OS.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rabbitmq-enforce-vm-memory-env-var
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: high
2024/12/12 13:35:51 Testing RabbitMQEnforceVMMemoryEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceVMMemoryEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceVMMemoryEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceVMMemoryEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RabbitMQEnforceVMMemoryEnvVar'
13:35 [32mRBACClusterRoleClusterAdmin [input/policies][0m
# Rbac Protect Cluster Admin Clusterrolebindings

This Policy allows you to select which groups you can set for Cluster-admin. The default policy checks for the 

```
subjects:
- kind: Group
  name: system:masters
```

`cluster-admin` allows super-user access to perform any action on any resource. When used in a ClusterRoleBinding, it gives full control over every resource in the cluster and in all namespaces. When used in a RoleBinding, it gives full control over every resource in the role binding's namespace, including the namespace itself. Be selective when adding additional subjects. 


Remove any kinds and names that are not consistent with the constraint. 
```
kind: ClusterRoleBinding
metadata:
  name: cluster-admin
...
subjects:
- kind: Group
  name: system:masters
```  
https://kubernetes.io/docs/reference/access-authn-authz/rbac/


# Settings
```yaml
  settings:
    parameters:
      - name: subjects_name
        type: string
        required: true
        value: system:masters
      - name: subjects_kind
        type: string
        required: true
        value: Group
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`ClusterRoleBinding`
rules:
  - apiGroups: [rbac.authorization.k8s.io]
    apiVersions: [v1]
    resources: [clusterrolebindings]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Rbac Protect Cluster Admin Clusterrolebindings
  io.artifacthub.keywords: pci-dss, cis-benchmark, mitre-attack, gdpr, hipaa, soc2-type1
  io.artifacthub.resources: ClusterRoleBinding
  io.kubewarden.policy.title: rbac-protect-cluster-admin-clusterrolebindings
  io.kubewarden.policy.description: "This Policy allows you to select which groups you can set for Cluster-admin. The default policy checks for the \n\n```\nsubjects:\n- kind: Group\n  name: system:masters\n```\n\n`cluster-admin` allows super-user access to perform any action on any resource. When used in a ClusterRoleBinding, it gives full control over every resource in the cluster and in all namespaces. When used in a RoleBinding, it gives full control over every resource in the role binding's namespace, including the namespace itself. Be selective when adding additional subjects. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rbac-protect-cluster-admin-clusterrolebindings
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.7.1.1, pci-dss.7.1.2
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.1.1
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.4.2
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.3
2024/12/12 13:35:51 Testing RBACClusterRoleClusterAdmin policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACClusterRoleClusterAdmin'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACClusterRoleClusterAdmin'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACClusterRoleClusterAdmin'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACClusterRoleClusterAdmin'
13:35 [32mRBACProhibitListOnSecrets [input/policies][0m
# Rbac Prohibit List On Secrets

This Policy will violate if any RBAC ClusterRoles or Roles are designated with 'list' verb on 'secrets' resource.


When deploying RBAC roles, ensure the resource and verb combination you choose are allowed by the Policy. 
```
rules:
- resources: <resources>
  verbs: <verb>
```

https://kubernetes.io/docs/reference/access-authn-authz/rbac/


# Settings
```yaml
  settings:
    parameters:
      - name: resource
        type: string
        required: true
        value: "secrets"
      - name: verb
        type: string
        required: true
        value: "list"
      - name: exclude_label_key
        type: string
        required: false
        value: ""
      - name: exclude_label_value
        type: string
        required: false
        value: ""
```

# Resources
Policy applies to resources kinds:
`Role`, `ClusterRole`
rules:
  - apiGroups: [rbac.authorization.k8s.io]
    apiVersions: [v1]
    resources: [roles, clusterroles]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Rbac Prohibit List On Secrets
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Role, ClusterRole
  io.kubewarden.policy.title: rbac-prohibit-list-secrets
  io.kubewarden.policy.description: "This Policy will violate if any RBAC ClusterRoles or Roles are designated with 'list' verb on 'secrets' resource.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rbac-prohibit-list-secrets
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitListOnSecrets'
opa test policy.rego tests/*.rego
PASS: 3/3
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitListOnSecrets'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitListOnSecrets'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitListOnSecrets'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitListOnSecrets'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitListOnSecrets'
13:35 [32mRBACProhibitWatchOnSecrets [input/policies][0m
# Rbac Prohibit Watch On Secrets

This Policy will violate if any RBAC ClusterRoles or Roles are designated with 'watch' verb on 'secrets' resource.


When deploying RBAC roles, ensure the resource and verb combination you choose are allowed by the Policy. 
```
rules:
- resources: <resources>
  verbs: <verb>
```

https://kubernetes.io/docs/reference/access-authn-authz/rbac/


# Settings
```yaml
  settings:
    parameters:
      - name: resource
        type: string
        required: true
        value: "secrets"
      - name: verb
        type: string
        required: true
        value: "watch"
      - name: exclude_label_key
        type: string
        required: false
        value: ""
      - name: exclude_label_value
        type: string
        required: false
        value: ""
```

# Resources
Policy applies to resources kinds:
`Role`, `ClusterRole`
rules:
  - apiGroups: [rbac.authorization.k8s.io]
    apiVersions: [v1]
    resources: [roles, clusterroles]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Rbac Prohibit Watch On Secrets
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Role, ClusterRole
  io.kubewarden.policy.title: rbac-prohibit-watch-secrets
  io.kubewarden.policy.description: "This Policy will violate if any RBAC ClusterRoles or Roles are designated with 'watch' verb on 'secrets' resource.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rbac-prohibit-watch-secrets
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWatchOnSecrets'
opa test policy.rego tests/*.rego
PASS: 3/3
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWatchOnSecrets'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWatchOnSecrets'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWatchOnSecrets'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWatchOnSecrets'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWatchOnSecrets'
13:35 [32mRBACProhibitWildcardOnSecrets [input/policies][0m
# Rbac Prohibit Wildcard On Secrets

This Policy will violate if any RBAC ClusterRoles or Roles are designated with 'wildcard' verb on 'secrets' resource.


When deploying RBAC roles, ensure the resource and verb combination you choose are allowed by the Policy. 
```
rules:
- resources: <resources>
  verbs: <verb>
```

https://kubernetes.io/docs/reference/access-authn-authz/rbac/


# Settings
```yaml
  settings:
    parameters:
      - name: resource
        type: string
        required: true
        value: "secrets"
      - name: verb
        type: string
        required: true
        value: "*"
      - name: exclude_label_key
        type: string
        required: false
        value: ""
      - name: exclude_label_value
        type: string
        required: false
        value: ""
```

# Resources
Policy applies to resources kinds:
`Role`, `ClusterRole`
rules:
  - apiGroups: [rbac.authorization.k8s.io]
    apiVersions: [v1]
    resources: [roles, clusterroles]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Rbac Prohibit Wildcard On Secrets
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Role, ClusterRole
  io.kubewarden.policy.title: rbac-prohibit-wildcard-secrets
  io.kubewarden.policy.description: "This Policy will violate if any RBAC ClusterRoles or Roles are designated with 'wildcard' verb on 'secrets' resource.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rbac-prohibit-wildcard-secrets
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardOnSecrets'
opa test policy.rego tests/*.rego
PASS: 3/3
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardOnSecrets'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardOnSecrets'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardOnSecrets'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardOnSecrets'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardOnSecrets'
13:35 [32mRBACProhibitWildcardsOnPolicyRuleResources [input/policies][0m
# Rbac Prohibit Wildcards on Policy Rule Resources

This Policy prohibits various resources from being set with wildcards for Role or ClusterRole resources, except for the `cluster-admin` ClusterRole. It will check each resource specified for the verb specified. The wildcards will be checked in:

### Resources
In the Kubernetes API, most resources are represented and accessed using a string representation of their object name, such as pods for a Pod. RBAC refers to resources using exactly the same name that appears in the URL for the relevant API endpoint. 

### Verbs
API verbs like get, list, create, update, patch, watch, delete, and deletecollection are used for resource requests. 

### API Groups
The API Group being accessed (for resource requests only).

### Non Resource URLs
Requests to endpoints other than /api/v1/... or /apis/<group>/<version>/... are considered "non-resource requests", and use the lower-cased HTTP method of the request as the verb.


Replace the `*` with the appropriate resource. The type of 
```
rules:
- <attributes>:
  - '*'
    
```
https://kubernetes.io/docs/reference/access-authn-authz/rbac/


# Settings
```yaml
  settings:
    parameters:
      - name: attributes
        type: string
        required: true
        value: "resources"
      - name: exclude_role_name
        type: string
        required: true
        value: ""
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Role`, `ClusterRole`
rules:
  - apiGroups: [rbac.authorization.k8s.io]
    apiVersions: [v1]
    resources: [roles, clusterroles]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Rbac Prohibit Wildcards on Policy Rule Resources
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Role, ClusterRole
  io.kubewarden.policy.title: rbac-prohibit-wildcards-policyrule-resources
  io.kubewarden.policy.description: "This Policy prohibits various resources from being set with wildcards for Role or ClusterRole resources, except for the `cluster-admin` ClusterRole. It will check each resource specified for the verb specified. The wildcards will be checked in:\n\n### Resources\nIn the Kubernetes API, most resources are represented and accessed using a string representation of their object name, such as pods for a Pod. RBAC refers to resources using exactly the same name that appears in the URL for the relevant API endpoint. \n\n### Verbs\nAPI verbs like get, list, create, update, patch, watch, delete, and deletecollection are used for resource requests. \n\n### API Groups\nThe API Group being accessed (for resource requests only).\n\n### Non Resource URLs\nRequests to endpoints other than /api/v1/... or /apis/<group>/<version>/... are considered \"non-resource requests\", and use the lower-cased HTTP method of the request as the verb.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rbac-prohibit-wildcards-policyrule-resources
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardsOnPolicyRuleResources'
opa test policy.rego tests/*.rego
PASS: 3/3
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardsOnPolicyRuleResources'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardsOnPolicyRuleResources'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardsOnPolicyRuleResources'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardsOnPolicyRuleResources'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardsOnPolicyRuleResources'
13:35 [32mRBACProhibitWildcardsOnPolicyRuleVerbs [input/policies][0m
# Rbac Prohibit Wildcards on Policy Rule Verbs

This Policy prohibits various resources from being set with wildcards for Role or ClusterRole resources, except for the `cluster-admin` ClusterRole. It will check each resource specified for the verb specified. The wildcards will be checked in:

### Resources
In the Kubernetes API, most resources are represented and accessed using a string representation of their object name, such as pods for a Pod. RBAC refers to resources using exactly the same name that appears in the URL for the relevant API endpoint. 

### Verbs
API verbs like get, list, create, update, patch, watch, delete, and deletecollection are used for resource requests. 

### API Groups
The API Group being accessed (for resource requests only).

### Non Resource URLs
Requests to endpoints other than /api/v1/... or /apis/<group>/<version>/... are considered "non-resource requests", and use the lower-cased HTTP method of the request as the verb.


Replace the `*` with the appropriate resource. The type of 
```
rules:
- <attributes>:
  - '*'
    
```
https://kubernetes.io/docs/reference/access-authn-authz/rbac/


# Settings
```yaml
  settings:
    parameters:
      - name: attributes
        type: string
        required: true
        value: "verbs"
      - name: exclude_role_name
        type: string
        required: true
        value: ""
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Role`, `ClusterRole`
rules:
  - apiGroups: [rbac.authorization.k8s.io]
    apiVersions: [v1]
    resources: [roles, clusterroles]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Rbac Prohibit Wildcards on Policy Rule Verbs
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Role, ClusterRole
  io.kubewarden.policy.title: rbac-prohibit-wildcards-policyrule-verbs
  io.kubewarden.policy.description: "This Policy prohibits various resources from being set with wildcards for Role or ClusterRole resources, except for the `cluster-admin` ClusterRole. It will check each resource specified for the verb specified. The wildcards will be checked in:\n\n### Resources\nIn the Kubernetes API, most resources are represented and accessed using a string representation of their object name, such as pods for a Pod. RBAC refers to resources using exactly the same name that appears in the URL for the relevant API endpoint. \n\n### Verbs\nAPI verbs like get, list, create, update, patch, watch, delete, and deletecollection are used for resource requests. \n\n### API Groups\nThe API Group being accessed (for resource requests only).\n\n### Non Resource URLs\nRequests to endpoints other than /api/v1/... or /apis/<group>/<version>/... are considered \"non-resource requests\", and use the lower-cased HTTP method of the request as the verb.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rbac-prohibit-wildcards-policyrule-verbs
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardsOnPolicyRuleVerbs'
opa test policy.rego tests/*.rego
PASS: 3/3
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardsOnPolicyRuleVerbs'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardsOnPolicyRuleVerbs'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardsOnPolicyRuleVerbs'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardsOnPolicyRuleVerbs'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/RBACProhibitWildcardsOnPolicyRuleVerbs'
13:35 [32mServiceAccountDisableTokenAutomount [input/policies][0m
# Disable ServiceAccount Token Automount In Specific Namespace

This Policy allows you to enforce the enabling or disabling the automounting of service account tokens. 

When a pod is created without a service account defined, the default service account within the same namespace will be assigned automatically. 

This is a security concern because a kubernetes client can load a container's service account token. With that token a compromoised contaienr can then access the Kubernetes API to perform actions such as creating and deleting pods.

In version 1.6+, you can opt out of automounting API credentials for a service account by setting automountServiceAccountToken: false on the service account.


Add the key:value pair `automountServiceAccountToken: false` to your Service Account declaration. 
```
kind: ServiceAccount
automountServiceAccountToken: false
```

https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server


# Settings
```yaml
  settings:
    parameters:
      - name: automount
        type: boolean
        required: true
        value: false
      - name: namespace
        type: string
        required: true
        value: default
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`ServiceAccount`
rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [serviceaccounts]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Disable ServiceAccount Token Automount In Specific Namespace
  io.artifacthub.keywords: pci-dss, cis-benchmark, mitre-attack, hipaa, gdpr, default, soc2-type1
  io.artifacthub.resources: ServiceAccount
  io.kubewarden.policy.title: disable-service-account-token-automount-in-specific-namespace
  io.kubewarden.policy.description: "This Policy allows you to enforce the enabling or disabling the automounting of service account tokens. \n\nWhen a pod is created without a service account defined, the default service account within the same namespace will be assigned automatically. \n\nThis is a security concern because a kubernetes client can load a container's service account token. With that token a compromoised contaienr can then access the Kubernetes API to perform actions such as creating and deleting pods.\n\nIn version 1.6+, you can opt out of automounting API credentials for a service account by setting automountServiceAccountToken: false on the service account.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/disable-service-account-token-automount-in-specific-namespace
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.7.1.1
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.1.6
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.6.3
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.2.i, hipaa.164.312.a.1
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.3
2024/12/12 13:35:53 Testing ServiceAccountDisableTokenAutomount policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceAccountDisableTokenAutomount'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceAccountDisableTokenAutomount'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceAccountDisableTokenAutomount'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceAccountDisableTokenAutomount'
13:35 [32mServiceProhibitPortsRange [input/policies][0m
# Services Prohibit Ports Range

This Policy checks if ports allocated for your services are using a number that is less than the specified value. 


Use a port that is greater than or equal to what is specified in the Policy. 
```
spec:
  ports:
    - targetPort: <target_port>
```


# Settings
```yaml
  settings:
    parameters:
      - name: target_port
        type: integer
        required: true
        value: 1024
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Service`
rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [services]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Services Prohibit Ports Range
  io.artifacthub.keywords: pci-dss
  io.artifacthub.resources: Service
  io.kubewarden.policy.title: services-prohibit-ports-range
  io.kubewarden.policy.description: "This Policy checks if ports allocated for your services are using a number that is less than the specified value. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/services-prohibit-ports-range
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.1.6, pci-dss.1.3.1, pci-dss.2.2.2
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceProhibitPortsRange'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceProhibitPortsRange'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceProhibitPortsRange'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceProhibitPortsRange'
13:35 [32mServiceProhibitType [input/policies][0m
# Services Prohibit Type

This Policy checks your Kubernetes Service kind to see what Service type is set. If a specified service type is found, this Policy will be in violation. Security practices suggest using types `ServiceType` of `ClusterIP` or `LoadBalancer` and not `NodePort`. 


Ensure the type matches what is specified in the Policy. 
```
spec:
  type: <type>
```

https://kubernetes.io/docs/concepts/services-networking/service/#nodeport


# Settings
```yaml
  settings:
    parameters:
      - name: type
        type: string
        required: true
        value: NodePort
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Service`
rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [services]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Services Prohibit Type
  io.artifacthub.keywords: pci-dss
  io.artifacthub.resources: Service
  io.kubewarden.policy.title: services-prohibit-type
  io.kubewarden.policy.description: "This Policy checks your Kubernetes Service kind to see what Service type is set. If a specified service type is found, this Policy will be in violation. Security practices suggest using types `ServiceType` of `ClusterIP` or `LoadBalancer` and not `NodePort`. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/services-prohibit-type
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.1.6, pci-dss.1.3.1, pci-dss.2.2.2
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceProhibitType'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceProhibitType'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceProhibitType'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceProhibitType'
13:35 [32mServiceRestrictProtocols [input/policies][0m
# Services Restrict Protocols

This Policy specifies what protocols should set for your Service. Any protocol not listed in this Policy will be in violation. 


Use a protocol that is specified in the Policy. 
```
spec:
  ports:
    - protocol: <protocols>
```


# Settings
```yaml
  settings:
    parameters:
      - name: protocols
        type: string
        required: true
        value: HTTPS
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Service`
rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [services]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Services Restrict Protocols
  io.artifacthub.keywords: pci-dss, soc2-type1
  io.artifacthub.resources: Service
  io.kubewarden.policy.title: services-restrict-protocols
  io.kubewarden.policy.description: "This Policy specifies what protocols should set for your Service. Any protocol not listed in this Policy will be in violation. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/services-restrict-protocols
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.1.6, pci-dss.1.3.1
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.7
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceRestrictProtocols'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceRestrictProtocols'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceRestrictProtocols'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ServiceRestrictProtocols'
13:35 [32mControllerAffinityNode [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Affinity Node Simple

This Policy sets NodeAffinity keys, regardless of the Node Affinity selector or scheduling type. List out the keys you want to check to ensure you are using the right keys. This Policy supports the following Node Affinity types:
- preferredDuringSchedulingIgnoredDuringExecution
- requiredDuringSchedulingIgnoredDuringExecution


When working with Node Affinity, this policy will traverse through the entity and find the proper keys, regardless of affinity type. The follwing is an example of where the key is located. 

```
...
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: <keys>
```

https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/


# Settings
```yaml
  settings:
    parameters:
      - name: keys
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Affinity Node Simple
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: affinity-node-simple
  io.kubewarden.policy.description: |
    This Policy sets NodeAffinity keys, regardless of the Node Affinity selector or scheduling type. List out the keys you want to check to ensure you are using the right keys. This Policy supports the following Node Affinity types:
    - preferredDuringSchedulingIgnoredDuringExecution
    - requiredDuringSchedulingIgnoredDuringExecution
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/affinity-node-simple
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerAffinityNode'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerAffinityNode'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerAffinityNode'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerAffinityNode'
13:35 [32mControllerAffinityNodeSelector [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Affinity Node Selector

This Policy allows setting a key and value for `nodeSelector` when assigning pods to nodes. 

`nodeSelector` is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to scheduled on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well). 


When working with with `nodeSelector`, the indicated key-value pair will be matched to a node label.  

```
...
  spec:
    nodeSelector:
      <key>: <value>
```
https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector


# Settings
```yaml
  settings:
    parameters:
      - name: key
        type: string
        required: true
        value:
      - name: value
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Affinity Node Selector
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: affinity-node-selector
  io.kubewarden.policy.description: "This Policy allows setting a key and value for `nodeSelector` when assigning pods to nodes. \n\n`nodeSelector` is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to scheduled on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well). \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/affinity-node-selector
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerAffinityNodeSelector'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerAffinityNodeSelector'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerAffinityNodeSelector'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerAffinityNodeSelector'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerAffinityNodeSelector'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerAffinityNodeSelector'
13:35 [32mControllerAffinityPods [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Affinity Pod Simple

This Policy sets podAffinity keys, regardless of the Pod Affinity scheduling type. List out the keys you want to check for. This Policy supports the following Pod Affinity types:
- preferredDuringSchedulingIgnoredDuringExecution 
- requiredDuringSchedulingIgnoredDuringExecution 


When working with pod affinity, this Policy will traverse through the entity and find the proper keys, regardless of pod affinity type. The follwing is an example of where the key is located. 
```
...
  spec:
    affinity:
      podAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: <keys>
```
https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodAffinity


# Settings
```yaml
  settings:
    parameters:
      - name: keys
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Affinity Pod Simple
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: affinity-pod-simple
  io.kubewarden.policy.description: "This Policy sets podAffinity keys, regardless of the Pod Affinity scheduling type. List out the keys you want to check for. This Policy supports the following Pod Affinity types:\n- preferredDuringSchedulingIgnoredDuringExecution \n- requiredDuringSchedulingIgnoredDuringExecution \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/affinity-pod-simple
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerAffinityPods'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerAffinityPods'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerAffinityPods'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerAffinityPods'
13:35 [32mControllerAntiAffinityPods [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Antiaffinity Pod Simple

This Policy sets antiPodAffinity keys, regardless of the Anti Pod Affinity scheduling type. List out the keys you want to check for. This Policy supports the following Pod Anti-Affinity types:
- preferredDuringSchedulingIgnoredDuringExecution 
- requiredDuringSchedulingIgnoredDuringExecution 

There is 1 parameter for this Policy:
- keys (array) : The policy will check for `key` you are basing the anti-affinty on. 


When working with Pod Anti-Affinity, this Policy will traverse through the entity and find the proper keys, regardless of pod affinity type. The follwing is an example of where the key is located. 
```
...
  spec:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: <keys>
```       
https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodAffinity


# Settings
```yaml
  settings:
    parameters:
      - name: keys
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Antiaffinity Pod Simple
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: antiaffinity-pod-simple
  io.kubewarden.policy.description: "This Policy sets antiPodAffinity keys, regardless of the Anti Pod Affinity scheduling type. List out the keys you want to check for. This Policy supports the following Pod Anti-Affinity types:\n- preferredDuringSchedulingIgnoredDuringExecution \n- requiredDuringSchedulingIgnoredDuringExecution \n\nThere is 1 parameter for this Policy:\n- keys (array) : The policy will check for `key` you are basing the anti-affinty on. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/antiaffinity-pod-simple
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerAntiAffinityPods'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerAntiAffinityPods'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerAntiAffinityPods'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerAntiAffinityPods'
13:35 [32mControllerContainerEnforceEnvVar [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Container Enforce Environment Variable

This Policy checks whether an environment variable is missing or not. 


If you encounter a violation, ensure the environment variable is set. 


# Settings
```yaml
  settings:
    parameters:
      - name: envvar_name
        type: string
        required: true
        value:
      - name: app_name
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Enforce Environment Variable
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: container-enforce-environment-variable
  io.kubewarden.policy.description: "This Policy checks whether an environment variable is missing or not. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-enforce-environment-variable
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.2.i, hipaa.164.312.a.1
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
2024/12/12 13:35:55 Testing ControllerContainerEnforceEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerEnforceEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerEnforceEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerEnforceEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerEnforceEnvVar'
13:35 [32mControllerContainerProhibitEnvVar [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Container Prohibit Environment Variable

This Policy checks prohibits a specific environment variable. 


If you are encountered a violation, ensure the environment variable is not set. 


# Settings
```yaml
  settings:
    parameters:
      - name: envvar_name
        type: string
        required: true
        value:
      - name: app_name
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Prohibit Environment Variable
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: container-prohibit-environment-variable
  io.kubewarden.policy.description: "This Policy checks prohibits a specific environment variable. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-prohibit-environment-variable
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.2.1
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.2.i
2024/12/12 13:35:56 Testing ControllerContainerProhibitEnvVar policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerProhibitEnvVar'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerProhibitEnvVar'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerProhibitEnvVar'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerContainerProhibitEnvVar'
13:35 [32mControllerImageApprovedRegistry [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Approved Registry

This Policy is violated when container images are not using approved container registries. The Policy allows for you to add multiple registries. 


Ensure the image registry you are using matches the registries specified in the policy. If you are using multiple containers, be sure to check those as well. 

Replace the violating registry with one that is approved. 
```
...
  spec:
    template:
      spec:
        containers:
        - image:<registries>/container_name:tag
```


# Settings
```yaml
  settings:
    parameters:
      - name: registries
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Approved Registry
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: approved-registry
  io.kubewarden.policy.description: "This Policy is violated when container images are not using approved container registries. The Policy allows for you to add multiple registries. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/approved-registry
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: software-supply-chain
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.8
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerImageApprovedRegistry'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerImageApprovedRegistry'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerImageApprovedRegistry'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerImageApprovedRegistry'
13:35 [32mControllerImageName [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Containers Block Specific Image Names

This Policy prohibits images with certain image names from being deployed by specifying a list of unapproved names. 


Use an image that is not set in the Policy. 
```
...
  spec:
    containers:
    - image: registry/<image_names>:tag
```


# Settings
```yaml
  settings:
    parameters:
      - name: restricted_image_names
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Block Specific Image Names
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: containers-block-specific-image-names
  io.kubewarden.policy.description: "This Policy prohibits images with certain image names from being deployed by specifying a list of unapproved names. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-block-specific-image-names
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: software-supply-chain
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.5.1
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.1.2
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.4.1.5
  io.kubewarden.policy.standards.gdpr: gdpr.24, gdpr.25, gdpr.32
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.8
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerImageName'
opa test policy.rego tests/*.rego
PASS: 2/2
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerImageName'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerImageName'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerImageName'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerImageName'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerImageName'
13:35 [32mControllerMissingLabelValue [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
contains_kind(kind, kinds) {
# Metadata Missing Label And Value

Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensures a key and value are set in the entity's `metadata.labels` path. The Policy detects the presence of the following: 

### label
A label key of your choosing. 

### value
A label value of your choosing.


Add a custom label and value to `metadata.labels`.

```
metadata:
  labels:
    <label>: <value>
```  
For additional information, please check
* https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels 


# Settings
```yaml
  settings:
    parameters:
      - name: label
        type: string
        required: true
        value:
      - name: value
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Metadata Missing Label And Value
  io.artifacthub.keywords: ""
  io.artifacthub.resources: DaemonSet, Deployment, Job, StatefulSet
  io.kubewarden.policy.title: metadata-missing-label-and-value
  io.kubewarden.policy.description: "Custom labels can help enforce organizational standards for each artifact deployed. This Policy ensures a key and value are set in the entity's `metadata.labels` path. The Policy detects the presence of the following: \n\n### label\nA label key of your choosing. \n\n### value\nA label value of your choosing.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/metadata-missing-label-and-value
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: low
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingLabelValue'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingLabelValue'
2024/12/12 13:35:57 Testing ControllerMissingLabelValue policy
2024/12/12 13:35:57 Testing ControllerMissingLabelValue policy failed: [{"issue_detected":true,"msg":"The key:value pair 'null:null' was not found; detected labels: '{\"app\": \"demoservice\"}","recommended_value":null,"violating_key":"metadata.labels.null"}]
13:35 [31m  Yaml tests failed[0m
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingLabelValue'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingLabelValue'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingLabelValue'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/ControllerMissingLabelValue'
13:35 [32mControllerMissingMatchLabelKey [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Missing Matchlabels Key

This Policy will enforce a custom match label key in `spec.selector`.


Add a custom label to `matchLabels`. 
```
...
  spec:
    selector:
      matchLabels:
        <label>: value
```
https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#resources-that-support-set-based-requirements


# Settings
```yaml
  settings:
    parameters:
      - name: label
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Missing Matchlabels Key
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: missing-matchlabels-key
  io.kubewarden.policy.description: |
    This Policy will enforce a custom match label key in `spec.selector`.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/missing-matchlabels-key
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: low
2024/12/12 13:35:57 Testing ControllerMissingMatchLabelKey policy
2024/12/12 13:35:57 Testing ControllerMissingMatchLabelKey policy failed: [{"issue_detected":true,"msg":"Expecting key 'null'; found '{\"app\": \"demoservice\"}'","violating_key":"spec.selector.matchLabels"}]
13:35 [31m  Yaml tests failed[0m
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingMatchLabelKey'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingMatchLabelKey'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingMatchLabelKey'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerMissingMatchLabelKey'
13:35 [32mControllerProbesCustom [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Container Custom Probe

This Policy allows defining the various container probes, and ensures consistent probes are configured across all containers. You can set the type of probe `livenessProbe`, `readinessProbe`, `startupProbe` along with a `command`, a `path` and a `port`. 


```
...
  spec:
    containers:
    - container1
      <probe_type>:
        exec:
          command: 
          - <command>
    - container2
      <probe_type>:
        httpGet:
          path: <path>
          port: <port>
```
https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-tcp-liveness-probe


# Settings
```yaml
  settings:
    parameters:
      - name: probe_type
        type: string
        required: true
        value:
      - name: command
        type: array
        required: false
        value:
      - name: path
        type: string
        required: false
        value:
      - name: port
        type: integer
        required: false
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Custom Probe
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: container-custom-probe
  io.kubewarden.policy.description: "This Policy allows defining the various container probes, and ensures consistent probes are configured across all containers. You can set the type of probe `livenessProbe`, `readinessProbe`, `startupProbe` along with a `command`, a `path` and a `port`. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-custom-probe
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: reliability
  io.kubewarden.policy.severity: high
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerProbesCustom'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerProbesCustom'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerProbesCustom'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerProbesCustom'
13:35 [32mControllerProbesNamedPort [input/examples][0m
	contains_kind(input.review.object.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
	input.review.object.kind == "Pod"
	input.review.object.kind == "CronJob"
contains_kind(kind, kinds) {
# Container Named Port

This Policy checks the named port of your containers to see if they are set in your container probes. 


https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes


# Settings
```yaml
  settings:
    parameters:
      - name: probe
        type: string
        required: true
        value: livenessProbe
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Named Port
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: container-named-port
  io.kubewarden.policy.description: "This Policy checks the named port of your containers to see if they are set in your container probes. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-named-port
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: best-practices
  io.kubewarden.policy.severity: high
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerProbesNamedPort'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerProbesNamedPort'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerProbesNamedPort'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerProbesNamedPort'
13:35 [32mControllerResourcesMaxCPULimits [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Container Maximum CPU Limits

This Policy is to ensure a maximum CPU Limit value is set. The policy will fail if the set CPU limit is higher than the one specified in the policy. You must specify a unit size (m, g, etc).


```
...
  spec:
    containers:
    - resources:
        limits:
          cpu: <size>
```
https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/


# Settings
```yaml
  settings:
    parameters:
      - name: size
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Maximum CPU Limits
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: container-maximum-cpu-limits
  io.kubewarden.policy.description: |
    This Policy is to ensure a maximum CPU Limit value is set. The policy will fail if the set CPU limit is higher than the one specified in the policy. You must specify a unit size (m, g, etc).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-maximum-cpu-limits
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxCPULimits'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxCPULimits'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxCPULimits'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxCPULimits'
13:35 [32mControllerResourcesMaxCPURequests [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Container Maximum CPU Requests

This Policy is to ensure a maxiumum CPU Request value is set. The policy will fail if the set CPU request is higher than the one specified in the policy. You must specify a unit size (m, g, etc).


```
 ...
   spec:
     containers:
     - resources:
         requests:
           cpu: <size>
 ```
 https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/


# Settings
```yaml
  settings:
    parameters:
      - name: size
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Maximum CPU Requests
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: container-maximum-cpu-requests
  io.kubewarden.policy.description: |
    This Policy is to ensure a maxiumum CPU Request value is set. The policy will fail if the set CPU request is higher than the one specified in the policy. You must specify a unit size (m, g, etc).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-maximum-cpu-requests
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxCPURequests'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxCPURequests'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxCPURequests'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxCPURequests'
13:35 [32mControllerResourcesMaxMemoryLimits [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Container Maximum Memory Limits

This Policy is to ensure a maximum Memory Limit value is set. The policy will fail if the set Memory limit is higher than the one specified in the policy. You must specify a unit size (e.g Mi, Gi, etc).


```
...
  spec:
    containers:
    - resources:
        limits:
          memory: <size>
```

https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/


# Settings
```yaml
  settings:
    parameters:
      - name: size
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Maximum Memory Limits
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: container-maximum-memory-limits
  io.kubewarden.policy.description: |
    This Policy is to ensure a maximum Memory Limit value is set. The policy will fail if the set Memory limit is higher than the one specified in the policy. You must specify a unit size (e.g Mi, Gi, etc).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-maximum-memory-limits
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxMemoryLimits'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxMemoryLimits'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxMemoryLimits'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxMemoryLimits'
13:36 [32mControllerResourcesMaxMemoryRequests [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Container Maximum Memory Requests

This Policy is to ensure a maximum Memory Request value is set. The policy will fail if the set Memory request is higher than the one specified in the policy. You must specify a unit size (e.g Mi, Gi, etc).


```
...
  spec:
    containers:
    - resources:
        requests:
          memory: <size>
```
https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/


# Settings
```yaml
  settings:
    parameters:
      - name: size
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Maximum Memory Requests
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: container-maximum-memory-requests
  io.kubewarden.policy.description: |
    This Policy is to ensure a maximum Memory Request value is set. The policy will fail if the set Memory request is higher than the one specified in the policy. You must specify a unit size (e.g Mi, Gi, etc).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-maximum-memory-requests
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxMemoryRequests'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxMemoryRequests'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxMemoryRequests'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMaxMemoryRequests'
13:36 [32mControllerResourcesMinCPULimits [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Container Minimum CPU Limits

This Policy is to ensure a minimum CPU Limit value is set. The policy will fail if the set CPU limit is lower than the one specified in the policy. You must specify a unit size (m, g, etc).


```
...
  spec:
    containers:
    - resources:
        limits:
          cpu: <size>
```
https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/


# Settings
```yaml
  settings:
    parameters:
      - name: size
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Minimum CPU Limits
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: container-minimum-cpu-limits
  io.kubewarden.policy.description: |
    This Policy is to ensure a minimum CPU Limit value is set. The policy will fail if the set CPU limit is lower than the one specified in the policy. You must specify a unit size (m, g, etc).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-minimum-cpu-limits
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinCPULimits'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinCPULimits'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinCPULimits'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinCPULimits'
13:36 [32mControllerResourcesMinCPURequests [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Container Minimum CPU Requests

This Policy is to ensure a minimum CPU Request value is set. The policy will fail if the set CPU request is lower than the one specified in the policy. You must specify a unit size (m, g, etc).


```
...
  spec:
    containers:
    - resources:
        requests:
          cpu: <size>
```
https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/


# Settings
```yaml
  settings:
    parameters:
      - name: size
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Minimum CPU Requests
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: container-minimum-cpu-requests
  io.kubewarden.policy.description: |
    This Policy is to ensure a minimum CPU Request value is set. The policy will fail if the set CPU request is lower than the one specified in the policy. You must specify a unit size (m, g, etc).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-minimum-cpu-requests
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinCPURequests'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinCPURequests'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinCPURequests'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinCPURequests'
13:36 [32mControllerResourcesMinMemoryLimits [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Container Minimum Memory Limits

This Policy is to ensure a minimum Memory Limit value is set. The policy will fail if the set Memory limit is lower than the one specified in the policy. You must specify a unit size (e.g Mi, Gi, etc).


```
...
  spec:
    containers:
    - resources:
        limits:
          memory: <size>
```
https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/


# Settings
```yaml
  settings:
    parameters:
      - name: size
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Minimum Memory Limits
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: container-minimum-memory-limits
  io.kubewarden.policy.description: |
    This Policy is to ensure a minimum Memory Limit value is set. The policy will fail if the set Memory limit is lower than the one specified in the policy. You must specify a unit size (e.g Mi, Gi, etc).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-minimum-memory-limits
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinMemoryLimits'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinMemoryLimits'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinMemoryLimits'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinMemoryLimits'
13:36 [32mControllerResourcesMinMemoryRequests [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Container Minimum Memory Requests

This Policy is to ensure a minimum Memory Request value is set. The policy will fail if the set Memory request is lower than the one specified in the policy. You must specify a unit size (e.g Mi, Gi, etc).


```
...
  spec:
    containers:
    - resources:
        requests:
          memory: <size>
```
https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/


# Settings
```yaml
  settings:
    parameters:
      - name: size
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Container Minimum Memory Requests
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: container-minimum-memory-requests
  io.kubewarden.policy.description: |
    This Policy is to ensure a minimum Memory Request value is set. The policy will fail if the set Memory request is lower than the one specified in the policy. You must specify a unit size (e.g Mi, Gi, etc).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/container-minimum-memory-requests
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinMemoryRequests'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinMemoryRequests'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinMemoryRequests'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerResourcesMinMemoryRequests'
13:36 [32mControllerSpecGeneric [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Containers Are Missing A Controller Spec Key

This Policy will allow you to set your own Policies for the Pod spec. 


Ensure the key you have specified in your constraint exists in your workloads. 
```
...
  spec:
    <controller_spec_key>
```


# Settings
```yaml
  settings:
    parameters:
      - name: controller_spec_key
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Are Missing A Controller Spec Key
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: containers-are-missing-a-controller-spec-key
  io.kubewarden.policy.description: "This Policy will allow you to set your own Policies for the Pod spec. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-are-missing-a-controller-spec-key
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerSpecGeneric'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerSpecGeneric'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerSpecGeneric'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerSpecGeneric'
13:36 [32mControllerSpecTemplateLabels [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
contains_kind(kind, kinds) {
# Containers Are Missing A Spec Template Label

This Policy allows setting a custom label in `spec.template.metadata`.


Add a custom label to `spec.template.metadata.label` as specified in your constraint.  
```
...
  spec:
    template:
      metadata:
        labels:
          <label>
```
https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#selector


# Settings
```yaml
  settings:
    parameters:
      - name: label
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Containers Are Missing A Spec Template Label
  io.artifacthub.keywords: ""
  io.artifacthub.resources: DaemonSet, Deployment, Job, StatefulSet
  io.kubewarden.policy.title: containers-are-missing-a-spec-template-label
  io.kubewarden.policy.description: |
    This Policy allows setting a custom label in `spec.template.metadata`.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/containers-are-missing-a-spec-template-label
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: low
2024/12/12 13:36:02 Testing ControllerSpecTemplateLabels policy
2024/12/12 13:36:02 Testing ControllerSpecTemplateLabels policy failed: [{"issue_detected":true,"msg":"you are missing a template spec label with the key 'null'","violating_key":"spec.template.metadata.labels"}]
13:36 [31m  Yaml tests failed[0m
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerSpecTemplateLabels'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerSpecTemplateLabels'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerSpecTemplateLabels'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/ControllerSpecTemplateLabels'
13:36 [32mFluxBucketApprovedRegion [input/examples][0m
# Bucket Approved Region

Bucket region must be one of the approved regions.

Set the region of the Bucket to one of the approved regions.

# Settings
```yaml
  settings:
    parameters:
      - name: regions
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Bucket`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [buckets]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Bucket Approved Region
  io.artifacthub.keywords: flux
  io.artifacthub.resources: Bucket
  io.kubewarden.policy.title: bucket-approved-region
  io.kubewarden.policy.description: "Bucket region must be one of the approved regions."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/bucket-approved-region
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: best-practices
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketApprovedRegion'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketApprovedRegion'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketApprovedRegion'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketApprovedRegion'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketApprovedRegion'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketApprovedRegion'
13:36 [32mFluxBucketEndpointDomain [input/examples][0m
# Bucket Endpoint Domain

Bucket endpoint domain must be one of the trusted domains.

Update the Bucket endpoint domain to one of the trusted domains.

# Settings
```yaml
  settings:
    parameters:
      - name: domains
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Bucket`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [buckets]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Bucket Endpoint Domain
  io.artifacthub.keywords: flux
  io.artifacthub.resources: Bucket
  io.kubewarden.policy.title: bucket-endpoint-domain
  io.kubewarden.policy.description: "Bucket endpoint domain must be one of the trusted domains."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/bucket-endpoint-domain
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: security
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketEndpointDomain'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketEndpointDomain'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketEndpointDomain'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketEndpointDomain'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketEndpointDomain'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxBucketEndpointDomain'
13:36 [32mFluxGitRepositoryIgonreSuffixes [input/examples][0m
# GitRepository Ignore Suffixes

GitRepository resources must include specific suffixes in the spec.ignore field which determines the files to be ignored before making a commit.

Ensure the spec.ignore field in the GitRepository resource includes the required suffixes. The specified suffixes correspond to the file types that should not be included in the repository commit.

# Settings
```yaml
  settings:
    parameters:
      - name: suffixes
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`GitRepository`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [gitrepositories]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: GitRepository Ignore Suffixes
  io.artifacthub.keywords: flux
  io.artifacthub.resources: GitRepository
  io.kubewarden.policy.title: gitrepository-ignore-suffixes
  io.kubewarden.policy.description: "GitRepository resources must include specific suffixes in the spec.ignore field which determines the files to be ignored before making a commit."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/gitrepository-ignore-suffixes
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: best-practices
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryIgonreSuffixes'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryIgonreSuffixes'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryIgonreSuffixes'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryIgonreSuffixes'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryIgonreSuffixes'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryIgonreSuffixes'
13:36 [32mFluxGitRepositoryOrganizationDomains [input/examples][0m
# GitRepository Organization Domains

GitRepository resources must only be from allowed organization domains.

Ensure the GitRepository URL belongs to an allowed organization domain.

# Settings
```yaml
  settings:
    parameters:
      - name: domains
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`GitRepository`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [gitrepositories]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: GitRepository Organization Domains
  io.artifacthub.keywords: flux
  io.artifacthub.resources: GitRepository
  io.kubewarden.policy.title: gitrepository-organization-domains
  io.kubewarden.policy.description: "GitRepository resources must only be from allowed organization domains."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/gitrepository-organization-domains
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: software-supply-chain
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryOrganizationDomains'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryOrganizationDomains'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryOrganizationDomains'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryOrganizationDomains'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryOrganizationDomains'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryOrganizationDomains'
13:36 [32mFluxGitRepositorySpecificBranch [input/examples][0m
# GitRepository Specific Branch

GitRepository resources must reference a specific branch, e.g. 'main'.

Ensure the GitRepository ref field points to the specific branch (e.g. 'main').

# Settings
```yaml
  settings:
    parameters:
      - name: branch
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`GitRepository`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [gitrepositories]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: GitRepository Specific Branch
  io.artifacthub.keywords: flux
  io.artifacthub.resources: GitRepository
  io.kubewarden.policy.title: gitrepository-specific-branch
  io.kubewarden.policy.description: "GitRepository resources must reference a specific branch, e.g. 'main'."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/gitrepository-specific-branch
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: best-practices
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositorySpecificBranch'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositorySpecificBranch'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositorySpecificBranch'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositorySpecificBranch'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositorySpecificBranch'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositorySpecificBranch'
13:36 [32mFluxGitRepositoryUntrustedDomains [input/examples][0m
# GitRepository Untrusted Domains

GitRepository resources must not use targets from untrusted domains.

Ensure the GitRepository URL does not belong to an untrusted domain.

# Settings
```yaml
  settings:
    parameters:
      - name: untrusted_domains
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`GitRepository`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [gitrepositories]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: GitRepository Untrusted Domains
  io.artifacthub.keywords: flux
  io.artifacthub.resources: GitRepository
  io.kubewarden.policy.title: gitrepository-untrusted-domains
  io.kubewarden.policy.description: "GitRepository resources must not use targets from untrusted domains."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/gitrepository-untrusted-domains
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: security
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryUntrustedDomains'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryUntrustedDomains'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryUntrustedDomains'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryUntrustedDomains'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryUntrustedDomains'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxGitRepositoryUntrustedDomains'
13:36 [32mFluxHelmReleaseMaxHistory [input/examples][0m
# Helm Release Max History

HelmRelease maxHistory cannot exceed the specified value.

Set the maxHistory of the HelmRelease to a value less than or equal to the specified limit.

# Settings
```yaml
  settings:
    parameters:
      - name: max_history
        type: integer
        required: true
        value: 100
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`HelmRelease`
rules:
  - apiGroups: [helm.toolkit.fluxcd.io]
    apiVersions: [v2]
    resources: [helmreleases]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Helm Release Max History
  io.artifacthub.keywords: flux
  io.artifacthub.resources: HelmRelease
  io.kubewarden.policy.title: helm-release-max-history
  io.kubewarden.policy.description: "HelmRelease maxHistory cannot exceed the specified value."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/helm-release-max-history
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: best-practices
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseMaxHistory'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseMaxHistory'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseMaxHistory'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseMaxHistory'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseMaxHistory'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseMaxHistory'
13:36 [32mFluxHelmReleaseRemediationRetries [input/examples][0m
# Helm Release Remediation Retries

HelmRelease remediation retries must be within the specified lower and upper bounds.

Set the remediation retries value of the HelmRelease to a value within the allowed range.

# Settings
```yaml
  settings:
    parameters:
      - name: lower_bound
        type: integer
        required: true
        value: 1
      - name: upper_bound
        type: integer
        required: true
        value: 10
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`HelmRelease`
rules:
  - apiGroups: [helm.toolkit.fluxcd.io]
    apiVersions: [v2]
    resources: [helmreleases]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Helm Release Remediation Retries
  io.artifacthub.keywords: flux
  io.artifacthub.resources: HelmRelease
  io.kubewarden.policy.title: helm-release-remediation-retries
  io.kubewarden.policy.description: "HelmRelease remediation retries must be within the specified lower and upper bounds."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/helm-release-remediation-retries
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: reliability
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseRemediationRetries'
opa test policy.rego tests/*.rego
PASS: 9/9
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseRemediationRetries'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseRemediationRetries'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseRemediationRetries'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseRemediationRetries'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseRemediationRetries'
13:36 [32mFluxHelmReleaseServiceAccountName [input/examples][0m
# Helm Release Service Account Name

HelmRelease serviceAccountName must contain a value from parameters.service_account_names

Set the serviceAccountName of the HelmRelease to one of the allowed service accounts.

# Settings
```yaml
  settings:
    parameters:
      - name: service_account_names
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`HelmRelease`
rules:
  - apiGroups: [helm.toolkit.fluxcd.io]
    apiVersions: [v2]
    resources: [helmreleases]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Helm Release Service Account Name
  io.artifacthub.keywords: flux
  io.artifacthub.resources: HelmRelease
  io.kubewarden.policy.title: helm-release-service-account-name
  io.kubewarden.policy.description: "HelmRelease serviceAccountName must contain a value from parameters.service_account_names"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/helm-release-service-account-name
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseServiceAccountName'
opa test policy.rego tests/*.rego
PASS: 5/5
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseServiceAccountName'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseServiceAccountName'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseServiceAccountName'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseServiceAccountName'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseServiceAccountName'
13:36 [32mFluxHelmReleaseStorageNamespace [input/examples][0m
# Helm Release Storage Namespace

HelmRelease storageNamespace must contain a value from storage_namespaces.

Set the storageNamespace of the HelmRelease to one of the allowed namespaces.

# Settings
```yaml
  settings:
    parameters:
      - name: storage_namespaces
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`HelmRelease`
rules:
  - apiGroups: [helm.toolkit.fluxcd.io]
    apiVersions: [v2]
    resources: [helmreleases]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Helm Release Storage Namespace
  io.artifacthub.keywords: flux
  io.artifacthub.resources: HelmRelease
  io.kubewarden.policy.title: helm-release-storage-namespace
  io.kubewarden.policy.description: "HelmRelease storageNamespace must contain a value from storage_namespaces."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/helm-release-storage-namespace
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseStorageNamespace'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseStorageNamespace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseStorageNamespace'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseStorageNamespace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseStorageNamespace'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseStorageNamespace'
13:36 [32mFluxHelmReleaseTargetNameSpace [input/examples][0m
# Helm Release Target Namespace

HelmRelease targetNamespace must be one of the allowed targetNamespace list.

Set the targetNamespace of the HelmRelease to one of the allowed namespaces.

# Settings
```yaml
  settings:
    parameters:
      - name: target_namespaces
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`HelmRelease`
rules:
  - apiGroups: [helm.toolkit.fluxcd.io]
    apiVersions: [v2]
    resources: [helmreleases]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Helm Release Target Namespace
  io.artifacthub.keywords: flux
  io.artifacthub.resources: HelmRelease
  io.kubewarden.policy.title: helm-release-target-namespace
  io.kubewarden.policy.description: "HelmRelease targetNamespace must be one of the allowed targetNamespace list."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/helm-release-target-namespace
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseTargetNameSpace'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseTargetNameSpace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseTargetNameSpace'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseTargetNameSpace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseTargetNameSpace'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseTargetNameSpace'
13:36 [32mFluxHelmReleaseValuesFromConfigMaps [input/examples][0m
# Helm Release Values From

HelmRelease valuesFrom must use correctly configured ConfigMaps.

Ensure that the HelmRelease uses allowed ConfigMaps in the valuesFrom field.

# Settings
```yaml
  settings:
    parameters:
      - name: configmaps
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`HelmRelease`
rules:
  - apiGroups: [helm.toolkit.fluxcd.io]
    apiVersions: [v2]
    resources: [helmreleases]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Helm Release Values From
  io.artifacthub.keywords: flux
  io.artifacthub.resources: HelmRelease
  io.kubewarden.policy.title: helm-release-values-from-configmaps
  io.kubewarden.policy.description: "HelmRelease valuesFrom must use correctly configured ConfigMaps."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/helm-release-values-from-configmaps
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: best-practices
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseValuesFromConfigMaps'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseValuesFromConfigMaps'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseValuesFromConfigMaps'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseValuesFromConfigMaps'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseValuesFromConfigMaps'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmReleaseValuesFromConfigMaps'
13:36 [32mFluxHelmRepositoryURL [input/examples][0m
# Helm Repo URL Should Be in Organisation Domain

The URL of a Helm repository should only be from the specified organisation domain.

Change the URL of the Helm repository to one that is from the organisation domain.

# Settings
```yaml
  settings:
    parameters:
      - name: domains
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`HelmRepository`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [helmrepositories]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Helm Repo URL Should Be in Organisation Domain
  io.artifacthub.keywords: flux
  io.artifacthub.resources: HelmRepository
  io.kubewarden.policy.title: helm-repo-url
  io.kubewarden.policy.description: "The URL of a Helm repository should only be from the specified organisation domain."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/helm-repo-url
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: software-supply-chain
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmRepositoryURL'
opa test policy.rego tests/*.rego
PASS: 5/5
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmRepositoryURL'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmRepositoryURL'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmRepositoryURL'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmRepositoryURL'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxHelmRepositoryURL'
13:36 [32mFluxKustomizationDecryptionProvider [input/examples][0m
# Kustomization Decryption Provider

Spec.decryption.provider must be set to one of decryption_providers.

Set the Kustomization's Spec.decryption.provider to a valid value from the decryption_providers.

# Settings
```yaml
  settings:
    parameters:
      - name: decryption_providers
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Kustomization`
rules:
  - apiGroups: [kustomize.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [kustomizations]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Kustomization Decryption Provider
  io.artifacthub.keywords: flux
  io.artifacthub.resources: Kustomization
  io.kubewarden.policy.title: kustomization-decryption-provider
  io.kubewarden.policy.description: "Spec.decryption.provider must be set to one of decryption_providers."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/kustomization-decryption-provider
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: reliability
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationDecryptionProvider'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationDecryptionProvider'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationDecryptionProvider'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationDecryptionProvider'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationDecryptionProvider'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationDecryptionProvider'
13:36 [32mFluxKustomizationPaths [input/examples][0m
# Kustomization Excluded Paths

spec.path cannot be one of excludedPathsList[]

Update the spec.path to a value not in the excluded paths list.

# Settings
```yaml
  settings:
    parameters:
      - name: exclude_paths
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Kustomization`
rules:
  - apiGroups: [kustomize.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [kustomizations]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Kustomization Excluded Paths
  io.artifacthub.keywords: flux
  io.artifacthub.resources: Kustomization
  io.kubewarden.policy.title: kustomization-excluded-paths
  io.kubewarden.policy.description: "spec.path cannot be one of excludedPathsList[]"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/kustomization-excluded-paths
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standard
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationPaths'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationPaths'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationPaths'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationPaths'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationPaths'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationPaths'
13:36 [32mFluxKustomizationTargetNamespace [input/examples][0m
# Kustomization Target Namespace

Kustomization targetNamespace must be one of the allowed targetNamespace list.

Set the targetNamespace of the Kustomization to one of the allowed namespaces.

# Settings
```yaml
  settings:
    parameters:
      - name: target_namespaces
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value: ""
      - name: exclude_label_value
        type: string
        required: false
        value: ""
```

# Resources
Policy applies to resources kinds:
`Kustomization`
rules:
  - apiGroups: [kustomize.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [kustomizations]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Kustomization Target Namespace
  io.artifacthub.keywords: flux
  io.artifacthub.resources: Kustomization
  io.kubewarden.policy.title: kustomization-target-namespace
  io.kubewarden.policy.description: "Kustomization targetNamespace must be one of the allowed targetNamespace list."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/kustomization-target-namespace
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: best-practices
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationTargetNamespace'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationTargetNamespace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationTargetNamespace'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationTargetNamespace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationTargetNamespace'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizationTargetNamespace'
13:36 [32mFluxKustomizeImagesRequirement [input/examples][0m
# Kustomization Images Requirement

The 'spec.images' field in a Kustomization object must be enabled or disabled based on the policy input images_required.

Update the 'spec.images' field in the Kustomization object based on the policy input images_required.

# Settings
```yaml
  settings:
    parameters:
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value: ""
      - name: exclude_label_value
        type: string
        required: false
        value: ""
      - name: images_required
        type: boolean
        required: true
        value: true
```

# Resources
Policy applies to resources kinds:
`Kustomization`
rules:
  - apiGroups: [kustomize.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [kustomizations]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Kustomization Images Requirement
  io.artifacthub.keywords: flux
  io.artifacthub.resources: Kustomization
  io.kubewarden.policy.title: kustomization-images-requirement
  io.kubewarden.policy.description: "The 'spec.images' field in a Kustomization object must be enabled or disabled based on the policy input images_required."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/kustomization-images-requirement
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standard
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizeImagesRequirement'
opa test policy.rego tests/*.rego
PASS: 6/6
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizeImagesRequirement'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizeImagesRequirement'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizeImagesRequirement'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizeImagesRequirement'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizeImagesRequirement'
13:36 [32mFluxKustomizePatchesRequirement [input/examples][0m
# Kustomization Patches

Kustomization patches should be enabled or disabled based on input.

Update the 'spec.patches' field in the Kustomization object according to the input.

# Settings
```yaml
  settings:
    parameters:
      - name: patches_required
        type: boolean
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Kustomization`
rules:
  - apiGroups: [kustomize.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [kustomizations]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Kustomization Patches
  io.artifacthub.keywords: flux
  io.artifacthub.resources: Kustomization
  io.kubewarden.policy.title: kustomization-patches-requirement
  io.kubewarden.policy.description: "Kustomization patches should be enabled or disabled based on input."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/kustomization-patches-requirement
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standard
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizePatchesRequirement'
opa test policy.rego tests/*.rego
PASS: 6/6
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizePatchesRequirement'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizePatchesRequirement'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizePatchesRequirement'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizePatchesRequirement'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizePatchesRequirement'
13:36 [32mFluxKustomizePrune [input/examples][0m
# Kustomization Prune

The 'spec.prune' field in the Kustomization object must be set according to the input parameter 'prune'.

Update the 'spec.prune' field in the Kustomization object to match the required value.

# Settings
```yaml
  settings:
    parameters:
      - name: prune
        type: boolean
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`Kustomization`
rules:
  - apiGroups: [kustomize.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [kustomizations]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Kustomization Prune
  io.artifacthub.keywords: flux
  io.artifacthub.resources: Kustomization
  io.kubewarden.policy.title: kustomization-prune
  io.kubewarden.policy.description: "The 'spec.prune' field in the Kustomization object must be set according to the input parameter 'prune'."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/kustomization-prune
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standard
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizePrune'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizePrune'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizePrune'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizePrune'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizePrune'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxKustomizePrune'
13:36 [32mFluxOCIRepositoryIgonreSuffixes [input/examples][0m
# OCIRepository Ignore Suffixes

OCIRepository resources must include specific suffixes in the spec.ignore field which determines the files to be ignored before making a commit..

Ensure the spec.ignore field in the OCIRepository resource includes the required suffixes. The specified suffixes correspond to the file types that should not be included in the repository commit.

# Settings
```yaml
  settings:
    parameters:
      - name: suffixes
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`OCIRepository`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1beta2]
    resources: [ocirepositories]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: OCIRepository Ignore Suffixes
  io.artifacthub.keywords: flux, oci, suffixes
  io.artifacthub.resources: OCIRepository
  io.kubewarden.policy.title: ocirepository-ignore-suffixes
  io.kubewarden.policy.description: "OCIRepository resources must include specific suffixes in the spec.ignore field which determines the files to be ignored before making a commit.."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/ocirepository-ignore-suffixes
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: best-practices
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryIgonreSuffixes'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryIgonreSuffixes'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryIgonreSuffixes'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryIgonreSuffixes'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryIgonreSuffixes'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryIgonreSuffixes'
13:36 [32mFluxOCIRepositoryLayerSelector [input/examples][0m
# OCIRepository Layer Selector

OCIRepository layer selector must only reference predefined media/operation type.

Ensure the OCIRepository layer selector refers to a predefined media and operation type.

# Settings
```yaml
  settings:
    parameters:
      - name: media_types
        type: array
        required: true
        value:
      - name: operations
        type: array
        required: true
        value: ["extract"]
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`OCIRepository`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1beta2]
    resources: [ocirepositories]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: OCIRepository Layer Selector
  io.artifacthub.keywords: flux
  io.artifacthub.resources: OCIRepository
  io.kubewarden.policy.title: ocirepository-layer-selector
  io.kubewarden.policy.description: "OCIRepository layer selector must only reference predefined media/operation type."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/ocirepository-layer-selector
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: best-practices
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryLayerSelector'
opa test policy.rego tests/*.rego
PASS: 5/5
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryLayerSelector'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryLayerSelector'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryLayerSelector'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryLayerSelector'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryLayerSelector'
13:36 [32mFluxOCIRepositoryOrganizationDomains [input/examples][0m
# OCIRepository Organization Domains

OCIRepository resources must only be from allowed organization domains.

Ensure the OCIRepository URL belongs to an allowed organization domain.

# Settings
```yaml
  settings:
    parameters:
      - name: domains
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`OCIRepository`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1beta2]
    resources: [ocirepositories]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: OCIRepository Organization Domains
  io.artifacthub.keywords: flux
  io.artifacthub.resources: OCIRepository
  io.kubewarden.policy.title: ocirepository-organization-domains
  io.kubewarden.policy.description: "OCIRepository resources must only be from allowed organization domains."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/ocirepository-organization-domains
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: security
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryOrganizationDomains'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryOrganizationDomains'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryOrganizationDomains'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryOrganizationDomains'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryOrganizationDomains'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryOrganizationDomains'
13:36 [32mFluxOCIRepositoryPatchAnnotation [input/examples][0m
# OCIRepository Patch Annotation

OCIRepository resources must have a patch annotation that matches the provider.

Ensure the OCIRepository has a patch annotation matching the provider.

# Settings
```yaml
  settings:
    parameters:
      - name: provider
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`OCIRepository`
rules:
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1beta2]
    resources: [ocirepositories]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: OCIRepository Patch Annotation
  io.artifacthub.keywords: flux
  io.artifacthub.resources: OCIRepository
  io.kubewarden.policy.title: ocirepository-patch-annotation
  io.kubewarden.policy.description: "OCIRepository resources must have a patch annotation that matches the provider."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/ocirepository-patch-annotation
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: best-practices
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryPatchAnnotation'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryPatchAnnotation'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryPatchAnnotation'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryPatchAnnotation'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryPatchAnnotation'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxOCIRepositoryPatchAnnotation'
13:36 [32mFluxResourceReconcileInterval [input/examples][0m
# Resource Reconcile Interval Must Be Set Between Lower and Upper Bound

The reconcile interval of a Resource must be set between a lower and upper bound, lower_bound & upper_bound must be in seconds .

Set the reconcile interval of the Resource between the specified lower and upper bounds.

# Settings
```yaml
  settings:
    parameters:
      - name: lower_bound
        type: integer
        required: true
        value: 1
      - name: upper_bound
        type: integer
        required: true
        value: 1000
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value: ""
      - name: exclude_label_value
        type: string
        required: false
        value: ""
```

# Resources
Policy applies to resources kinds:
`HelmRelease`, `GitRepository`, `OCIRepository`, `Bucket`, `HelmChart`, `HelmRepository`, `Kustomization`
rules:
  - apiGroups: [helm.toolkit.fluxcd.io]
    apiVersions: [v2]
    resources: [helmreleases]
    operations: [CREATE, UPDATE]
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [gitrepositories, ocirepositories, buckets, helmcharts, helmrepositories]
    operations: [CREATE, UPDATE]
  - apiGroups: [kustomize.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [kustomizations]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Resource Reconcile Interval Must Be Set Between Lower and Upper Bound
  io.artifacthub.keywords: flux
  io.artifacthub.resources: HelmRelease, GitRepository, OCIRepository, Bucket, HelmChart, HelmRepository, Kustomization
  io.kubewarden.policy.title: resource-reconcile-interval
  io.kubewarden.policy.description: "The reconcile interval of a Resource must be set between a lower and upper bound, lower_bound & upper_bound must be in seconds ."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/resource-reconcile-interval
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: reliability
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxResourceReconcileInterval'
opa test policy.rego tests/*.rego
PASS: 5/5
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxResourceReconcileInterval'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxResourceReconcileInterval'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxResourceReconcileInterval'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxResourceReconcileInterval'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxResourceReconcileInterval'
13:36 [32mFluxResourceWaiverList [input/examples][0m
# Resource Suspend Waiver

Resource cannot be suspended unless it's on the waiver list.

Add the Resource to the waiver list or set 'suspend' to false.

# Settings
```yaml
  settings:
    parameters:
      - name: waiver_list
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value: []
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:
`HelmRelease`, `GitRepository`, `OCIRepository`, `Bucket`, `HelmChart`, `HelmRepository`, `Kustomization`
rules:
  - apiGroups: [helm.toolkit.fluxcd.io]
    apiVersions: [v2]
    resources: [helmreleases]
    operations: [CREATE, UPDATE]
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [gitrepositories, ocirepositories, buckets, helmcharts, helmrepositories]
    operations: [CREATE, UPDATE]
  - apiGroups: [kustomize.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [kustomizations]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Resource Suspend Waiver
  io.artifacthub.keywords: flux
  io.artifacthub.resources: HelmRelease, GitRepository, OCIRepository, Bucket, HelmChart, HelmRepository, Kustomization
  io.kubewarden.policy.title: resource-suspend-waiver
  io.kubewarden.policy.description: "Resource cannot be suspended unless it's on the waiver list."
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/resource-suspend-waiver
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxResourceWaiverList'
opa test policy.rego tests/*.rego
PASS: 5/5
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxResourceWaiverList'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxResourceWaiverList'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxResourceWaiverList'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxResourceWaiverList'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/FluxResourceWaiverList'
13:36 [32mIngressClass [input/examples][0m
	contains_kind(input.review.object.kind, {"Ingress"})
contains_kind(kind, kinds) {
# Enforce Specific Ingress Class

This Policy allows for a custom Ingress annotation key and value. When using Kubernetes Ingress, various annotation can be used to define different configurations, even different ingress controllers. Values may vary depending on your use case. 


```
metadata:
  annotations:
    kubernetes.io/ingress.class: <class>
```
https://kubernetes.io/docs/concepts/services-networking/ingress/


# Settings
```yaml
  settings:
    parameters:
      - name: class
        type: string
        required: true
        value:
      - name: annotation
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [ingresses]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Enforce Specific Ingress Class
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Ingress
  io.kubewarden.policy.title: enforce-specific-ingress-class
  io.kubewarden.policy.description: "This Policy allows for a custom Ingress annotation key and value. When using Kubernetes Ingress, various annotation can be used to define different configurations, even different ingress controllers. Values may vary depending on your use case. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/enforce-specific-ingress-class
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.1.4
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/IngressClass'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/IngressClass'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/IngressClass'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/IngressClass'
13:36 [32mIngressHostname [input/examples][0m
  contains_kind(input.review.object.kind, {"Ingress"})
contains_kind(kind, kinds) {
# Ingress Approved Hostnames

This Policy ensures only hostnames that are approved are set. Specify a list of approved hostnames since you may be hosting more than one domain name. 


Ensure your domain name is the same as the one you are hosting.
```
spec:
  rules:
  - host: <hostnames>
```


# Settings
```yaml
  settings:
    parameters:
      - name: hostnames
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [ingresses]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Ingress Approved Hostnames
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Ingress
  io.kubewarden.policy.title: ingress-approved-hostnames
  io.kubewarden.policy.description: "This Policy ensures only hostnames that are approved are set. Specify a list of approved hostnames since you may be hosting more than one domain name. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/ingress-approved-hostnames
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
2024/12/12 13:36:11 Testing IngressHostname policy
2024/12/12 13:36:11 Testing IngressHostname policy failed: [{"issue_detected":true,"msg":"Approved domain names should be 'null'; detected '*.foo.com'","violating_key":"spec.rules[1].host"},{"issue_detected":true,"msg":"Approved domain names should be 'null'; detected 'foo.bar.com'","violating_key":"spec.rules[0].host"}]
13:36 [31m  Yaml tests failed[0m
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/IngressHostname'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/IngressHostname'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/IngressHostname'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/IngressHostname'
13:36 [32mIstioGatewayHosts [input/examples][0m
  contains_kind(controller_input.kind, {"Gateway"})
contains_kind(kind, kinds) {
# Istio Gateway Approved Hosts

### Istio Gateway Approved Hosts
This ensures you are only serving traffic for approved hostnames. 


Ensure your domain name is the same as the one you are hosting.


# Settings
```yaml
  settings:
    parameters:
      - name: hostnames
        type: array
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [networking.istio.io]
    apiVersions: [v1]
    resources: [gateways]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Istio Gateway Approved Hosts
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Gateway
  io.kubewarden.policy.title: istio-gateway-approved-hosts
  io.kubewarden.policy.description: "### Istio Gateway Approved Hosts\nThis ensures you are only serving traffic for approved hostnames. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/istio-gateway-approved-hosts
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: high
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/IstioGatewayHosts'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/IstioGatewayHosts'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/IstioGatewayHosts'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/IstioGatewayHosts'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/IstioGatewayHosts'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/IstioGatewayHosts'
13:36 [32mIstioNamespaceLabelInjection [input/examples][0m
  contains_kind(input.review.object.kind, {"Namespace"})
contains_kind(kind, kinds) {
# Istio Injected Namespaces

# Istio-Injected Namespaces
Specify namespaces you would like to be labeld with `istio-injected: enabled`. Namespaces with this label with automatically deploy a Istio sidecar with each pod. 


https://istio.io/latest/docs/setup/additional-setup/sidecar-injection/#automatic-sidecar-injection


# Settings
```yaml
  settings:
    parameters:
      - name: namespaces
        type: array
        required: true
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [namespaces]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Istio Injected Namespaces
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Namespace
  io.kubewarden.policy.title: istio-injected-namespaces
  io.kubewarden.policy.description: "# Istio-Injected Namespaces\nSpecify namespaces you would like to be labeld with `istio-injected: enabled`. Namespaces with this label with automatically deploy a Istio sidecar with each pod. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/istio-injected-namespaces
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: low
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/IstioNamespaceLabelInjection'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/IstioNamespaceLabelInjection'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/IstioNamespaceLabelInjection'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/IstioNamespaceLabelInjection'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/IstioNamespaceLabelInjection'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/IstioNamespaceLabelInjection'
13:36 [32mKubernetesKubeletVersion [input/examples][0m
	contains_kind(input.review.object.kind, {"Node"})
contains_kind(kind, kinds) {
# Kubernetes Minimum Kubelet Version

This Policy checks the minimum kubelet version for your Nodes. Please use this type of versioning (`v1.0.0`) and omit any suffix starting with a hyphen (`-`)


Upgrade your kubelet to a version that is equal to or later than the version specified in the policy. 
```
nodeInfo:
  kubeletVersion: <version>
```


# Settings
```yaml
  settings:
    parameters:
      - name: version
        type: string
        required: true
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [nodes]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Kubernetes Minimum Kubelet Version
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Node
  io.kubewarden.policy.title: kubernetes-minimum-kubelet-version
  io.kubewarden.policy.description: |
    This Policy checks the minimum kubelet version for your Nodes. Please use this type of versioning (`v1.0.0`) and omit any suffix starting with a hyphen (`-`)
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/kubernetes-minimum-kubelet-version
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: medium
2024/12/12 13:36:12 Testing KubernetesKubeletVersion policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/KubernetesKubeletVersion'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/KubernetesKubeletVersion'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/KubernetesKubeletVersion'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/KubernetesKubeletVersion'
13:36 [32mKubernetesProhibitKind [input/examples][0m
# Prohibit Specific Kind From Being Scheduled

This Policy checks for a `kind` and can prevent it from being schedule to your cluster. A common example is running "naked" pods. 


Ensure you are not using a kind that is specified within the Policy.
```
kind: <kind>
```

https://kubernetes.io/docs/concepts/configuration/overview/#naked-pods-vs-replicasets-deployments-and-jobs


# Settings
```yaml
  settings:
    parameters:
      - name: kind
        type: string
        required: true
        value: Pods
```

# Resources
Policy applies to resources kinds:
`Pods`
rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods, namespaces, services, serviceaccounts, persistentvolumes, replicationcontrollers, nodes, limitranges, resourcequotas]
    operations: [CREATE, UPDATE]
  - apiGroups: [snapshot.storage.k8s.io]
    apiVersions: [v1]
    resources: [volumesnapshots]
    operations: [CREATE, UPDATE]
  - apiGroups: [autoscaling]
    apiVersions: [v2]
    resources: [horizontalpodautoscalers]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [deployments, replicasets, daemonsets, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [jobs, cronjobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [ingresses, networkpolicies]
    operations: [CREATE, UPDATE]
  - apiGroups: [networking.istio.io]
    apiVersions: [v1]
    resources: [gateways]
    operations: [CREATE, UPDATE]
  - apiGroups: [helm.toolkit.fluxcd.io]
    apiVersions: [v2]
    resources: [helmreleases]
    operations: [CREATE, UPDATE]
  - apiGroups: [source.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [buckets, helmcharts, helmrepositories, gitrepositories, ocirepositories]
    operations: [CREATE, UPDATE]
  - apiGroups: [kustomize.toolkit.fluxcd.io]
    apiVersions: [v1]
    resources: [kustomizations]
    operations: [CREATE, UPDATE]
  - apiGroups: [rbac.authorization.k8s.io]
    apiVersions: [v1]
    resources: [clusterrolebindings, roles, clusterroles]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Prohibit Specific Kind From Being Scheduled
  io.artifacthub.keywords: cis-benchmark
  io.artifacthub.resources: Pods
  io.kubewarden.policy.title: prohibit-specific-kind-from-being-scheduled
  io.kubewarden.policy.description: "This Policy checks for a `kind` and can prevent it from being schedule to your cluster. A common example is running \"naked\" pods. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/prohibit-specific-kind-from-being-scheduled
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.1.4
2024/12/12 13:36:13 Testing KubernetesProhibitKind policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/KubernetesProhibitKind'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/KubernetesProhibitKind'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/KubernetesProhibitKind'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/KubernetesProhibitKind'
13:36 [32mNamespaceLimitRangeMinMax [input/examples][0m
  contains_kind(input.review.object.kind, {"LimitRange"})
contains_kind(kind, kinds) {
# Namespace Resources Limitrange

When setting up default CPU and Memory values for your namespace, this policy will check if both requests and limits are set. This policy checks for the following:

| Resource Setting | Resource Type  |
|---|---|
|  default | cpu  |
|  default  | memory  |
|  defaultRequest |  cpu |
|  defaultRequest | memory  |
|  min | memory  |
|  min | cpu  |
|  max | cpu |
|  max | memory  |


Ensure you are specifying both CPU and Memory requests and limits in your LimitRange
```
spec:
limits:
- <resource_setting>:
    <resource_type>: value
```

https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/
https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/


# Settings
```yaml
  settings:
    parameters:
      - name: resource_type
        type: string
        required: true
        value:
      - name: resource_setting
        type: string
        required: true
        value:
      - name: namespace
        type: string
        required: true
        value: magalix
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [limitranges]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Namespace Resources Limitrange
  io.artifacthub.keywords: soc2-type1
  io.artifacthub.resources: LimitRange
  io.kubewarden.policy.title: namespace-resources-limitrange
  io.kubewarden.policy.description: |
    When setting up default CPU and Memory values for your namespace, this policy will check if both requests and limits are set. This policy checks for the following:

    | Resource Setting | Resource Type  |
    |---|---|
    |  default | cpu  |
    |  default  | memory  |
    |  defaultRequest |  cpu |
    |  defaultRequest | memory  |
    |  min | memory  |
    |  min | cpu  |
    |  max | cpu |
    |  max | memory  |
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/namespace-resources-limitrange
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespaceLimitRangeMinMax'
opa test policy.rego tests/*.rego
PASS: 8/8
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespaceLimitRangeMinMax'
2024/12/12 13:36:13 Testing NamespaceLimitRangeMinMax policy
2024/12/12 13:36:13 Testing NamespaceLimitRangeMinMax policy failed: [{"issue_detected":true,"msg":"You are missing 'null': 'null'","violating_key":"spec.limits"}]
13:36 [31m  Yaml tests failed[0m
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespaceLimitRangeMinMax'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespaceLimitRangeMinMax'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespaceLimitRangeMinMax'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespaceLimitRangeMinMax'
13:36 [32mNamespacePodQuota [input/examples][0m
  contains_kind(input.review.object.kind, {"ResourceQuota"})
contains_kind(kind, kinds) {
# Namespace Pod Quota

When using a pod quota ensure setting the proper value for the quantity of pods you wish to have in your namespace. 


Specify a value for the maximum number of pods you'd like in a namespace. 

https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/quota-pod-namespace/


# Settings
```yaml
  settings:
    parameters:
      - name: pod_quota
        type: string
        required: true
        value: 2
      - name: namespace
        type: string
        required: true
        value: magalix
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [resourcequotas]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Namespace Pod Quota
  io.artifacthub.keywords: ""
  io.artifacthub.resources: ResourceQuota
  io.kubewarden.policy.title: namespace-pod-quota
  io.kubewarden.policy.description: "When using a pod quota ensure setting the proper value for the quantity of pods you wish to have in your namespace. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/namespace-pod-quota
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: low
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespacePodQuota'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespacePodQuota'
2024/12/12 13:36:13 Testing NamespacePodQuota policy
2024/12/12 13:36:13 Testing NamespacePodQuota policy failed: [{"issue_detected":true,"msg":"The numbers of pods should be '2' or greater; detected '2'","violating_key":"spec.hard.pods"}]
13:36 [31m  Yaml tests failed[0m
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespacePodQuota'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespacePodQuota'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespacePodQuota'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespacePodQuota'
13:36 [32mNamespaceResourceQuotas [input/examples][0m
  contains_kind(input.review.object.kind, {"ResourceQuota"})
contains_kind(kind, kinds) {
# Resource Quota Setting Is Missing

When creating resource quotas per namespace, ensure CPU and Memory requests and limits are set.


Declare values for CPU & Memory requests and limits.  
```
spec:
  hard:
    requests.cpu: <size>
    requests.memory: <size>
    limits.cpu: <size>
    limits.memory: <size>
```
https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/quota-memory-cpu-namespace/


# Settings
```yaml
  settings:
    parameters:
      - name: resource_type
        type: string
        required: true
        value:
      - name: namespace
        type: string
        required: true
        value: magalix
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [resourcequotas]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Resource Quota Setting Is Missing
  io.artifacthub.keywords: soc2-type1
  io.artifacthub.resources: ResourceQuota
  io.kubewarden.policy.title: resource-quota-setting-is-missing
  io.kubewarden.policy.description: |
    When creating resource quotas per namespace, ensure CPU and Memory requests and limits are set.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/resource-quota-setting-is-missing
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespaceResourceQuotas'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespaceResourceQuotas'
2024/12/12 13:36:14 Testing NamespaceResourceQuotas policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespaceResourceQuotas'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespaceResourceQuotas'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespaceResourceQuotas'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NamespaceResourceQuotas'
13:36 [32mNetworkPolicyAllowEgressAllFromNamespace [input/examples][0m
  contains_kind(input.review.object.kind, {"NetworkPolicy"})
contains_kind(kind, kinds) {
# Network Allow All Egress Traffic From Namespace

If you are using a CNI that allows for Network Policies, you can use this Policy to block all Ingress traffic from a specified namespace. 

By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. 


Validate your use case and check network policies for traffic blocking. 

https://kubernetes.io/docs/concepts/services-networking/network-policies/


# Settings
```yaml
  settings:
    parameters:
      - name: namespace
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [networkpolicies]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Network Allow All Egress Traffic From Namespace
  io.artifacthub.keywords: ""
  io.artifacthub.resources: NetworkPolicy
  io.kubewarden.policy.title: network-allow-all-egress-traffic-from-namespace
  io.kubewarden.policy.description: "If you are using a CNI that allows for Network Policies, you can use this Policy to block all Ingress traffic from a specified namespace. \n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/network-allow-all-egress-traffic-from-namespace
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.2.1
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
2024/12/12 13:36:14 Testing NetworkPolicyAllowEgressAllFromNamespace policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowEgressAllFromNamespace'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowEgressAllFromNamespace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowEgressAllFromNamespace'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowEgressAllFromNamespace'
13:36 [32mNetworkPolicyAllowEgressAllFromNamespaceToCIDR [input/examples][0m
  contains_kind(input.review.object.kind, {"NetworkPolicy"})
contains_kind(kind, kinds) {
# Network Allow All Egress Traffic From Namespace To CIDR Block

If you are using a CNI that allows for Network Policies, you can use this Policy to block all Egress traffic from a specified namespace to a CIDR block of IP addresses. 

By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. 


Validate your use case and check network policies for traffic blocking. 

https://kubernetes.io/docs/concepts/services-networking/network-policies/


# Settings
```yaml
  settings:
    parameters:
      - name: namespace
        type: string
        required: true
        value:
      - name: cidr
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [networkpolicies]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Network Allow All Egress Traffic From Namespace To CIDR Block
  io.artifacthub.keywords: ""
  io.artifacthub.resources: NetworkPolicy
  io.kubewarden.policy.title: network-allow-all-egress-traffic-from-namespace-to-cidr-block
  io.kubewarden.policy.description: "If you are using a CNI that allows for Network Policies, you can use this Policy to block all Egress traffic from a specified namespace to a CIDR block of IP addresses. \n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/network-allow-all-egress-traffic-from-namespace-to-cidr-block
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.2.1
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.8.3
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
2024/12/12 13:36:14 Testing NetworkPolicyAllowEgressAllFromNamespaceToCIDR policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowEgressAllFromNamespaceToCIDR'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowEgressAllFromNamespaceToCIDR'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowEgressAllFromNamespaceToCIDR'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowEgressAllFromNamespaceToCIDR'
13:36 [32mNetworkPolicyAllowEgressDNSFromNamespace [input/examples][0m
  contains_kind(input.review.object.kind, {"NetworkPolicy"})
contains_kind(kind, kinds) {
# Network Allow Egress Dns To Coredns

If you are using a CNI that allows for Network Policies, you can use this Policy to allow egress traffic from a specified namespace, to your coredns pods with the label `k8s-app: kube-dns`. The Policy specifically looks for port UDP 53. 

By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. 


You must specifiy a source namespace to allow Egress to coredns on UDP53. 

```
...
metadata:
  namespace: <namespace>
...
```
and
```
...
egress:
- to:
  - podSelector:
      matchLabels:
        k8s-app: kube-dns
...
```

https://kubernetes.io/docs/concepts/services-networking/network-policies/#targeting-a-namespace-by-its-name


# Settings
```yaml
  settings:
    parameters:
      - name: namespace
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [networkpolicies]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Network Allow Egress Dns To Coredns
  io.artifacthub.keywords: ""
  io.artifacthub.resources: NetworkPolicy
  io.kubewarden.policy.title: network-allow-egress-dns-to-coredns
  io.kubewarden.policy.description: "If you are using a CNI that allows for Network Policies, you can use this Policy to allow egress traffic from a specified namespace, to your coredns pods with the label `k8s-app: kube-dns`. The Policy specifically looks for port UDP 53. \n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/network-allow-egress-dns-to-coredns
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.2.1
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
2024/12/12 13:36:15 Testing NetworkPolicyAllowEgressDNSFromNamespace policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowEgressDNSFromNamespace'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowEgressDNSFromNamespace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowEgressDNSFromNamespace'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowEgressDNSFromNamespace'
13:36 [32mNetworkPolicyAllowEgressFromNamespaceToNamespace [input/examples][0m
  contains_kind(input.review.object.kind, {"NetworkPolicy"})
contains_kind(kind, kinds) {
# Network Allow Egress Traffic From Namespace To Another

If you are using a CNI that allows for Network Policies, you can use this Policy to allow Egress traffic from one namespace to another.

By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. 


Validate your use case and check network policies for traffic blocking. 

https://kubernetes.io/docs/concepts/services-networking/network-policies/


# Settings
```yaml
  settings:
    parameters:
      - name: src_namespace
        type: string
        required: true
        value:
      - name: dst_namespace
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [networkpolicies]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Network Allow Egress Traffic From Namespace To Another
  io.artifacthub.keywords: ""
  io.artifacthub.resources: NetworkPolicy
  io.kubewarden.policy.title: network-allow-egress-traffic-from-namespace-to-another
  io.kubewarden.policy.description: "If you are using a CNI that allows for Network Policies, you can use this Policy to allow Egress traffic from one namespace to another.\n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/network-allow-egress-traffic-from-namespace-to-another
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyAllowEgressFromNamespaceToNamespace'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyAllowEgressFromNamespaceToNamespace'
2024/12/12 13:36:15 Testing NetworkPolicyAllowEgressFromNamespaceToNamespace policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyAllowEgressFromNamespaceToNamespace'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyAllowEgressFromNamespaceToNamespace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyAllowEgressFromNamespaceToNamespace'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyAllowEgressFromNamespaceToNamespace'
13:36 [32mNetworkPolicyAllowIngressAllToNamespace [input/examples][0m
  contains_kind(input.review.object.kind, {"NetworkPolicy"})
contains_kind(kind, kinds) {
# Network Allow All Ingress Traffic To Namespace

If you are using a CNI that allows for Network Policies, you can use this Policy to block all Ingress traffic from a specified namespace. 

By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. 


Validate your use case and check network policies for traffic blocking. 

https://kubernetes.io/docs/concepts/services-networking/network-policies/


# Settings
```yaml
  settings:
    parameters:
      - name: namespace
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [networkpolicies]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Network Allow All Ingress Traffic To Namespace
  io.artifacthub.keywords: ""
  io.artifacthub.resources: NetworkPolicy
  io.kubewarden.policy.title: network-allow-all-ingress-traffic-to-namespace
  io.kubewarden.policy.description: "If you are using a CNI that allows for Network Policies, you can use this Policy to block all Ingress traffic from a specified namespace. \n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/network-allow-all-ingress-traffic-to-namespace
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.2.1
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
2024/12/12 13:36:15 Testing NetworkPolicyAllowIngressAllToNamespace policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowIngressAllToNamespace'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowIngressAllToNamespace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowIngressAllToNamespace'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowIngressAllToNamespace'
13:36 [32mNetworkPolicyAllowIngressAllToNamespaceFromCIDR [input/examples][0m
  contains_kind(input.review.object.kind, {"NetworkPolicy"})
contains_kind(kind, kinds) {
# Network Allow All Ingress Traffic To Namespace From CIDR Block

If you are using a CNI that allows for Network Policies, you can use this Policy to block all Egress traffic from a specified namespace to a CIDR block of IP addresses. 

By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. 


Validate your use case and check network policies for traffic blocking. 

https://kubernetes.io/docs/concepts/services-networking/network-policies/


# Settings
```yaml
  settings:
    parameters:
      - name: namespace
        type: string
        required: true
        value:
      - name: cidr
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [networkpolicies]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Network Allow All Ingress Traffic To Namespace From CIDR Block
  io.artifacthub.keywords: ""
  io.artifacthub.resources: NetworkPolicy
  io.kubewarden.policy.title: network-allow-all-ingress-traffic-to-namespace-from-cidr-block
  io.kubewarden.policy.description: "If you are using a CNI that allows for Network Policies, you can use this Policy to block all Egress traffic from a specified namespace to a CIDR block of IP addresses. \n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/network-allow-all-ingress-traffic-to-namespace-from-cidr-block
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.2.1
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
2024/12/12 13:36:16 Testing NetworkPolicyAllowIngressAllToNamespaceFromCIDR policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowIngressAllToNamespaceFromCIDR'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowIngressAllToNamespaceFromCIDR'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowIngressAllToNamespaceFromCIDR'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyAllowIngressAllToNamespaceFromCIDR'
13:36 [32mNetworkPolicyAllowIngressFromNamespaceToNamespace [input/examples][0m
  contains_kind(input.review.object.kind, {"NetworkPolicy"})
contains_kind(kind, kinds) {
# Network Allow Ingress Traffic From Namespace To Another

If you are using a CNI that allows for Network Policies, you can use this Policy to allow Ingress traffic from one namespace to another.

By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. 


Validate your use case and check network policies for traffic blocking. 

https://kubernetes.io/docs/concepts/services-networking/network-policies/


# Settings
```yaml
  settings:
    parameters:
      - name: src_namespace
        type: string
        required: true
        value:
      - name: dst_namespace
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [networkpolicies]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Network Allow Ingress Traffic From Namespace To Another
  io.artifacthub.keywords: ""
  io.artifacthub.resources: NetworkPolicy
  io.kubewarden.policy.title: network-allow-ingress-traffic-from-namespace-to-another
  io.kubewarden.policy.description: "If you are using a CNI that allows for Network Policies, you can use this Policy to allow Ingress traffic from one namespace to another.\n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/network-allow-ingress-traffic-from-namespace-to-another
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyAllowIngressFromNamespaceToNamespace'
opa test policy.rego tests/*.rego
PASS: 4/4
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyAllowIngressFromNamespaceToNamespace'
2024/12/12 13:36:16 Testing NetworkPolicyAllowIngressFromNamespaceToNamespace policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyAllowIngressFromNamespaceToNamespace'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyAllowIngressFromNamespaceToNamespace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyAllowIngressFromNamespaceToNamespace'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyAllowIngressFromNamespaceToNamespace'
13:36 [32mNetworkPolicyBlockEgressAllFromNamespace [input/examples][0m
  contains_kind(input.review.object.kind, {"NetworkPolicy"})
contains_kind(kind, kinds) {
# Network Block All Egress Traffic From Namespace

If you are using a CNI that allows for Network Policies, you can use this Policy to block all Egress traffic from a specified namespace. 

By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. 


Validate your use case and check network policies for traffic blocking. 

https://kubernetes.io/docs/concepts/services-networking/network-policies/


# Settings
```yaml
  settings:
    parameters:
      - name: namespace
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [networkpolicies]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Network Block All Egress Traffic From Namespace
  io.artifacthub.keywords: ""
  io.artifacthub.resources: NetworkPolicy
  io.kubewarden.policy.title: network-block-all-egress-traffic-from-namespace
  io.kubewarden.policy.description: "If you are using a CNI that allows for Network Policies, you can use this Policy to block all Egress traffic from a specified namespace. \n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/network-block-all-egress-traffic-from-namespace
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.2.1
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
2024/12/12 13:36:16 Testing NetworkPolicyBlockEgressAllFromNamespace policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyBlockEgressAllFromNamespace'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyBlockEgressAllFromNamespace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyBlockEgressAllFromNamespace'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyBlockEgressAllFromNamespace'
13:36 [32mNetworkPolicyBlockEgressAllFromNamespaceToCIDR [input/examples][0m
  contains_kind(input.review.object.kind, {"NetworkPolicy"})
contains_kind(kind, kinds) {
# Network Block All Egress Traffic For Namespace To CIDR Block

If you are using a CNI that allows for Network Policies, you can use this Policy to block all Egress traffic from a specified namespace to a CIDR block of IP addresses. 

By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. 


Validate your use case and check network policies for traffic blocking. 

https://kubernetes.io/docs/concepts/services-networking/network-policies/


# Settings
```yaml
  settings:
    parameters:
      - name: namespace
        type: string
        required: true
        value:
      - name: cidr
        type: array
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [networkpolicies]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Network Block All Egress Traffic For Namespace To CIDR Block
  io.artifacthub.keywords: ""
  io.artifacthub.resources: NetworkPolicy
  io.kubewarden.policy.title: network-block-all-egress-traffic-for-namespace-to-cidr-block
  io.kubewarden.policy.description: "If you are using a CNI that allows for Network Policies, you can use this Policy to block all Egress traffic from a specified namespace to a CIDR block of IP addresses. \n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/network-block-all-egress-traffic-for-namespace-to-cidr-block
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.2.1
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
2024/12/12 13:36:16 Testing NetworkPolicyBlockEgressAllFromNamespaceToCIDR policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyBlockEgressAllFromNamespaceToCIDR'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyBlockEgressAllFromNamespaceToCIDR'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyBlockEgressAllFromNamespaceToCIDR'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyBlockEgressAllFromNamespaceToCIDR'
13:36 [32mNetworkPolicyBlockIngressAllToNamespace [input/examples][0m
  contains_kind(input.review.object.kind, {"NetworkPolicy"})
contains_kind(kind, kinds) {
# Network Block All Ingress Traffic To Namespace

If you are using a CNI that allows for Network Policies, you can use this Policy to block all Ingress traffic from a specified namespace. 

By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. 


Validate your use case and check network policies for traffic blocking. 

https://kubernetes.io/docs/concepts/services-networking/network-policies/


# Settings
```yaml
  settings:
    parameters:
      - name: namespace
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [networkpolicies]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Network Block All Ingress Traffic To Namespace
  io.artifacthub.keywords: ""
  io.artifacthub.resources: NetworkPolicy
  io.kubewarden.policy.title: network-block-all-ingress-traffic-to-namespace
  io.kubewarden.policy.description: "If you are using a CNI that allows for Network Policies, you can use this Policy to block all Ingress traffic from a specified namespace. \n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/network-block-all-ingress-traffic-to-namespace
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.2.1
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
2024/12/12 13:36:17 Testing NetworkPolicyBlockIngressAllToNamespace policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyBlockIngressAllToNamespace'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyBlockIngressAllToNamespace'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyBlockIngressAllToNamespace'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NetworkPolicyBlockIngressAllToNamespace'
13:36 [32mNetworkPolicyBlockIngressAllToNamespaceFromCIDR [input/examples][0m
  contains_kind(input.review.object.kind, {"NetworkPolicy"})
contains_kind(kind, kinds) {
# Network Block All Ingress Traffic To Namespace From CIDR Block

If you are using a CNI that allows for Network Policies, you can use this Policy to block all Egress traffic from a specified namespace to a CIDR block of IP addresses. 

By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. 


Validate your use case and check network policies for traffic blocking. 

https://kubernetes.io/docs/concepts/services-networking/network-policies/


# Settings
```yaml
  settings:
    parameters:
      - name: namespace
        type: string
        required: true
        value:
      - name: cidr
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [networking.k8s.io]
    apiVersions: [v1]
    resources: [networkpolicies]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Network Block All Ingress Traffic To Namespace From CIDR Block
  io.artifacthub.keywords: ""
  io.artifacthub.resources: NetworkPolicy
  io.kubewarden.policy.title: network-block-all-ingress-traffic-to-namespace-from-cidr-block
  io.kubewarden.policy.description: "If you are using a CNI that allows for Network Policies, you can use this Policy to block all Egress traffic from a specified namespace to a CIDR block of IP addresses. \n\nBy default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/network-block-all-ingress-traffic-to-namespace-from-cidr-block
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: network-security
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.pci-dss: pci-dss.1.2.1
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyBlockIngressAllToNamespaceFromCIDR'
opa test policy.rego tests/*.rego
PASS: 2/2
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyBlockIngressAllToNamespaceFromCIDR'
2024/12/12 13:36:17 Testing NetworkPolicyBlockIngressAllToNamespaceFromCIDR policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyBlockIngressAllToNamespaceFromCIDR'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyBlockIngressAllToNamespaceFromCIDR'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyBlockIngressAllToNamespaceFromCIDR'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/NetworkPolicyBlockIngressAllToNamespaceFromCIDR'
13:36 [32mNodeCustomLabel [input/examples][0m
	contains_kind(input.review.object.kind, {"Node"})
contains_kind(kind, kinds) {
# Node Custom Label

This Policy checks for custom labels on your node. This Policy looks for both a key and value. 


Add the custom label specified in the policy to all nodes. 
```
metadata: 
  labels: 
      <key>: <value>
```


# Settings
```yaml
  settings:
    parameters:
      - name: key
        type: string
        required: true
        value:
      - name: value
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [nodes]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Node Custom Label
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Node
  io.kubewarden.policy.title: node-custom-label
  io.kubewarden.policy.description: "This Policy checks for custom labels on your node. This Policy looks for both a key and value. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/node-custom-label
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: low
2024/12/12 13:36:17 Testing NodeCustomLabel policy
2024/12/12 13:36:17 Testing NodeCustomLabel policy failed: [{"issue_detected":true,"msg":"Node is missing key 'null'; found {\"kubernetes.io/arch\": \"amd64\", \"kubernetes.io/hostname\": \"hostname\", \"kubernetes.io/os\": \"linux\", \"name\": \"my-first-k8s-node\", \"node-role.kubernetes.io/node\": null, \"topology.kubernetes.io/region\": \"us-east-1\", \"topology.kubernetes.io/zone\": \"us-east-1a\"}","violating_key":"metadata.labels"}]
13:36 [31m  Yaml tests failed[0m
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NodeCustomLabel'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NodeCustomLabel'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NodeCustomLabel'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NodeCustomLabel'
13:36 [32mNodeKernelVersion [input/examples][0m
13:36 [31m  Policy without rules[0m
13:36 [32mNodeMissingLabel [input/examples][0m
  contains_kind(input.review.object.kind, {"Node"})
contains_kind(kind, kinds) {
# Node Missing Label

This Policy only looks for specific node label keys.

Important node labels include:
### kubernetes.io/hostname
The Kubelet populates this label with the hostname. Note that the hostname can be changed from the "actual" hostname by passing the --hostname-override flag to the kubelet.

### kubernetes.io/arch
The Kubelet populates this with runtime.GOARCH as defined by Go. This can be handy if you are mixing arm and x86 nodes.

### node.kubernetes.io/instance-type
The Kubelet populates this with the instance type as defined by the cloudprovider. This will be set only if you are using a cloudprovider. This setting is handy if you want to target certain workloads to certain instance types, but typically you want to rely on the Kubernetes scheduler to perform resource-based scheduling. You should aim to schedule based on properties rather than on instance types (for example: require a GPU, instead of requiring a g2.2xlarge).

### kubernetes.io/os
The Kubelet populates this with runtime.GOOS as defined by Go. This can be handy if you are mixing operating systems in your cluster (for example: mixing Linux and Windows nodes).

### topology.kubernetes.io/zone
The kubelet or the external cloud-controller-manager populates this with the information as provided by the cloudprovider. This will be set only if you are using a cloudprovider. However, you should consider setting this on nodes if it makes sense in your topology.


Ensure the label is as specified in the Policy. 
```
metadata: 
  labels: 
    <key>: value
```
https://kubernetes.io/docs/reference/labels-annotations-taints/


# Settings
```yaml
  settings:
    parameters:
      - name: node_label
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [nodes]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Node Missing Label
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Node
  io.kubewarden.policy.title: node-missing-label
  io.kubewarden.policy.description: |
    This Policy only looks for specific node label keys.

    Important node labels include:
    ### kubernetes.io/hostname
    The Kubelet populates this label with the hostname. Note that the hostname can be changed from the "actual" hostname by passing the --hostname-override flag to the kubelet.

    ### kubernetes.io/arch
    The Kubelet populates this with runtime.GOARCH as defined by Go. This can be handy if you are mixing arm and x86 nodes.

    ### node.kubernetes.io/instance-type
    The Kubelet populates this with the instance type as defined by the cloudprovider. This will be set only if you are using a cloudprovider. This setting is handy if you want to target certain workloads to certain instance types, but typically you want to rely on the Kubernetes scheduler to perform resource-based scheduling. You should aim to schedule based on properties rather than on instance types (for example: require a GPU, instead of requiring a g2.2xlarge).

    ### kubernetes.io/os
    The Kubelet populates this with runtime.GOOS as defined by Go. This can be handy if you are mixing operating systems in your cluster (for example: mixing Linux and Windows nodes).

    ### topology.kubernetes.io/zone
    The kubelet or the external cloud-controller-manager populates this with the information as provided by the cloudprovider. This will be set only if you are using a cloudprovider. However, you should consider setting this on nodes if it makes sense in your topology.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/node-missing-label
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: low
  io.kubewarden.policy.standards.nist-800-190: nist-800-190.4.5.1
2024/12/12 13:36:18 Testing NodeMissingLabel policy
2024/12/12 13:36:18 Testing NodeMissingLabel policy failed: [{"issue_detected":true,"msg":"Node is missing label 'null'; found {\"kubernetes.io/arch\": \"amd64\", \"kubernetes.io/hostname\": \"hostname\", \"kubernetes.io/os\": \"linux\", \"name\": \"my-first-k8s-node\", \"node-role.kubernetes.io/node\": null, \"node.kubernetes.io/instance-type\": \"large\", \"topology.kubernetes.io/region\": \"us-east-1\", \"topology.kubernetes.io/zone\": \"us-east-1a\"}","violating_key":"metadata.labels"}]
13:36 [31m  Yaml tests failed[0m
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NodeMissingLabel'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NodeMissingLabel'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NodeMissingLabel'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NodeMissingLabel'
13:36 [32mNodeOSVersion [input/examples][0m
  contains_kind(input.review.object.kind, {"Node"})
  contains_kind(input.review.object.kind, {"Node"})
contains_kind(kind, kinds) {
# Node OS Version

This Policy allows enforcement of the type of OS image used for each node. Build consistency throughout your cluster by provisioning the same OS version across all the nodes. 


When provisioning new Kubernetes nodes, ensure your provisiong process specifies an operating system that is equal to the OS Image listed in the Policy. 
```
status:
  nodeInfo:
    osImage: <os>
```


# Settings
```yaml
  settings:
    parameters:
      - name: os
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [nodes]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Node OS Version
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Node
  io.kubewarden.policy.title: node-os-version
  io.kubewarden.policy.description: "This Policy allows enforcement of the type of OS image used for each node. Build consistency throughout your cluster by provisioning the same OS version across all the nodes. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/node-os-version
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: organizational-standards
  io.kubewarden.policy.severity: medium
2024/12/12 13:36:18 Testing NodeOSVersion policy
2024/12/12 13:36:18 Testing NodeOSVersion policy failed: [{"issue_detected":true,"msg":"Node OS should be'null'; found Ubuntu 18.04.5 LTS","violating_key":"status.nodeInfo.osImage"}]
13:36 [31m  Yaml tests failed[0m
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NodeOSVersion'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NodeOSVersion'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NodeOSVersion'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/NodeOSVersion'
13:36 [32mPersistentVolumeAccessModes [input/examples][0m
  contains_kind(controller_input.kind, {"PersistentVolume"})
contains_kind(kind, kinds) {
# Persistent Volume Access Modes

A PersistentVolume can be mounted on a host in any way supported by the resource provider. As shown in the table below, providers will have different capabilities and each PV's access modes are set to the specific modes supported by that particular volume. For example, NFS can support multiple read/write clients, but a specific NFS PV might be exported on the server as read-only. Each PV gets its own set of access modes describing that specific PV's capabilities.

The access modes are:

* ReadWriteOnce
* ReadOnlyMany
* ReadWriteMany
* ReadWriteOncePod


Ensure the <name> of your Persistent Volume and <access_mode> set in your Policy match the PV you want to check.
```
apiVersion: v1
kind: PersistentVolume
metadata: 
  name: <name>
spec: 
  accessModes: 
    - <access_mode>
```


# Settings
```yaml
  settings:
    parameters:
      - name: name
        type: string
        required: true
        value:
      - name: access_mode
        type: string
        required: true
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [persistentvolumes]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Persistent Volume Access Modes
  io.artifacthub.keywords: ""
  io.artifacthub.resources: PersistentVolume
  io.kubewarden.policy.title: persistent-volume-access-modes
  io.kubewarden.policy.description: |
    A PersistentVolume can be mounted on a host in any way supported by the resource provider. As shown in the table below, providers will have different capabilities and each PV's access modes are set to the specific modes supported by that particular volume. For example, NFS can support multiple read/write clients, but a specific NFS PV might be exported on the server as read-only. Each PV gets its own set of access modes describing that specific PV's capabilities.

    The access modes are:

    * ReadWriteOnce
    * ReadOnlyMany
    * ReadWriteMany
    * ReadWriteOncePod
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/persistent-volume-access-modes
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/PersistentVolumeAccessModes'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/PersistentVolumeAccessModes'
2024/12/12 13:36:18 Testing PersistentVolumeAccessModes policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/PersistentVolumeAccessModes'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/PersistentVolumeAccessModes'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/PersistentVolumeAccessModes'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/PersistentVolumeAccessModes'
13:36 [32mPersistentVolumeClaimMaxSize [input/examples][0m
  contains_kind(controller_input.kind, {"PersistentVolumeClaim"})
contains_kind(kind, kinds) {
# Persistent Volume Claim Max Size

This Policy allows you to set a max size on your Persistent Volumes Claims. When specifying a size, be sure to include the size and sizing suffix (e.g. 1Gi).


Ensure the max size (e.g. 5Gi) on your persistent volume claim is no larger than what is specified in the Policy. 
```
spec:
  resources:
    requests:
      storage: <size>
```


# Settings
```yaml
  settings:
    parameters:
      - name: size
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [persistentvolumes]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Persistent Volume Claim Max Size
  io.artifacthub.keywords: ""
  io.artifacthub.resources: PersistentVolume
  io.kubewarden.policy.title: persistent-volume-claim-max-size
  io.kubewarden.policy.description: |
    This Policy allows you to set a max size on your Persistent Volumes Claims. When specifying a size, be sure to include the size and sizing suffix (e.g. 1Gi).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/persistent-volume-claim-max-size
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
2024/12/12 13:36:19 Testing PersistentVolumeClaimMaxSize policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PersistentVolumeClaimMaxSize'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PersistentVolumeClaimMaxSize'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PersistentVolumeClaimMaxSize'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PersistentVolumeClaimMaxSize'
13:36 [32mPersistentVolumeClaimSnapshot [input/examples][0m
  contains_kind(controller_input.kind, {"VolumeSnapshot"})
contains_kind(kind, kinds) {
# Persistent Volume Claim Snapshot

This Policy checks for a PVC Snapshot. 


When using Persistent Volume Claim snapshots, ensure both the `snapshot_class` and `pvc_name` define match what's in the Policy. 
```
spec:
  volumeSnapshotClassName: <snapshot_class>
  source:
    persistentVolumeClaimName: <pvc_name>
```


# Settings
```yaml
  settings:
    parameters:
      - name: snapshot_class
        type: string
        required: true
        value:
      - name: pvc_name
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [snapshot.storage.k8s.io]
    apiVersions: [v1]
    resources: [volumesnapshots]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Persistent Volume Claim Snapshot
  io.artifacthub.keywords: ""
  io.artifacthub.resources: VolumeSnapshot
  io.kubewarden.policy.title: persistent-volume-claim-snapshot
  io.kubewarden.policy.description: "This Policy checks for a PVC Snapshot. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/persistent-volume-claim-snapshot
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.2
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/PersistentVolumeClaimSnapshot'
opa test policy.rego tests/*.rego
PASS: 1/1
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/PersistentVolumeClaimSnapshot'
2024/12/12 13:36:19 Testing PersistentVolumeClaimSnapshot policy
2024/12/12 13:36:19 Testing PersistentVolumeClaimSnapshot policy failed: [{"issue":true,"msg":"PVC names should be 'null', detected 'pvc-test'","violating_key":"spec.source.persistentVolumeClaimName"},{"issue_detected":true,"msg":"VolumeSnapshotClassName names should be 'null', detected 'csi-hostpath-snapclass'","recommended_value":null,"violating_key":"spec.volumeSnapshotClassName"}]
13:36 [31m  Yaml tests failed[0m
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/PersistentVolumeClaimSnapshot'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/PersistentVolumeClaimSnapshot'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/PersistentVolumeClaimSnapshot'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/policies/PersistentVolumeClaimSnapshot'
13:36 [32mPersistentVolumeMaxSize [input/examples][0m
  contains_kind(controller_input.kind, {"PersistentVolume"})
contains_kind(kind, kinds) {
# Persistent Volume Max Size

This Policy sets a max size on your Persistent Volumes. When specifying a size, be sure to include the size and sizing suffix (e.g. 1Gi).


Ensure the max size (e.g. 5Gi) on your persistent volume is no larger than what is specified in the Policy. 
```
spec:
  capacity:
    storage: <size>
```


# Settings
```yaml
  settings:
    parameters:
      - name: size
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [persistentvolumes]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Persistent Volume Max Size
  io.artifacthub.keywords: ""
  io.artifacthub.resources: PersistentVolume
  io.kubewarden.policy.title: persistent-volume-max-size
  io.kubewarden.policy.description: |
    This Policy sets a max size on your Persistent Volumes. When specifying a size, be sure to include the size and sizing suffix (e.g. 1Gi).
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/persistent-volume-max-size
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: capacity-management
  io.kubewarden.policy.severity: medium
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.2.1.1
2024/12/12 13:36:19 Testing PersistentVolumeMaxSize policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PersistentVolumeMaxSize'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PersistentVolumeMaxSize'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PersistentVolumeMaxSize'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PersistentVolumeMaxSize'
13:36 [32mPrometheusAnnotationKey [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Enforce Prometheus Annotation Key

This Policy ensures annotation keys like `prometheus.io/scrape`, `prometheus.io/port`, or `prometheus.io/path` are set in your Policy's metadata annotation. This is based on the default configuration of Prometheus.


Set annotation keys like `prometheus.io/scrape`, `prometheus.io/port`, or `prometheus.io/path`.
```
spec:
  template:
    metadata:
      annotations:
        <prometheus_annotation_key>: "value"
```
https://prometheus.io/docs/prometheus/latest/configuration/configuration/#pod


# Settings
```yaml
  settings:
    parameters:
      - name: prometheus_annotation_key
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Enforce Prometheus Annotation Key
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: enforce-prometheus-annotation-key
  io.kubewarden.policy.description: |
    This Policy ensures annotation keys like `prometheus.io/scrape`, `prometheus.io/port`, or `prometheus.io/path` are set in your Policy's metadata annotation. This is based on the default configuration of Prometheus.
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/enforce-prometheus-annotation-key
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: observability
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusAnnotationKey'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusAnnotationKey'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusAnnotationKey'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusAnnotationKey'
13:36 [32mPrometheusAnnotationValue [input/examples][0m
  contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
  controller_input.kind == "Pod"
  controller_input.kind == "CronJob"
contains_kind(kind, kinds) {
# Enforce Prometheus Annotation Value

This Policy ensures custom annotation values are set like Prometheus scrape, path, and port values in your Prometheus annotations. If you are using something other than the default values, you can customize those requirements here. 


Ensure the values in the Policy match your custom Prometheus configurations. 
```
metadata:
  annotations:
    <prometheus_annotation_key>: <prometheus_annotation_value>
```
https://prometheus.io/docs/prometheus/latest/configuration/configuration/#pod


# Settings
```yaml
  settings:
    parameters:
      - name: prometheus_annotation_key
        type: string
        required: true
        value:
      - name: prometheus_annotation_value
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [batch]
    apiVersions: [v1]
    resources: [cronjobs, jobs]
    operations: [CREATE, UPDATE]
  - apiGroups: [apps]
    apiVersions: [v1]
    resources: [daemonsets, deployments, statefulsets]
    operations: [CREATE, UPDATE]
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [pods]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Enforce Prometheus Annotation Value
  io.artifacthub.keywords: ""
  io.artifacthub.resources: CronJob, DaemonSet, Deployment, Job, Pod, StatefulSet
  io.kubewarden.policy.title: enforce-prometheus-annotation-value
  io.kubewarden.policy.description: "This Policy ensures custom annotation values are set like Prometheus scrape, path, and port values in your Prometheus annotations. If you are using something other than the default values, you can customize those requirements here. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/enforce-prometheus-annotation-value
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: observability
  io.kubewarden.policy.severity: medium
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusAnnotationValue'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusAnnotationValue'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusAnnotationValue'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusAnnotationValue'
13:36 [32mPrometheusServiceAnnontationKey [input/examples][0m
	contains_kind(input.review.object.kind, {"Service"})
contains_kind(kind, kinds) {
# Enforce Prometheus Service Annotation Key

This Policy checks to see if Services have the specified Prometheus annotations like  `prometheus.io/scrape` and `filter.by.port.name`. These annotations are used to send metric data to your Prometheus instance. 


```
kind: Service
metadata:
  annotations:
    <prometheus_service_annotation>: value
```

https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config


# Settings
```yaml
  settings:
    parameters:
      - name: prometheus_service_annotation
        type: string
        required: true
        value:
      - name: exclude_namespaces
        type: array
        required: false
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [""]
    apiVersions: [v1]
    resources: [services]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Enforce Prometheus Service Annotation Key
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Service
  io.kubewarden.policy.title: enforce-prometheus-service-annotation-key
  io.kubewarden.policy.description: "This Policy checks to see if Services have the specified Prometheus annotations like  `prometheus.io/scrape` and `filter.by.port.name`. These annotations are used to send metric data to your Prometheus instance. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/enforce-prometheus-service-annotation-key
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: observability
  io.kubewarden.policy.severity: medium
2024/12/12 13:36:20 Testing PrometheusServiceAnnontationKey policy
2024/12/12 13:36:20 Testing PrometheusServiceAnnontationKey policy failed: [{"issue_detected":true,"msg":"Annotation must contain 'null'; found '{\"filter.by.port.name\": \"true\", \"prometheus.io/scrape\": \"true\"}'","violating_key":"metadata.annotations"}]
13:36 [31m  Yaml tests failed[0m
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusServiceAnnontationKey'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusServiceAnnontationKey'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusServiceAnnontationKey'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/PrometheusServiceAnnontationKey'
13:36 [32mRBACProhibitEditingConfigMaps [input/examples][0m
	contains(input.review.object.kind, "Role")
# Rbac Prohibit Updating Configmaps

This Policy will violate if any RBAC ClusterRoles or Roles are designated with a specific verbs set for ConfigMaps. For example, if you wanted to deny the patching of a configmap, you would create a Policy with a the `resource_name` of the configmap you want to protect, it's `namespace` and the `verb` you want to block. 


When deploying RBAC roles, ensure the `resourceName`, `namespace` and `verb combination` you choose are allowed by the Policy. 
```
rules:
- resourcesName: <resource_name>
  verbs: <verb>

```

https://kubernetes.io/docs/reference/access-authn-authz/rbac/


# Settings
```yaml
  settings:
    parameters:
      - name: resource_name
        type: string
        required: true
        value:
      - name: verb
        type: string
        required: true
        value:
      - name: namespace
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [rbac.authorization.k8s.io]
    apiVersions: [v1]
    resources: [roles]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Rbac Prohibit Updating Configmaps
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Role
  io.kubewarden.policy.title: rbac-prohibit-updating-configmaps
  io.kubewarden.policy.description: "This Policy will violate if any RBAC ClusterRoles or Roles are designated with a specific verbs set for ConfigMaps. For example, if you wanted to deny the patching of a configmap, you would create a Policy with a the `resource_name` of the configmap you want to protect, it's `namespace` and the `verb` you want to block. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rbac-prohibit-updating-configmaps
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.7.1.1, pci-dss.7.1.2
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.8.6
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.8, soc2-type-i.1.6.3
2024/12/12 13:36:21 Testing RBACProhibitEditingConfigMaps policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACProhibitEditingConfigMaps'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACProhibitEditingConfigMaps'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACProhibitEditingConfigMaps'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACProhibitEditingConfigMaps'
13:36 [32mRBACProhibitVerbsOnResources [input/examples][0m
	contains(input.review.object.kind, "Role")
# Rbac Prohibit Verbs On Resources

This Policy will violate if any RBAC ClusterRoles or Roles are designated with a specific Resource and Verb combination. For example, if you wanted to deny deployments, you would create a Policy with a resource of `deployments` and the verb `create`. 


When deploying RBAC roles, ensure the resource and verb combination you choose are allowed by the Policy. 
```
rules:
- resources: <resources>
  verbs: <verb>
```

https://kubernetes.io/docs/reference/access-authn-authz/rbac/


# Settings
```yaml
  settings:
    parameters:
      - name: resource
        type: string
        required: true
        value:
      - name: verb
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [rbac.authorization.k8s.io]
    apiVersions: [v1]
    resources: [roles]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Rbac Prohibit Verbs On Resources
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Role
  io.kubewarden.policy.title: rbac-prohibit-verbs-on-resources
  io.kubewarden.policy.description: "This Policy will violate if any RBAC ClusterRoles or Roles are designated with a specific Resource and Verb combination. For example, if you wanted to deny deployments, you would create a Policy with a resource of `deployments` and the verb `create`. \n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rbac-prohibit-verbs-on-resources
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.7.1.1, pci-dss.7.1.2
  io.kubewarden.policy.standards.mitre-attack: mitre-attack.2.1, mitre-attack.6.1
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
  io.kubewarden.policy.standards.hipaa: hipaa.164.312.a.1
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.8, soc2-type-i.1.6.3
2024/12/12 13:36:21 Testing RBACProhibitVerbsOnResources policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACProhibitVerbsOnResources'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACProhibitVerbsOnResources'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACProhibitVerbsOnResources'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACProhibitVerbsOnResources'
13:36 [32mRBACProhibitWildcards [input/examples][0m
	contains(input.review.object.kind, "Role")
# Rbac Prohibit Resources Wildcards

This Policy prohbits various resources from being set with wildcards for Role or ClusterRole resources, except for the `cluster-admin` ClusterRole. It will check each resource specified for the verb specified. The wildcards will be checked in:

### Resources
In the Kubernetes API, most resources are represented and accessed using a string representation of their object name, such as pods for a Pod. RBAC refers to resources using exactly the same name that appears in the URL for the relevant API endpoint. 

### Verbs
API verbs like get, list, create, update, patch, watch, delete, and deletecollection are used for resource requests. 

### API Groups
The API Group being accessed (for resource requests only).

### Non Resource URLs
Requests to endpoints other than /api/v1/... or /apis/<group>/<version>/... are considered "non-resource requests", and use the lower-cased HTTP method of the request as the verb.


Replace the `*` with the appropriate resource. The type of 
```
rules:
- <attributes>:
  - '*'
    
```
https://kubernetes.io/docs/reference/access-authn-authz/rbac/


# Settings
```yaml
  settings:
    parameters:
      - name: attributes
        type: string
        required: true
        value:
      - name: exclude_role_name
        type: string
        required: true
        value:
      - name: exclude_label_key
        type: string
        required: false
        value:
      - name: exclude_label_value
        type: string
        required: false
        value:
```

# Resources
Policy applies to resources kinds:

rules:
  - apiGroups: [rbac.authorization.k8s.io]
    apiVersions: [v1]
    resources: [roles]
    operations: [CREATE, UPDATE]
mutating: false
executionMode: gatekeeper
backgroundAudit: true
annotations:
  io.artifacthub.displayName: Rbac Prohibit Resources Wildcards
  io.artifacthub.keywords: ""
  io.artifacthub.resources: Role
  io.kubewarden.policy.title: rbac-prohibit-resources-wildcards
  io.kubewarden.policy.description: "This Policy prohbits various resources from being set with wildcards for Role or ClusterRole resources, except for the `cluster-admin` ClusterRole. It will check each resource specified for the verb specified. The wildcards will be checked in:\n\n### Resources\nIn the Kubernetes API, most resources are represented and accessed using a string representation of their object name, such as pods for a Pod. RBAC refers to resources using exactly the same name that appears in the URL for the relevant API endpoint. \n\n### Verbs\nAPI verbs like get, list, create, update, patch, watch, delete, and deletecollection are used for resource requests. \n\n### API Groups\nThe API Group being accessed (for resource requests only).\n\n### Non Resource URLs\nRequests to endpoints other than /api/v1/... or /apis/<group>/<version>/... are considered \"non-resource requests\", and use the lower-cased HTTP method of the request as the verb.\n"
  io.kubewarden.policy.author: Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/rbac-prohibit-resources-wildcards
  io.kubewarden.policy.url: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.source: https://github.com/kubewarden/rego-policies
  io.kubewarden.policy.license: Apache-2.0
  io.kubewarden.policy.category: access-control
  io.kubewarden.policy.severity: high
  io.kubewarden.policy.standards.pci-dss: pci-dss.7.1.1, pci-dss.7.1.2
  io.kubewarden.policy.standards.cis-benchmark: cis-benchmark.5.1.3
  io.kubewarden.policy.standards.gdpr: gdpr.25, gdpr.32, gdpr.24
  io.kubewarden.policy.standards.soc2-type-i: soc2-type-i.1.6.3
2024/12/12 13:36:21 Testing RBACProhibitWildcards policy
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACProhibitWildcards'
Makefile:25: If you are updating the artifacthub-pkg.yml file for a release, remember to set the VERSION variable with the proper value. To use the latest tag, use the following command: make VERSION=$(git describe --tags --abbrev=0 | sed 's/\(.*\)\/\(.*\)\2/' | cut -c2-) annotated-policy.wasm
kwctl scaffold artifacthub \
    --metadata-path metadata.yml --version 0.0.1 --output artifacthub-pkg.yml
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACProhibitWildcards'
make: Entering directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACProhibitWildcards'
opa build -t wasm -e policy/violation -o bundle.tar.gz policy.rego
tar xvf bundle.tar.gz /policy.wasm
tar: Removing leading `/' from member names
/policy.wasm
rm bundle.tar.gz
touch policy.wasm # opa creates the bundle with unix epoch timestamp, fix it
kwctl annotate -m metadata.yml -u README.md -o annotated-policy.wasm policy.wasm
make: Leaving directory '/home/kravciak/git/kw/policies/weaveworks/output/staging/RBACProhibitWildcards'
13:36 [32mDone.[0m
